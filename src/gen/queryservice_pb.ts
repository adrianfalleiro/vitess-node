//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service VtTablet exposes for queries.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file queryservice.proto (package queryservice, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { VStreamRequestSchema, VStreamResponseSchema, VStreamResultsRequestSchema, VStreamResultsResponseSchema, VStreamRowsRequestSchema, VStreamRowsResponseSchema, VStreamTablesRequestSchema, VStreamTablesResponseSchema } from "./binlogdata_pb";
import { file_binlogdata } from "./binlogdata_pb";
import type { BeginExecuteRequestSchema, BeginExecuteResponseSchema, BeginRequestSchema, BeginResponseSchema, BeginStreamExecuteRequestSchema, BeginStreamExecuteResponseSchema, CommitPreparedRequestSchema, CommitPreparedResponseSchema, CommitRequestSchema, CommitResponseSchema, ConcludeTransactionRequestSchema, ConcludeTransactionResponseSchema, CreateTransactionRequestSchema, CreateTransactionResponseSchema, ExecuteRequestSchema, ExecuteResponseSchema, GetSchemaRequestSchema, GetSchemaResponseSchema, MessageAckRequestSchema, MessageAckResponseSchema, MessageStreamRequestSchema, MessageStreamResponseSchema, PrepareRequestSchema, PrepareResponseSchema, ReadTransactionRequestSchema, ReadTransactionResponseSchema, ReleaseRequestSchema, ReleaseResponseSchema, ReserveBeginExecuteRequestSchema, ReserveBeginExecuteResponseSchema, ReserveBeginStreamExecuteRequestSchema, ReserveBeginStreamExecuteResponseSchema, ReserveExecuteRequestSchema, ReserveExecuteResponseSchema, ReserveStreamExecuteRequestSchema, ReserveStreamExecuteResponseSchema, RollbackPreparedRequestSchema, RollbackPreparedResponseSchema, RollbackRequestSchema, RollbackResponseSchema, SetRollbackRequestSchema, SetRollbackResponseSchema, StartCommitRequestSchema, StartCommitResponseSchema, StreamExecuteRequestSchema, StreamExecuteResponseSchema, StreamHealthRequestSchema, StreamHealthResponseSchema, UnresolvedTransactionsRequestSchema, UnresolvedTransactionsResponseSchema } from "./query_pb";
import { file_query } from "./query_pb";

/**
 * Describes the file queryservice.proto.
 */
export const file_queryservice: GenFile = /*@__PURE__*/
  fileDesc("ChJxdWVyeXNlcnZpY2UucHJvdG8SDHF1ZXJ5c2VydmljZTKVEgoFUXVlcnkSOgoHRXhlY3V0ZRIVLnF1ZXJ5LkV4ZWN1dGVSZXF1ZXN0GhYucXVlcnkuRXhlY3V0ZVJlc3BvbnNlIgASTgoNU3RyZWFtRXhlY3V0ZRIbLnF1ZXJ5LlN0cmVhbUV4ZWN1dGVSZXF1ZXN0GhwucXVlcnkuU3RyZWFtRXhlY3V0ZVJlc3BvbnNlIgAwARI0CgVCZWdpbhITLnF1ZXJ5LkJlZ2luUmVxdWVzdBoULnF1ZXJ5LkJlZ2luUmVzcG9uc2UiABI3CgZDb21taXQSFC5xdWVyeS5Db21taXRSZXF1ZXN0GhUucXVlcnkuQ29tbWl0UmVzcG9uc2UiABI9CghSb2xsYmFjaxIWLnF1ZXJ5LlJvbGxiYWNrUmVxdWVzdBoXLnF1ZXJ5LlJvbGxiYWNrUmVzcG9uc2UiABI6CgdQcmVwYXJlEhUucXVlcnkuUHJlcGFyZVJlcXVlc3QaFi5xdWVyeS5QcmVwYXJlUmVzcG9uc2UiABJPCg5Db21taXRQcmVwYXJlZBIcLnF1ZXJ5LkNvbW1pdFByZXBhcmVkUmVxdWVzdBodLnF1ZXJ5LkNvbW1pdFByZXBhcmVkUmVzcG9uc2UiABJVChBSb2xsYmFja1ByZXBhcmVkEh4ucXVlcnkuUm9sbGJhY2tQcmVwYXJlZFJlcXVlc3QaHy5xdWVyeS5Sb2xsYmFja1ByZXBhcmVkUmVzcG9uc2UiABJYChFDcmVhdGVUcmFuc2FjdGlvbhIfLnF1ZXJ5LkNyZWF0ZVRyYW5zYWN0aW9uUmVxdWVzdBogLnF1ZXJ5LkNyZWF0ZVRyYW5zYWN0aW9uUmVzcG9uc2UiABJGCgtTdGFydENvbW1pdBIZLnF1ZXJ5LlN0YXJ0Q29tbWl0UmVxdWVzdBoaLnF1ZXJ5LlN0YXJ0Q29tbWl0UmVzcG9uc2UiABJGCgtTZXRSb2xsYmFjaxIZLnF1ZXJ5LlNldFJvbGxiYWNrUmVxdWVzdBoaLnF1ZXJ5LlNldFJvbGxiYWNrUmVzcG9uc2UiABJeChNDb25jbHVkZVRyYW5zYWN0aW9uEiEucXVlcnkuQ29uY2x1ZGVUcmFuc2FjdGlvblJlcXVlc3QaIi5xdWVyeS5Db25jbHVkZVRyYW5zYWN0aW9uUmVzcG9uc2UiABJSCg9SZWFkVHJhbnNhY3Rpb24SHS5xdWVyeS5SZWFkVHJhbnNhY3Rpb25SZXF1ZXN0Gh4ucXVlcnkuUmVhZFRyYW5zYWN0aW9uUmVzcG9uc2UiABJnChZVbnJlc29sdmVkVHJhbnNhY3Rpb25zEiQucXVlcnkuVW5yZXNvbHZlZFRyYW5zYWN0aW9uc1JlcXVlc3QaJS5xdWVyeS5VbnJlc29sdmVkVHJhbnNhY3Rpb25zUmVzcG9uc2UiABJJCgxCZWdpbkV4ZWN1dGUSGi5xdWVyeS5CZWdpbkV4ZWN1dGVSZXF1ZXN0GhsucXVlcnkuQmVnaW5FeGVjdXRlUmVzcG9uc2UiABJdChJCZWdpblN0cmVhbUV4ZWN1dGUSIC5xdWVyeS5CZWdpblN0cmVhbUV4ZWN1dGVSZXF1ZXN0GiEucXVlcnkuQmVnaW5TdHJlYW1FeGVjdXRlUmVzcG9uc2UiADABEk4KDU1lc3NhZ2VTdHJlYW0SGy5xdWVyeS5NZXNzYWdlU3RyZWFtUmVxdWVzdBocLnF1ZXJ5Lk1lc3NhZ2VTdHJlYW1SZXNwb25zZSIAMAESQwoKTWVzc2FnZUFjaxIYLnF1ZXJ5Lk1lc3NhZ2VBY2tSZXF1ZXN0GhkucXVlcnkuTWVzc2FnZUFja1Jlc3BvbnNlIgASTwoOUmVzZXJ2ZUV4ZWN1dGUSHC5xdWVyeS5SZXNlcnZlRXhlY3V0ZVJlcXVlc3QaHS5xdWVyeS5SZXNlcnZlRXhlY3V0ZVJlc3BvbnNlIgASXgoTUmVzZXJ2ZUJlZ2luRXhlY3V0ZRIhLnF1ZXJ5LlJlc2VydmVCZWdpbkV4ZWN1dGVSZXF1ZXN0GiIucXVlcnkuUmVzZXJ2ZUJlZ2luRXhlY3V0ZVJlc3BvbnNlIgASYwoUUmVzZXJ2ZVN0cmVhbUV4ZWN1dGUSIi5xdWVyeS5SZXNlcnZlU3RyZWFtRXhlY3V0ZVJlcXVlc3QaIy5xdWVyeS5SZXNlcnZlU3RyZWFtRXhlY3V0ZVJlc3BvbnNlIgAwARJyChlSZXNlcnZlQmVnaW5TdHJlYW1FeGVjdXRlEicucXVlcnkuUmVzZXJ2ZUJlZ2luU3RyZWFtRXhlY3V0ZVJlcXVlc3QaKC5xdWVyeS5SZXNlcnZlQmVnaW5TdHJlYW1FeGVjdXRlUmVzcG9uc2UiADABEjoKB1JlbGVhc2USFS5xdWVyeS5SZWxlYXNlUmVxdWVzdBoWLnF1ZXJ5LlJlbGVhc2VSZXNwb25zZSIAEksKDFN0cmVhbUhlYWx0aBIaLnF1ZXJ5LlN0cmVhbUhlYWx0aFJlcXVlc3QaGy5xdWVyeS5TdHJlYW1IZWFsdGhSZXNwb25zZSIAMAESRgoHVlN0cmVhbRIaLmJpbmxvZ2RhdGEuVlN0cmVhbVJlcXVlc3QaGy5iaW5sb2dkYXRhLlZTdHJlYW1SZXNwb25zZSIAMAESUgoLVlN0cmVhbVJvd3MSHi5iaW5sb2dkYXRhLlZTdHJlYW1Sb3dzUmVxdWVzdBofLmJpbmxvZ2RhdGEuVlN0cmVhbVJvd3NSZXNwb25zZSIAMAESWAoNVlN0cmVhbVRhYmxlcxIgLmJpbmxvZ2RhdGEuVlN0cmVhbVRhYmxlc1JlcXVlc3QaIS5iaW5sb2dkYXRhLlZTdHJlYW1UYWJsZXNSZXNwb25zZSIAMAESWwoOVlN0cmVhbVJlc3VsdHMSIS5iaW5sb2dkYXRhLlZTdHJlYW1SZXN1bHRzUmVxdWVzdBoiLmJpbmxvZ2RhdGEuVlN0cmVhbVJlc3VsdHNSZXNwb25zZSIAMAESQgoJR2V0U2NoZW1hEhcucXVlcnkuR2V0U2NoZW1hUmVxdWVzdBoYLnF1ZXJ5LkdldFNjaGVtYVJlc3BvbnNlIgAwAUIrWil2aXRlc3MuaW8vdml0ZXNzL2dvL3Z0L3Byb3RvL3F1ZXJ5c2VydmljZWIGcHJvdG8z", [file_binlogdata, file_query]);

/**
 * Query defines the tablet query service, implemented by vttablet.
 *
 * @generated from service queryservice.Query
 */
export const Query: GenService<{
  /**
   * Execute executes the specified SQL query (might be in a
   * transaction context, if Query.transaction_id is set).
   *
   * @generated from rpc queryservice.Query.Execute
   */
  execute: {
    methodKind: "unary";
    input: typeof ExecuteRequestSchema;
    output: typeof ExecuteResponseSchema;
  },
  /**
   * StreamExecute executes a streaming query. Use this method if the
   * query returns a large number of rows. The first QueryResult will
   * contain the Fields, subsequent QueryResult messages will contain
   * the rows.
   *
   * @generated from rpc queryservice.Query.StreamExecute
   */
  streamExecute: {
    methodKind: "server_streaming";
    input: typeof StreamExecuteRequestSchema;
    output: typeof StreamExecuteResponseSchema;
  },
  /**
   * Begin a transaction.
   *
   * @generated from rpc queryservice.Query.Begin
   */
  begin: {
    methodKind: "unary";
    input: typeof BeginRequestSchema;
    output: typeof BeginResponseSchema;
  },
  /**
   * Commit a transaction.
   *
   * @generated from rpc queryservice.Query.Commit
   */
  commit: {
    methodKind: "unary";
    input: typeof CommitRequestSchema;
    output: typeof CommitResponseSchema;
  },
  /**
   * Rollback a transaction.
   *
   * @generated from rpc queryservice.Query.Rollback
   */
  rollback: {
    methodKind: "unary";
    input: typeof RollbackRequestSchema;
    output: typeof RollbackResponseSchema;
  },
  /**
   * Prepare preares a transaction.
   *
   * @generated from rpc queryservice.Query.Prepare
   */
  prepare: {
    methodKind: "unary";
    input: typeof PrepareRequestSchema;
    output: typeof PrepareResponseSchema;
  },
  /**
   * CommitPrepared commits a prepared transaction.
   *
   * @generated from rpc queryservice.Query.CommitPrepared
   */
  commitPrepared: {
    methodKind: "unary";
    input: typeof CommitPreparedRequestSchema;
    output: typeof CommitPreparedResponseSchema;
  },
  /**
   * RollbackPrepared rolls back a prepared transaction.
   *
   * @generated from rpc queryservice.Query.RollbackPrepared
   */
  rollbackPrepared: {
    methodKind: "unary";
    input: typeof RollbackPreparedRequestSchema;
    output: typeof RollbackPreparedResponseSchema;
  },
  /**
   * CreateTransaction creates the metadata for a 2pc transaction.
   *
   * @generated from rpc queryservice.Query.CreateTransaction
   */
  createTransaction: {
    methodKind: "unary";
    input: typeof CreateTransactionRequestSchema;
    output: typeof CreateTransactionResponseSchema;
  },
  /**
   * StartCommit initiates a commit for a 2pc transaction.
   *
   * @generated from rpc queryservice.Query.StartCommit
   */
  startCommit: {
    methodKind: "unary";
    input: typeof StartCommitRequestSchema;
    output: typeof StartCommitResponseSchema;
  },
  /**
   * SetRollback marks the 2pc transaction for rollback.
   *
   * @generated from rpc queryservice.Query.SetRollback
   */
  setRollback: {
    methodKind: "unary";
    input: typeof SetRollbackRequestSchema;
    output: typeof SetRollbackResponseSchema;
  },
  /**
   * ConcludeTransaction marks the 2pc transaction as resolved.
   *
   * @generated from rpc queryservice.Query.ConcludeTransaction
   */
  concludeTransaction: {
    methodKind: "unary";
    input: typeof ConcludeTransactionRequestSchema;
    output: typeof ConcludeTransactionResponseSchema;
  },
  /**
   * ReadTransaction returns the 2pc transaction info.
   *
   * @generated from rpc queryservice.Query.ReadTransaction
   */
  readTransaction: {
    methodKind: "unary";
    input: typeof ReadTransactionRequestSchema;
    output: typeof ReadTransactionResponseSchema;
  },
  /**
   * UnresolvedTransactions returns the 2pc transaction info.
   *
   * @generated from rpc queryservice.Query.UnresolvedTransactions
   */
  unresolvedTransactions: {
    methodKind: "unary";
    input: typeof UnresolvedTransactionsRequestSchema;
    output: typeof UnresolvedTransactionsResponseSchema;
  },
  /**
   * BeginExecute executes a begin and the specified SQL query.
   *
   * @generated from rpc queryservice.Query.BeginExecute
   */
  beginExecute: {
    methodKind: "unary";
    input: typeof BeginExecuteRequestSchema;
    output: typeof BeginExecuteResponseSchema;
  },
  /**
   * BeginStreamExecute executes a begin and the specified SQL query.
   *
   * @generated from rpc queryservice.Query.BeginStreamExecute
   */
  beginStreamExecute: {
    methodKind: "server_streaming";
    input: typeof BeginStreamExecuteRequestSchema;
    output: typeof BeginStreamExecuteResponseSchema;
  },
  /**
   * MessageStream streams messages from a message table.
   *
   * @generated from rpc queryservice.Query.MessageStream
   */
  messageStream: {
    methodKind: "server_streaming";
    input: typeof MessageStreamRequestSchema;
    output: typeof MessageStreamResponseSchema;
  },
  /**
   * MessageAck acks messages for a table.
   *
   * @generated from rpc queryservice.Query.MessageAck
   */
  messageAck: {
    methodKind: "unary";
    input: typeof MessageAckRequestSchema;
    output: typeof MessageAckResponseSchema;
  },
  /**
   * ReserveExecute executes a query on a reserved connection
   *
   * @generated from rpc queryservice.Query.ReserveExecute
   */
  reserveExecute: {
    methodKind: "unary";
    input: typeof ReserveExecuteRequestSchema;
    output: typeof ReserveExecuteResponseSchema;
  },
  /**
   * ReserveBeginExecute starts a transaction and executes a query in the transaction on a reserved connection
   *
   * @generated from rpc queryservice.Query.ReserveBeginExecute
   */
  reserveBeginExecute: {
    methodKind: "unary";
    input: typeof ReserveBeginExecuteRequestSchema;
    output: typeof ReserveBeginExecuteResponseSchema;
  },
  /**
   * ReserveStreamExecute executes a streaming query on a reserved connection
   *
   * @generated from rpc queryservice.Query.ReserveStreamExecute
   */
  reserveStreamExecute: {
    methodKind: "server_streaming";
    input: typeof ReserveStreamExecuteRequestSchema;
    output: typeof ReserveStreamExecuteResponseSchema;
  },
  /**
   * ReserveBeginStreamExecute starts a transaction and executes a streaming query in the transaction on a reserved connection
   *
   * @generated from rpc queryservice.Query.ReserveBeginStreamExecute
   */
  reserveBeginStreamExecute: {
    methodKind: "server_streaming";
    input: typeof ReserveBeginStreamExecuteRequestSchema;
    output: typeof ReserveBeginStreamExecuteResponseSchema;
  },
  /**
   * Release releases the connection
   *
   * @generated from rpc queryservice.Query.Release
   */
  release: {
    methodKind: "unary";
    input: typeof ReleaseRequestSchema;
    output: typeof ReleaseResponseSchema;
  },
  /**
   * StreamHealth runs a streaming RPC to the tablet, that returns the
   * current health of the tablet on a regular basis.
   *
   * @generated from rpc queryservice.Query.StreamHealth
   */
  streamHealth: {
    methodKind: "server_streaming";
    input: typeof StreamHealthRequestSchema;
    output: typeof StreamHealthResponseSchema;
  },
  /**
   * VStream streams vreplication events.
   *
   * @generated from rpc queryservice.Query.VStream
   */
  vStream: {
    methodKind: "server_streaming";
    input: typeof VStreamRequestSchema;
    output: typeof VStreamResponseSchema;
  },
  /**
   * VStreamRows streams rows from the specified starting point.
   *
   * @generated from rpc queryservice.Query.VStreamRows
   */
  vStreamRows: {
    methodKind: "server_streaming";
    input: typeof VStreamRowsRequestSchema;
    output: typeof VStreamRowsResponseSchema;
  },
  /**
   * VStreamTables streams rows from the specified starting point.
   *
   * @generated from rpc queryservice.Query.VStreamTables
   */
  vStreamTables: {
    methodKind: "server_streaming";
    input: typeof VStreamTablesRequestSchema;
    output: typeof VStreamTablesResponseSchema;
  },
  /**
   * VStreamResults streams results along with the gtid of the snapshot.
   *
   * @generated from rpc queryservice.Query.VStreamResults
   */
  vStreamResults: {
    methodKind: "server_streaming";
    input: typeof VStreamResultsRequestSchema;
    output: typeof VStreamResultsResponseSchema;
  },
  /**
   * GetSchema returns the schema information.
   *
   * @generated from rpc queryservice.Query.GetSchema
   */
  getSchema: {
    methodKind: "server_streaming";
    input: typeof GetSchemaRequestSchema;
    output: typeof GetSchemaResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_queryservice, 0);

