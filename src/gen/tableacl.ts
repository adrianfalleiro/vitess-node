// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "tableacl.proto" (package "tableacl", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// Table ACL proto definitions.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * TableGroupSpec defines ACLs for a group of tables.
 *
 * @generated from protobuf message tableacl.TableGroupSpec
 */
export interface TableGroupSpec {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * either tables or a table name prefixes (if it ends in a %)
     *
     * @generated from protobuf field: repeated string table_names_or_prefixes = 2;
     */
    tableNamesOrPrefixes: string[];
    /**
     * @generated from protobuf field: repeated string readers = 3;
     */
    readers: string[];
    /**
     * @generated from protobuf field: repeated string writers = 4;
     */
    writers: string[];
    /**
     * @generated from protobuf field: repeated string admins = 5;
     */
    admins: string[];
}
/**
 * @generated from protobuf message tableacl.Config
 */
export interface Config {
    /**
     * @generated from protobuf field: repeated tableacl.TableGroupSpec table_groups = 1;
     */
    tableGroups: TableGroupSpec[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TableGroupSpec$Type extends MessageType<TableGroupSpec> {
    constructor() {
        super("tableacl.TableGroupSpec", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "table_names_or_prefixes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "readers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "writers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "admins", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TableGroupSpec>): TableGroupSpec {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.tableNamesOrPrefixes = [];
        message.readers = [];
        message.writers = [];
        message.admins = [];
        if (value !== undefined)
            reflectionMergePartial<TableGroupSpec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TableGroupSpec): TableGroupSpec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated string table_names_or_prefixes */ 2:
                    message.tableNamesOrPrefixes.push(reader.string());
                    break;
                case /* repeated string readers */ 3:
                    message.readers.push(reader.string());
                    break;
                case /* repeated string writers */ 4:
                    message.writers.push(reader.string());
                    break;
                case /* repeated string admins */ 5:
                    message.admins.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TableGroupSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated string table_names_or_prefixes = 2; */
        for (let i = 0; i < message.tableNamesOrPrefixes.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tableNamesOrPrefixes[i]);
        /* repeated string readers = 3; */
        for (let i = 0; i < message.readers.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.readers[i]);
        /* repeated string writers = 4; */
        for (let i = 0; i < message.writers.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.writers[i]);
        /* repeated string admins = 5; */
        for (let i = 0; i < message.admins.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.admins[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tableacl.TableGroupSpec
 */
export const TableGroupSpec = new TableGroupSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Config$Type extends MessageType<Config> {
    constructor() {
        super("tableacl.Config", [
            { no: 1, name: "table_groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TableGroupSpec }
        ]);
    }
    create(value?: PartialMessage<Config>): Config {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tableGroups = [];
        if (value !== undefined)
            reflectionMergePartial<Config>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Config): Config {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tableacl.TableGroupSpec table_groups */ 1:
                    message.tableGroups.push(TableGroupSpec.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Config, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tableacl.TableGroupSpec table_groups = 1; */
        for (let i = 0; i < message.tableGroups.length; i++)
            TableGroupSpec.internalBinaryWrite(message.tableGroups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tableacl.Config
 */
export const Config = new Config$Type();
