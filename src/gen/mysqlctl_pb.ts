//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service definition for making management API
// calls to mysqlctld.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file mysqlctl.proto (package mysqlctl, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { TabletAlias, TabletAliasJson } from "./topodata_pb";
import { file_topodata } from "./topodata_pb";
import type { RPCError, RPCErrorJson } from "./vtrpc_pb";
import { file_vtrpc } from "./vtrpc_pb";
import type { Duration, DurationJson, Time, TimeJson } from "./vttime_pb";
import { file_vttime } from "./vttime_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file mysqlctl.proto.
 */
export const file_mysqlctl: GenFile = /*@__PURE__*/
  fileDesc("Cg5teXNxbGN0bC5wcm90bxIIbXlzcWxjdGwiIwoMU3RhcnRSZXF1ZXN0EhMKC215c3FsZF9hcmdzGAEgAygJIg8KDVN0YXJ0UmVzcG9uc2UiXAoPU2h1dGRvd25SZXF1ZXN0EhcKD3dhaXRfZm9yX215c3FsZBgBIAEoCBIwChZteXNxbF9zaHV0ZG93bl90aW1lb3V0GAIgASgLMhAudnR0aW1lLkR1cmF0aW9uIhIKEFNodXRkb3duUmVzcG9uc2UiGAoWUnVuTXlzcWxVcGdyYWRlUmVxdWVzdCIZChdSdW5NeXNxbFVwZ3JhZGVSZXNwb25zZSKCAQoWQXBwbHlCaW5sb2dGaWxlUmVxdWVzdBIYChBiaW5sb2dfZmlsZV9uYW1lGAEgASgJEh8KF2JpbmxvZ19yZXN0b3JlX3Bvc2l0aW9uGAIgASgJEi0KF2JpbmxvZ19yZXN0b3JlX2RhdGV0aW1lGAMgASgLMgwudnR0aW1lLlRpbWUiGQoXQXBwbHlCaW5sb2dGaWxlUmVzcG9uc2UiPQogUmVhZEJpbmxvZ0ZpbGVzVGltZXN0YW1wc1JlcXVlc3QSGQoRYmlubG9nX2ZpbGVfbmFtZXMYASADKAkirwEKIVJlYWRCaW5sb2dGaWxlc1RpbWVzdGFtcHNSZXNwb25zZRIlCg9maXJzdF90aW1lc3RhbXAYASABKAsyDC52dHRpbWUuVGltZRIeChZmaXJzdF90aW1lc3RhbXBfYmlubG9nGAIgASgJEiQKDmxhc3RfdGltZXN0YW1wGAMgASgLMgwudnR0aW1lLlRpbWUSHQoVbGFzdF90aW1lc3RhbXBfYmlubG9nGAQgASgJIhUKE1JlaW5pdENvbmZpZ1JlcXVlc3QiFgoUUmVpbml0Q29uZmlnUmVzcG9uc2UiFgoUUmVmcmVzaENvbmZpZ1JlcXVlc3QiFwoVUmVmcmVzaENvbmZpZ1Jlc3BvbnNlIhYKFFZlcnNpb25TdHJpbmdSZXF1ZXN0IigKFVZlcnNpb25TdHJpbmdSZXNwb25zZRIPCgd2ZXJzaW9uGAEgASgJIhQKEkhvc3RNZXRyaWNzUmVxdWVzdCLvAQoTSG9zdE1ldHJpY3NSZXNwb25zZRI7CgdtZXRyaWNzGAEgAygLMioubXlzcWxjdGwuSG9zdE1ldHJpY3NSZXNwb25zZS5NZXRyaWNzRW50cnkaRQoGTWV0cmljEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAESHgoFZXJyb3IYAyABKAsyDy52dHJwYy5SUENFcnJvchpUCgxNZXRyaWNzRW50cnkSCwoDa2V5GAEgASgJEjMKBXZhbHVlGAIgASgLMiQubXlzcWxjdGwuSG9zdE1ldHJpY3NSZXNwb25zZS5NZXRyaWM6AjgBIqECCgpCYWNrdXBJbmZvEgwKBG5hbWUYASABKAkSEQoJZGlyZWN0b3J5GAIgASgJEhAKCGtleXNwYWNlGAMgASgJEg0KBXNoYXJkGAQgASgJEisKDHRhYmxldF9hbGlhcxgFIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEhoKBHRpbWUYBiABKAsyDC52dHRpbWUuVGltZRIOCgZlbmdpbmUYByABKAkSKwoGc3RhdHVzGAggASgOMhsubXlzcWxjdGwuQmFja3VwSW5mby5TdGF0dXMiSwoGU3RhdHVzEgsKB1VOS05PV04QABIOCgpJTkNPTVBMRVRFEAESDAoIQ09NUExFVEUQAhILCgdJTlZBTElEEAMSCQoFVkFMSUQQBDL+BQoITXlzcWxDdGwSOgoFU3RhcnQSFi5teXNxbGN0bC5TdGFydFJlcXVlc3QaFy5teXNxbGN0bC5TdGFydFJlc3BvbnNlIgASQwoIU2h1dGRvd24SGS5teXNxbGN0bC5TaHV0ZG93blJlcXVlc3QaGi5teXNxbGN0bC5TaHV0ZG93blJlc3BvbnNlIgASWAoPUnVuTXlzcWxVcGdyYWRlEiAubXlzcWxjdGwuUnVuTXlzcWxVcGdyYWRlUmVxdWVzdBohLm15c3FsY3RsLlJ1bk15c3FsVXBncmFkZVJlc3BvbnNlIgASWAoPQXBwbHlCaW5sb2dGaWxlEiAubXlzcWxjdGwuQXBwbHlCaW5sb2dGaWxlUmVxdWVzdBohLm15c3FsY3RsLkFwcGx5QmlubG9nRmlsZVJlc3BvbnNlIgASdgoZUmVhZEJpbmxvZ0ZpbGVzVGltZXN0YW1wcxIqLm15c3FsY3RsLlJlYWRCaW5sb2dGaWxlc1RpbWVzdGFtcHNSZXF1ZXN0GisubXlzcWxjdGwuUmVhZEJpbmxvZ0ZpbGVzVGltZXN0YW1wc1Jlc3BvbnNlIgASTwoMUmVpbml0Q29uZmlnEh0ubXlzcWxjdGwuUmVpbml0Q29uZmlnUmVxdWVzdBoeLm15c3FsY3RsLlJlaW5pdENvbmZpZ1Jlc3BvbnNlIgASUgoNUmVmcmVzaENvbmZpZxIeLm15c3FsY3RsLlJlZnJlc2hDb25maWdSZXF1ZXN0Gh8ubXlzcWxjdGwuUmVmcmVzaENvbmZpZ1Jlc3BvbnNlIgASUgoNVmVyc2lvblN0cmluZxIeLm15c3FsY3RsLlZlcnNpb25TdHJpbmdSZXF1ZXN0Gh8ubXlzcWxjdGwuVmVyc2lvblN0cmluZ1Jlc3BvbnNlIgASTAoLSG9zdE1ldHJpY3MSHC5teXNxbGN0bC5Ib3N0TWV0cmljc1JlcXVlc3QaHS5teXNxbGN0bC5Ib3N0TWV0cmljc1Jlc3BvbnNlIgBCJ1oldml0ZXNzLmlvL3ZpdGVzcy9nby92dC9wcm90by9teXNxbGN0bGIGcHJvdG8z", [file_topodata, file_vtrpc, file_vttime]);

/**
 * @generated from message mysqlctl.StartRequest
 */
export type StartRequest = Message<"mysqlctl.StartRequest"> & {
  /**
   * @generated from field: repeated string mysqld_args = 1;
   */
  mysqldArgs: string[];
};

/**
 * @generated from message mysqlctl.StartRequest
 */
export type StartRequestJson = {
  /**
   * @generated from field: repeated string mysqld_args = 1;
   */
  mysqldArgs?: string[];
};

/**
 * Describes the message mysqlctl.StartRequest.
 * Use `create(StartRequestSchema)` to create a new message.
 */
export const StartRequestSchema: GenMessage<StartRequest, StartRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 0);

/**
 * @generated from message mysqlctl.StartResponse
 */
export type StartResponse = Message<"mysqlctl.StartResponse"> & {
};

/**
 * @generated from message mysqlctl.StartResponse
 */
export type StartResponseJson = {
};

/**
 * Describes the message mysqlctl.StartResponse.
 * Use `create(StartResponseSchema)` to create a new message.
 */
export const StartResponseSchema: GenMessage<StartResponse, StartResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 1);

/**
 * @generated from message mysqlctl.ShutdownRequest
 */
export type ShutdownRequest = Message<"mysqlctl.ShutdownRequest"> & {
  /**
   * @generated from field: bool wait_for_mysqld = 1;
   */
  waitForMysqld: boolean;

  /**
   * @generated from field: vttime.Duration mysql_shutdown_timeout = 2;
   */
  mysqlShutdownTimeout?: Duration;
};

/**
 * @generated from message mysqlctl.ShutdownRequest
 */
export type ShutdownRequestJson = {
  /**
   * @generated from field: bool wait_for_mysqld = 1;
   */
  waitForMysqld?: boolean;

  /**
   * @generated from field: vttime.Duration mysql_shutdown_timeout = 2;
   */
  mysqlShutdownTimeout?: DurationJson;
};

/**
 * Describes the message mysqlctl.ShutdownRequest.
 * Use `create(ShutdownRequestSchema)` to create a new message.
 */
export const ShutdownRequestSchema: GenMessage<ShutdownRequest, ShutdownRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 2);

/**
 * @generated from message mysqlctl.ShutdownResponse
 */
export type ShutdownResponse = Message<"mysqlctl.ShutdownResponse"> & {
};

/**
 * @generated from message mysqlctl.ShutdownResponse
 */
export type ShutdownResponseJson = {
};

/**
 * Describes the message mysqlctl.ShutdownResponse.
 * Use `create(ShutdownResponseSchema)` to create a new message.
 */
export const ShutdownResponseSchema: GenMessage<ShutdownResponse, ShutdownResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 3);

/**
 * @generated from message mysqlctl.RunMysqlUpgradeRequest
 */
export type RunMysqlUpgradeRequest = Message<"mysqlctl.RunMysqlUpgradeRequest"> & {
};

/**
 * @generated from message mysqlctl.RunMysqlUpgradeRequest
 */
export type RunMysqlUpgradeRequestJson = {
};

/**
 * Describes the message mysqlctl.RunMysqlUpgradeRequest.
 * Use `create(RunMysqlUpgradeRequestSchema)` to create a new message.
 */
export const RunMysqlUpgradeRequestSchema: GenMessage<RunMysqlUpgradeRequest, RunMysqlUpgradeRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 4);

/**
 * @generated from message mysqlctl.RunMysqlUpgradeResponse
 */
export type RunMysqlUpgradeResponse = Message<"mysqlctl.RunMysqlUpgradeResponse"> & {
};

/**
 * @generated from message mysqlctl.RunMysqlUpgradeResponse
 */
export type RunMysqlUpgradeResponseJson = {
};

/**
 * Describes the message mysqlctl.RunMysqlUpgradeResponse.
 * Use `create(RunMysqlUpgradeResponseSchema)` to create a new message.
 */
export const RunMysqlUpgradeResponseSchema: GenMessage<RunMysqlUpgradeResponse, RunMysqlUpgradeResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 5);

/**
 * @generated from message mysqlctl.ApplyBinlogFileRequest
 */
export type ApplyBinlogFileRequest = Message<"mysqlctl.ApplyBinlogFileRequest"> & {
  /**
   * @generated from field: string binlog_file_name = 1;
   */
  binlogFileName: string;

  /**
   * @generated from field: string binlog_restore_position = 2;
   */
  binlogRestorePosition: string;

  /**
   * @generated from field: vttime.Time binlog_restore_datetime = 3;
   */
  binlogRestoreDatetime?: Time;
};

/**
 * @generated from message mysqlctl.ApplyBinlogFileRequest
 */
export type ApplyBinlogFileRequestJson = {
  /**
   * @generated from field: string binlog_file_name = 1;
   */
  binlogFileName?: string;

  /**
   * @generated from field: string binlog_restore_position = 2;
   */
  binlogRestorePosition?: string;

  /**
   * @generated from field: vttime.Time binlog_restore_datetime = 3;
   */
  binlogRestoreDatetime?: TimeJson;
};

/**
 * Describes the message mysqlctl.ApplyBinlogFileRequest.
 * Use `create(ApplyBinlogFileRequestSchema)` to create a new message.
 */
export const ApplyBinlogFileRequestSchema: GenMessage<ApplyBinlogFileRequest, ApplyBinlogFileRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 6);

/**
 * @generated from message mysqlctl.ApplyBinlogFileResponse
 */
export type ApplyBinlogFileResponse = Message<"mysqlctl.ApplyBinlogFileResponse"> & {
};

/**
 * @generated from message mysqlctl.ApplyBinlogFileResponse
 */
export type ApplyBinlogFileResponseJson = {
};

/**
 * Describes the message mysqlctl.ApplyBinlogFileResponse.
 * Use `create(ApplyBinlogFileResponseSchema)` to create a new message.
 */
export const ApplyBinlogFileResponseSchema: GenMessage<ApplyBinlogFileResponse, ApplyBinlogFileResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 7);

/**
 * @generated from message mysqlctl.ReadBinlogFilesTimestampsRequest
 */
export type ReadBinlogFilesTimestampsRequest = Message<"mysqlctl.ReadBinlogFilesTimestampsRequest"> & {
  /**
   * @generated from field: repeated string binlog_file_names = 1;
   */
  binlogFileNames: string[];
};

/**
 * @generated from message mysqlctl.ReadBinlogFilesTimestampsRequest
 */
export type ReadBinlogFilesTimestampsRequestJson = {
  /**
   * @generated from field: repeated string binlog_file_names = 1;
   */
  binlogFileNames?: string[];
};

/**
 * Describes the message mysqlctl.ReadBinlogFilesTimestampsRequest.
 * Use `create(ReadBinlogFilesTimestampsRequestSchema)` to create a new message.
 */
export const ReadBinlogFilesTimestampsRequestSchema: GenMessage<ReadBinlogFilesTimestampsRequest, ReadBinlogFilesTimestampsRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 8);

/**
 * @generated from message mysqlctl.ReadBinlogFilesTimestampsResponse
 */
export type ReadBinlogFilesTimestampsResponse = Message<"mysqlctl.ReadBinlogFilesTimestampsResponse"> & {
  /**
   * FirstTimestamp is the timestamp of the first found transaction searching in order of given binlog files
   *
   * @generated from field: vttime.Time first_timestamp = 1;
   */
  firstTimestamp?: Time;

  /**
   * FirstTimestampBinlog is the name of the binary log in which the first timestamp is found
   *
   * @generated from field: string first_timestamp_binlog = 2;
   */
  firstTimestampBinlog: string;

  /**
   * LastTimestamp is the timestamp of the last found transaction in given binlog files
   *
   * @generated from field: vttime.Time last_timestamp = 3;
   */
  lastTimestamp?: Time;

  /**
   * LastTimestampBinlog is the name of the binary log in which the last timestamp is found
   *
   * @generated from field: string last_timestamp_binlog = 4;
   */
  lastTimestampBinlog: string;
};

/**
 * @generated from message mysqlctl.ReadBinlogFilesTimestampsResponse
 */
export type ReadBinlogFilesTimestampsResponseJson = {
  /**
   * FirstTimestamp is the timestamp of the first found transaction searching in order of given binlog files
   *
   * @generated from field: vttime.Time first_timestamp = 1;
   */
  firstTimestamp?: TimeJson;

  /**
   * FirstTimestampBinlog is the name of the binary log in which the first timestamp is found
   *
   * @generated from field: string first_timestamp_binlog = 2;
   */
  firstTimestampBinlog?: string;

  /**
   * LastTimestamp is the timestamp of the last found transaction in given binlog files
   *
   * @generated from field: vttime.Time last_timestamp = 3;
   */
  lastTimestamp?: TimeJson;

  /**
   * LastTimestampBinlog is the name of the binary log in which the last timestamp is found
   *
   * @generated from field: string last_timestamp_binlog = 4;
   */
  lastTimestampBinlog?: string;
};

/**
 * Describes the message mysqlctl.ReadBinlogFilesTimestampsResponse.
 * Use `create(ReadBinlogFilesTimestampsResponseSchema)` to create a new message.
 */
export const ReadBinlogFilesTimestampsResponseSchema: GenMessage<ReadBinlogFilesTimestampsResponse, ReadBinlogFilesTimestampsResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 9);

/**
 * @generated from message mysqlctl.ReinitConfigRequest
 */
export type ReinitConfigRequest = Message<"mysqlctl.ReinitConfigRequest"> & {
};

/**
 * @generated from message mysqlctl.ReinitConfigRequest
 */
export type ReinitConfigRequestJson = {
};

/**
 * Describes the message mysqlctl.ReinitConfigRequest.
 * Use `create(ReinitConfigRequestSchema)` to create a new message.
 */
export const ReinitConfigRequestSchema: GenMessage<ReinitConfigRequest, ReinitConfigRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 10);

/**
 * @generated from message mysqlctl.ReinitConfigResponse
 */
export type ReinitConfigResponse = Message<"mysqlctl.ReinitConfigResponse"> & {
};

/**
 * @generated from message mysqlctl.ReinitConfigResponse
 */
export type ReinitConfigResponseJson = {
};

/**
 * Describes the message mysqlctl.ReinitConfigResponse.
 * Use `create(ReinitConfigResponseSchema)` to create a new message.
 */
export const ReinitConfigResponseSchema: GenMessage<ReinitConfigResponse, ReinitConfigResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 11);

/**
 * @generated from message mysqlctl.RefreshConfigRequest
 */
export type RefreshConfigRequest = Message<"mysqlctl.RefreshConfigRequest"> & {
};

/**
 * @generated from message mysqlctl.RefreshConfigRequest
 */
export type RefreshConfigRequestJson = {
};

/**
 * Describes the message mysqlctl.RefreshConfigRequest.
 * Use `create(RefreshConfigRequestSchema)` to create a new message.
 */
export const RefreshConfigRequestSchema: GenMessage<RefreshConfigRequest, RefreshConfigRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 12);

/**
 * @generated from message mysqlctl.RefreshConfigResponse
 */
export type RefreshConfigResponse = Message<"mysqlctl.RefreshConfigResponse"> & {
};

/**
 * @generated from message mysqlctl.RefreshConfigResponse
 */
export type RefreshConfigResponseJson = {
};

/**
 * Describes the message mysqlctl.RefreshConfigResponse.
 * Use `create(RefreshConfigResponseSchema)` to create a new message.
 */
export const RefreshConfigResponseSchema: GenMessage<RefreshConfigResponse, RefreshConfigResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 13);

/**
 * @generated from message mysqlctl.VersionStringRequest
 */
export type VersionStringRequest = Message<"mysqlctl.VersionStringRequest"> & {
};

/**
 * @generated from message mysqlctl.VersionStringRequest
 */
export type VersionStringRequestJson = {
};

/**
 * Describes the message mysqlctl.VersionStringRequest.
 * Use `create(VersionStringRequestSchema)` to create a new message.
 */
export const VersionStringRequestSchema: GenMessage<VersionStringRequest, VersionStringRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 14);

/**
 * @generated from message mysqlctl.VersionStringResponse
 */
export type VersionStringResponse = Message<"mysqlctl.VersionStringResponse"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;
};

/**
 * @generated from message mysqlctl.VersionStringResponse
 */
export type VersionStringResponseJson = {
  /**
   * @generated from field: string version = 1;
   */
  version?: string;
};

/**
 * Describes the message mysqlctl.VersionStringResponse.
 * Use `create(VersionStringResponseSchema)` to create a new message.
 */
export const VersionStringResponseSchema: GenMessage<VersionStringResponse, VersionStringResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 15);

/**
 * @generated from message mysqlctl.HostMetricsRequest
 */
export type HostMetricsRequest = Message<"mysqlctl.HostMetricsRequest"> & {
};

/**
 * @generated from message mysqlctl.HostMetricsRequest
 */
export type HostMetricsRequestJson = {
};

/**
 * Describes the message mysqlctl.HostMetricsRequest.
 * Use `create(HostMetricsRequestSchema)` to create a new message.
 */
export const HostMetricsRequestSchema: GenMessage<HostMetricsRequest, HostMetricsRequestJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 16);

/**
 * @generated from message mysqlctl.HostMetricsResponse
 */
export type HostMetricsResponse = Message<"mysqlctl.HostMetricsResponse"> & {
  /**
   * Metrics is a map (metric name -> metric value/error) so that the client has as much
   * information as possible about all the checked metrics.
   *
   * @generated from field: map<string, mysqlctl.HostMetricsResponse.Metric> metrics = 1;
   */
  metrics: { [key: string]: HostMetricsResponse_Metric };
};

/**
 * @generated from message mysqlctl.HostMetricsResponse
 */
export type HostMetricsResponseJson = {
  /**
   * Metrics is a map (metric name -> metric value/error) so that the client has as much
   * information as possible about all the checked metrics.
   *
   * @generated from field: map<string, mysqlctl.HostMetricsResponse.Metric> metrics = 1;
   */
  metrics?: { [key: string]: HostMetricsResponse_MetricJson };
};

/**
 * Describes the message mysqlctl.HostMetricsResponse.
 * Use `create(HostMetricsResponseSchema)` to create a new message.
 */
export const HostMetricsResponseSchema: GenMessage<HostMetricsResponse, HostMetricsResponseJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 17);

/**
 * @generated from message mysqlctl.HostMetricsResponse.Metric
 */
export type HostMetricsResponse_Metric = Message<"mysqlctl.HostMetricsResponse.Metric"> & {
  /**
   * Name of the metric
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Value is the metric value
   *
   * @generated from field: double value = 2;
   */
  value: number;

  /**
   * Error indicates an error retrieving the value
   *
   * @generated from field: vtrpc.RPCError error = 3;
   */
  error?: RPCError;
};

/**
 * @generated from message mysqlctl.HostMetricsResponse.Metric
 */
export type HostMetricsResponse_MetricJson = {
  /**
   * Name of the metric
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * Value is the metric value
   *
   * @generated from field: double value = 2;
   */
  value?: number | "NaN" | "Infinity" | "-Infinity";

  /**
   * Error indicates an error retrieving the value
   *
   * @generated from field: vtrpc.RPCError error = 3;
   */
  error?: RPCErrorJson;
};

/**
 * Describes the message mysqlctl.HostMetricsResponse.Metric.
 * Use `create(HostMetricsResponse_MetricSchema)` to create a new message.
 */
export const HostMetricsResponse_MetricSchema: GenMessage<HostMetricsResponse_Metric, HostMetricsResponse_MetricJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 17, 0);

/**
 * BackupInfo is the read-only attributes of a mysqlctl/backupstorage.BackupHandle.
 *
 * @generated from message mysqlctl.BackupInfo
 */
export type BackupInfo = Message<"mysqlctl.BackupInfo"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string directory = 2;
   */
  directory: string;

  /**
   * @generated from field: string keyspace = 3;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 4;
   */
  shard: string;

  /**
   * @generated from field: topodata.TabletAlias tablet_alias = 5;
   */
  tabletAlias?: TabletAlias;

  /**
   * @generated from field: vttime.Time time = 6;
   */
  time?: Time;

  /**
   * Engine is the name of the backupengine implementation used to create
   * this backup.
   *
   * @generated from field: string engine = 7;
   */
  engine: string;

  /**
   * @generated from field: mysqlctl.BackupInfo.Status status = 8;
   */
  status: BackupInfo_Status;
};

/**
 * BackupInfo is the read-only attributes of a mysqlctl/backupstorage.BackupHandle.
 *
 * @generated from message mysqlctl.BackupInfo
 */
export type BackupInfoJson = {
  /**
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * @generated from field: string directory = 2;
   */
  directory?: string;

  /**
   * @generated from field: string keyspace = 3;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 4;
   */
  shard?: string;

  /**
   * @generated from field: topodata.TabletAlias tablet_alias = 5;
   */
  tabletAlias?: TabletAliasJson;

  /**
   * @generated from field: vttime.Time time = 6;
   */
  time?: TimeJson;

  /**
   * Engine is the name of the backupengine implementation used to create
   * this backup.
   *
   * @generated from field: string engine = 7;
   */
  engine?: string;

  /**
   * @generated from field: mysqlctl.BackupInfo.Status status = 8;
   */
  status?: BackupInfo_StatusJson;
};

/**
 * Describes the message mysqlctl.BackupInfo.
 * Use `create(BackupInfoSchema)` to create a new message.
 */
export const BackupInfoSchema: GenMessage<BackupInfo, BackupInfoJson> = /*@__PURE__*/
  messageDesc(file_mysqlctl, 18);

/**
 * Status is an enum representing the possible status of a backup.
 *
 * @generated from enum mysqlctl.BackupInfo.Status
 */
export enum BackupInfo_Status {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: INCOMPLETE = 1;
   */
  INCOMPLETE = 1,

  /**
   * @generated from enum value: COMPLETE = 2;
   */
  COMPLETE = 2,

  /**
   * A backup status of INVALID should be set if the backup is complete
   * but unusable in some way (partial upload, corrupt file, etc).
   *
   * @generated from enum value: INVALID = 3;
   */
  INVALID = 3,

  /**
   * A backup status of VALID should be set if the backup is both
   * complete and usuable.
   *
   * @generated from enum value: VALID = 4;
   */
  VALID = 4,
}

/**
 * Status is an enum representing the possible status of a backup.
 *
 * @generated from enum mysqlctl.BackupInfo.Status
 */
export type BackupInfo_StatusJson = "UNKNOWN" | "INCOMPLETE" | "COMPLETE" | "INVALID" | "VALID";

/**
 * Describes the enum mysqlctl.BackupInfo.Status.
 */
export const BackupInfo_StatusSchema: GenEnum<BackupInfo_Status, BackupInfo_StatusJson> = /*@__PURE__*/
  enumDesc(file_mysqlctl, 18, 0);

/**
 * MysqlCtl is the service definition
 *
 * @generated from service mysqlctl.MysqlCtl
 */
export const MysqlCtl: GenService<{
  /**
   * @generated from rpc mysqlctl.MysqlCtl.Start
   */
  start: {
    methodKind: "unary";
    input: typeof StartRequestSchema;
    output: typeof StartResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.Shutdown
   */
  shutdown: {
    methodKind: "unary";
    input: typeof ShutdownRequestSchema;
    output: typeof ShutdownResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.RunMysqlUpgrade
   */
  runMysqlUpgrade: {
    methodKind: "unary";
    input: typeof RunMysqlUpgradeRequestSchema;
    output: typeof RunMysqlUpgradeResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.ApplyBinlogFile
   */
  applyBinlogFile: {
    methodKind: "unary";
    input: typeof ApplyBinlogFileRequestSchema;
    output: typeof ApplyBinlogFileResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.ReadBinlogFilesTimestamps
   */
  readBinlogFilesTimestamps: {
    methodKind: "unary";
    input: typeof ReadBinlogFilesTimestampsRequestSchema;
    output: typeof ReadBinlogFilesTimestampsResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.ReinitConfig
   */
  reinitConfig: {
    methodKind: "unary";
    input: typeof ReinitConfigRequestSchema;
    output: typeof ReinitConfigResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.RefreshConfig
   */
  refreshConfig: {
    methodKind: "unary";
    input: typeof RefreshConfigRequestSchema;
    output: typeof RefreshConfigResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.VersionString
   */
  versionString: {
    methodKind: "unary";
    input: typeof VersionStringRequestSchema;
    output: typeof VersionStringResponseSchema;
  },
  /**
   * @generated from rpc mysqlctl.MysqlCtl.HostMetrics
   */
  hostMetrics: {
    methodKind: "unary";
    input: typeof HostMetricsRequestSchema;
    output: typeof HostMetricsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_mysqlctl, 0);

