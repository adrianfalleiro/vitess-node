//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// gRPC RPC interface for the internal resharding throttler (go/vt/throttler)
// which is used by vreplication.

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file throttlerservice.proto (package throttlerservice, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import { Throttler } from "./throttlerservice_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import type { GetConfigurationRequestJson, GetConfigurationResponseJson, MaxRatesRequestJson, MaxRatesResponseJson, ResetConfigurationRequestJson, ResetConfigurationResponseJson, SetMaxRateRequestJson, SetMaxRateResponseJson, UpdateConfigurationRequestJson, UpdateConfigurationResponseJson } from "./throttlerdata_pb";
import { GetConfigurationRequestSchema, GetConfigurationResponseSchema, MaxRatesRequestSchema, MaxRatesResponseSchema, ResetConfigurationRequestSchema, ResetConfigurationResponseSchema, SetMaxRateRequestSchema, SetMaxRateResponseSchema, UpdateConfigurationRequestSchema, UpdateConfigurationResponseSchema } from "./throttlerdata_pb";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * Throttler defines the throttler RPC calls.
 *
 * @generated from service throttlerservice.Throttler
 */
export class ThrottlerClient {
  #client: Client<typeof Throttler>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(Throttler, transport);
  }

  async maxRates(params: MaxRatesRequestJson, opts?: CallOptions): Promise<MaxRatesResponseJson> {
    const response = await this.#client.maxRates(fromJson(MaxRatesRequestSchema, params), opts);
    return toJson(MaxRatesResponseSchema, response);
  }

  async setMaxRate(params: SetMaxRateRequestJson, opts?: CallOptions): Promise<SetMaxRateResponseJson> {
    const response = await this.#client.setMaxRate(fromJson(SetMaxRateRequestSchema, params), opts);
    return toJson(SetMaxRateResponseSchema, response);
  }

  async getConfiguration(params: GetConfigurationRequestJson, opts?: CallOptions): Promise<GetConfigurationResponseJson> {
    const response = await this.#client.getConfiguration(fromJson(GetConfigurationRequestSchema, params), opts);
    return toJson(GetConfigurationResponseSchema, response);
  }

  async updateConfiguration(params: UpdateConfigurationRequestJson, opts?: CallOptions): Promise<UpdateConfigurationResponseJson> {
    const response = await this.#client.updateConfiguration(fromJson(UpdateConfigurationRequestSchema, params), opts);
    return toJson(UpdateConfigurationResponseSchema, response);
  }

  async resetConfiguration(params: ResetConfigurationRequestJson, opts?: CallOptions): Promise<ResetConfigurationResponseJson> {
    const response = await this.#client.resetConfiguration(fromJson(ResetConfigurationRequestSchema, params), opts);
    return toJson(ResetConfigurationResponseSchema, response);
  }

}
