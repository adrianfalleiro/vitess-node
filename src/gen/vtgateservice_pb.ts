//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Service definition for vtgateservice.
// This is the main entry point to Vitess.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file vtgateservice.proto (package vtgateservice, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { CloseSessionRequestSchema, CloseSessionResponseSchema, ExecuteBatchRequestSchema, ExecuteBatchResponseSchema, ExecuteRequestSchema, ExecuteResponseSchema, PrepareRequestSchema, PrepareResponseSchema, StreamExecuteRequestSchema, StreamExecuteResponseSchema, VStreamRequestSchema, VStreamResponseSchema } from "./vtgate_pb";
import { file_vtgate } from "./vtgate_pb";

/**
 * Describes the file vtgateservice.proto.
 */
export const file_vtgateservice: GenFile = /*@__PURE__*/
  fileDesc("ChN2dGdhdGVzZXJ2aWNlLnByb3RvEg12dGdhdGVzZXJ2aWNlMrADCgZWaXRlc3MSPAoHRXhlY3V0ZRIWLnZ0Z2F0ZS5FeGVjdXRlUmVxdWVzdBoXLnZ0Z2F0ZS5FeGVjdXRlUmVzcG9uc2UiABJLCgxFeGVjdXRlQmF0Y2gSGy52dGdhdGUuRXhlY3V0ZUJhdGNoUmVxdWVzdBocLnZ0Z2F0ZS5FeGVjdXRlQmF0Y2hSZXNwb25zZSIAElAKDVN0cmVhbUV4ZWN1dGUSHC52dGdhdGUuU3RyZWFtRXhlY3V0ZVJlcXVlc3QaHS52dGdhdGUuU3RyZWFtRXhlY3V0ZVJlc3BvbnNlIgAwARI+CgdWU3RyZWFtEhYudnRnYXRlLlZTdHJlYW1SZXF1ZXN0GhcudnRnYXRlLlZTdHJlYW1SZXNwb25zZSIAMAESPAoHUHJlcGFyZRIWLnZ0Z2F0ZS5QcmVwYXJlUmVxdWVzdBoXLnZ0Z2F0ZS5QcmVwYXJlUmVzcG9uc2UiABJLCgxDbG9zZVNlc3Npb24SGy52dGdhdGUuQ2xvc2VTZXNzaW9uUmVxdWVzdBocLnZ0Z2F0ZS5DbG9zZVNlc3Npb25SZXNwb25zZSIAQkIKFGlvLnZpdGVzcy5wcm90by5ncnBjWip2aXRlc3MuaW8vdml0ZXNzL2dvL3Z0L3Byb3RvL3Z0Z2F0ZXNlcnZpY2ViBnByb3RvMw", [file_vtgate]);

/**
 * Vitess is the main service to access a Vitess cluster. It is the API that vtgate
 * exposes to serve all queries.
 *
 * @generated from service vtgateservice.Vitess
 */
export const Vitess: GenService<{
  /**
   * Execute tries to route the query to the right shard.
   * It depends on the query and bind variables to provide enough
   * information in conjunction with the vindexes to route the query.
   * API group: v3
   *
   * @generated from rpc vtgateservice.Vitess.Execute
   */
  execute: {
    methodKind: "unary";
    input: typeof ExecuteRequestSchema;
    output: typeof ExecuteResponseSchema;
  },
  /**
   * ExecuteBatch tries to route the list of queries on the right shards.
   * It depends on the query and bind variables to provide enough
   * information in conjunction with the vindexes to route the query.
   * API group: v3
   *
   * @generated from rpc vtgateservice.Vitess.ExecuteBatch
   */
  executeBatch: {
    methodKind: "unary";
    input: typeof ExecuteBatchRequestSchema;
    output: typeof ExecuteBatchResponseSchema;
  },
  /**
   * StreamExecute executes a streaming query based on shards.
   * It depends on the query and bind variables to provide enough
   * information in conjunction with the vindexes to route the query.
   * Use this method if the query returns a large number of rows.
   * API group: v3
   *
   * @generated from rpc vtgateservice.Vitess.StreamExecute
   */
  streamExecute: {
    methodKind: "server_streaming";
    input: typeof StreamExecuteRequestSchema;
    output: typeof StreamExecuteResponseSchema;
  },
  /**
   * VStream streams binlog events from the requested sources.
   *
   * @generated from rpc vtgateservice.Vitess.VStream
   */
  vStream: {
    methodKind: "server_streaming";
    input: typeof VStreamRequestSchema;
    output: typeof VStreamResponseSchema;
  },
  /**
   * Prepare is used by the MySQL server plugin as part of supporting prepared statements.
   *
   * @generated from rpc vtgateservice.Vitess.Prepare
   */
  prepare: {
    methodKind: "unary";
    input: typeof PrepareRequestSchema;
    output: typeof PrepareResponseSchema;
  },
  /**
   * CloseSession closes the session, rolling back any implicit transactions.
   * This has the same effect as if a "rollback" statement was executed,
   * but does not affect the query statistics.
   *
   * @generated from rpc vtgateservice.Vitess.CloseSession
   */
  closeSession: {
    methodKind: "unary";
    input: typeof CloseSessionRequestSchema;
    output: typeof CloseSessionResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_vtgateservice, 0);

