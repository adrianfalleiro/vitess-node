//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains a service allowing you to use vtctld as a
// proxy for vt commands.

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file vtctlservice.proto (package vtctlservice, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import { Vtctl, Vtctld } from "./vtctlservice_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import type { AddCellInfoRequestJson, AddCellInfoResponseJson, AddCellsAliasRequestJson, AddCellsAliasResponseJson, ApplyKeyspaceRoutingRulesRequestJson, ApplyKeyspaceRoutingRulesResponseJson, ApplyRoutingRulesRequestJson, ApplyRoutingRulesResponseJson, ApplySchemaRequestJson, ApplySchemaResponseJson, ApplyShardRoutingRulesRequestJson, ApplyShardRoutingRulesResponseJson, ApplyVSchemaRequestJson, ApplyVSchemaResponseJson, BackupRequestJson, BackupResponseJson, BackupShardRequestJson, CancelSchemaMigrationRequestJson, CancelSchemaMigrationResponseJson, ChangeTabletTagsRequestJson, ChangeTabletTagsResponseJson, ChangeTabletTypeRequestJson, ChangeTabletTypeResponseJson, CheckThrottlerRequestJson, CheckThrottlerResponseJson, CleanupSchemaMigrationRequestJson, CleanupSchemaMigrationResponseJson, CompleteSchemaMigrationRequestJson, CompleteSchemaMigrationResponseJson, ConcludeTransactionRequestJson, ConcludeTransactionResponseJson, CreateKeyspaceRequestJson, CreateKeyspaceResponseJson, CreateShardRequestJson, CreateShardResponseJson, DeleteCellInfoRequestJson, DeleteCellInfoResponseJson, DeleteCellsAliasRequestJson, DeleteCellsAliasResponseJson, DeleteKeyspaceRequestJson, DeleteKeyspaceResponseJson, DeleteShardsRequestJson, DeleteShardsResponseJson, DeleteSrvVSchemaRequestJson, DeleteSrvVSchemaResponseJson, DeleteTabletsRequestJson, DeleteTabletsResponseJson, EmergencyReparentShardRequestJson, EmergencyReparentShardResponseJson, ExecuteFetchAsAppRequestJson, ExecuteFetchAsAppResponseJson, ExecuteFetchAsDBARequestJson, ExecuteFetchAsDBAResponseJson, ExecuteHookRequestJson, ExecuteHookResponseJson, ExecuteMultiFetchAsDBARequestJson, ExecuteMultiFetchAsDBAResponseJson, ExecuteVtctlCommandRequestJson, ExecuteVtctlCommandResponseJson, FindAllShardsInKeyspaceRequestJson, FindAllShardsInKeyspaceResponseJson, ForceCutOverSchemaMigrationRequestJson, ForceCutOverSchemaMigrationResponseJson, GetBackupsRequestJson, GetBackupsResponseJson, GetCellInfoNamesRequestJson, GetCellInfoNamesResponseJson, GetCellInfoRequestJson, GetCellInfoResponseJson, GetCellsAliasesRequestJson, GetCellsAliasesResponseJson, GetFullStatusRequestJson, GetFullStatusResponseJson, GetKeyspaceRequestJson, GetKeyspaceResponseJson, GetKeyspaceRoutingRulesRequestJson, GetKeyspaceRoutingRulesResponseJson, GetKeyspacesRequestJson, GetKeyspacesResponseJson, GetMirrorRulesRequestJson, GetMirrorRulesResponseJson, GetPermissionsRequestJson, GetPermissionsResponseJson, GetRoutingRulesRequestJson, GetRoutingRulesResponseJson, GetSchemaMigrationsRequestJson, GetSchemaMigrationsResponseJson, GetSchemaRequestJson, GetSchemaResponseJson, GetShardReplicationRequestJson, GetShardReplicationResponseJson, GetShardRequestJson, GetShardResponseJson, GetShardRoutingRulesRequestJson, GetShardRoutingRulesResponseJson, GetSrvKeyspaceNamesRequestJson, GetSrvKeyspaceNamesResponseJson, GetSrvKeyspacesRequestJson, GetSrvKeyspacesResponseJson, GetSrvVSchemaRequestJson, GetSrvVSchemaResponseJson, GetSrvVSchemasRequestJson, GetSrvVSchemasResponseJson, GetTabletRequestJson, GetTabletResponseJson, GetTabletsRequestJson, GetTabletsResponseJson, GetThrottlerStatusRequestJson, GetThrottlerStatusResponseJson, GetTopologyPathRequestJson, GetTopologyPathResponseJson, GetUnresolvedTransactionsRequestJson, GetUnresolvedTransactionsResponseJson, GetVersionRequestJson, GetVersionResponseJson, GetVSchemaRequestJson, GetVSchemaResponseJson, GetWorkflowsRequestJson, GetWorkflowsResponseJson, InitShardPrimaryRequestJson, InitShardPrimaryResponseJson, LaunchSchemaMigrationRequestJson, LaunchSchemaMigrationResponseJson, LookupVindexCreateRequestJson, LookupVindexCreateResponseJson, LookupVindexExternalizeRequestJson, LookupVindexExternalizeResponseJson, MaterializeCreateRequestJson, MaterializeCreateResponseJson, MigrateCreateRequestJson, MountListRequestJson, MountListResponseJson, MountRegisterRequestJson, MountRegisterResponseJson, MountShowRequestJson, MountShowResponseJson, MountUnregisterRequestJson, MountUnregisterResponseJson, MoveTablesCompleteRequestJson, MoveTablesCompleteResponseJson, MoveTablesCreateRequestJson, PingTabletRequestJson, PingTabletResponseJson, PlannedReparentShardRequestJson, PlannedReparentShardResponseJson, RebuildKeyspaceGraphRequestJson, RebuildKeyspaceGraphResponseJson, RebuildVSchemaGraphRequestJson, RebuildVSchemaGraphResponseJson, RefreshStateByShardRequestJson, RefreshStateByShardResponseJson, RefreshStateRequestJson, RefreshStateResponseJson, ReloadSchemaKeyspaceRequestJson, ReloadSchemaKeyspaceResponseJson, ReloadSchemaRequestJson, ReloadSchemaResponseJson, ReloadSchemaShardRequestJson, ReloadSchemaShardResponseJson, RemoveBackupRequestJson, RemoveBackupResponseJson, RemoveKeyspaceCellRequestJson, RemoveKeyspaceCellResponseJson, RemoveShardCellRequestJson, RemoveShardCellResponseJson, ReparentTabletRequestJson, ReparentTabletResponseJson, ReshardCreateRequestJson, RestoreFromBackupRequestJson, RestoreFromBackupResponseJson, RetrySchemaMigrationRequestJson, RetrySchemaMigrationResponseJson, RunHealthCheckRequestJson, RunHealthCheckResponseJson, SetKeyspaceDurabilityPolicyRequestJson, SetKeyspaceDurabilityPolicyResponseJson, SetShardIsPrimaryServingRequestJson, SetShardIsPrimaryServingResponseJson, SetShardTabletControlRequestJson, SetShardTabletControlResponseJson, SetWritableRequestJson, SetWritableResponseJson, ShardReplicationAddRequestJson, ShardReplicationAddResponseJson, ShardReplicationFixRequestJson, ShardReplicationFixResponseJson, ShardReplicationPositionsRequestJson, ShardReplicationPositionsResponseJson, ShardReplicationRemoveRequestJson, ShardReplicationRemoveResponseJson, SleepTabletRequestJson, SleepTabletResponseJson, SourceShardAddRequestJson, SourceShardAddResponseJson, SourceShardDeleteRequestJson, SourceShardDeleteResponseJson, StartReplicationRequestJson, StartReplicationResponseJson, StopReplicationRequestJson, StopReplicationResponseJson, TabletExternallyReparentedRequestJson, TabletExternallyReparentedResponseJson, UpdateCellInfoRequestJson, UpdateCellInfoResponseJson, UpdateCellsAliasRequestJson, UpdateCellsAliasResponseJson, UpdateThrottlerConfigRequestJson, UpdateThrottlerConfigResponseJson, ValidateKeyspaceRequestJson, ValidateKeyspaceResponseJson, ValidateRequestJson, ValidateResponseJson, ValidateSchemaKeyspaceRequestJson, ValidateSchemaKeyspaceResponseJson, ValidateShardRequestJson, ValidateShardResponseJson, ValidateVersionKeyspaceRequestJson, ValidateVersionKeyspaceResponseJson, ValidateVersionShardRequestJson, ValidateVersionShardResponseJson, ValidateVSchemaRequestJson, ValidateVSchemaResponseJson, VDiffCreateRequestJson, VDiffCreateResponseJson, VDiffDeleteRequestJson, VDiffDeleteResponseJson, VDiffResumeRequestJson, VDiffResumeResponseJson, VDiffShowRequestJson, VDiffShowResponseJson, VDiffStopRequestJson, VDiffStopResponseJson, WorkflowDeleteRequestJson, WorkflowDeleteResponseJson, WorkflowMirrorTrafficRequestJson, WorkflowMirrorTrafficResponseJson, WorkflowStatusRequestJson, WorkflowStatusResponseJson, WorkflowSwitchTrafficRequestJson, WorkflowSwitchTrafficResponseJson, WorkflowUpdateRequestJson, WorkflowUpdateResponseJson } from "./vtctldata_pb";
import { AddCellInfoRequestSchema, AddCellInfoResponseSchema, AddCellsAliasRequestSchema, AddCellsAliasResponseSchema, ApplyKeyspaceRoutingRulesRequestSchema, ApplyKeyspaceRoutingRulesResponseSchema, ApplyRoutingRulesRequestSchema, ApplyRoutingRulesResponseSchema, ApplySchemaRequestSchema, ApplySchemaResponseSchema, ApplyShardRoutingRulesRequestSchema, ApplyShardRoutingRulesResponseSchema, ApplyVSchemaRequestSchema, ApplyVSchemaResponseSchema, BackupRequestSchema, BackupResponseSchema, BackupShardRequestSchema, CancelSchemaMigrationRequestSchema, CancelSchemaMigrationResponseSchema, ChangeTabletTagsRequestSchema, ChangeTabletTagsResponseSchema, ChangeTabletTypeRequestSchema, ChangeTabletTypeResponseSchema, CheckThrottlerRequestSchema, CheckThrottlerResponseSchema, CleanupSchemaMigrationRequestSchema, CleanupSchemaMigrationResponseSchema, CompleteSchemaMigrationRequestSchema, CompleteSchemaMigrationResponseSchema, ConcludeTransactionRequestSchema, ConcludeTransactionResponseSchema, CreateKeyspaceRequestSchema, CreateKeyspaceResponseSchema, CreateShardRequestSchema, CreateShardResponseSchema, DeleteCellInfoRequestSchema, DeleteCellInfoResponseSchema, DeleteCellsAliasRequestSchema, DeleteCellsAliasResponseSchema, DeleteKeyspaceRequestSchema, DeleteKeyspaceResponseSchema, DeleteShardsRequestSchema, DeleteShardsResponseSchema, DeleteSrvVSchemaRequestSchema, DeleteSrvVSchemaResponseSchema, DeleteTabletsRequestSchema, DeleteTabletsResponseSchema, EmergencyReparentShardRequestSchema, EmergencyReparentShardResponseSchema, ExecuteFetchAsAppRequestSchema, ExecuteFetchAsAppResponseSchema, ExecuteFetchAsDBARequestSchema, ExecuteFetchAsDBAResponseSchema, ExecuteHookRequestSchema, ExecuteHookResponseSchema, ExecuteMultiFetchAsDBARequestSchema, ExecuteMultiFetchAsDBAResponseSchema, ExecuteVtctlCommandRequestSchema, ExecuteVtctlCommandResponseSchema, FindAllShardsInKeyspaceRequestSchema, FindAllShardsInKeyspaceResponseSchema, ForceCutOverSchemaMigrationRequestSchema, ForceCutOverSchemaMigrationResponseSchema, GetBackupsRequestSchema, GetBackupsResponseSchema, GetCellInfoNamesRequestSchema, GetCellInfoNamesResponseSchema, GetCellInfoRequestSchema, GetCellInfoResponseSchema, GetCellsAliasesRequestSchema, GetCellsAliasesResponseSchema, GetFullStatusRequestSchema, GetFullStatusResponseSchema, GetKeyspaceRequestSchema, GetKeyspaceResponseSchema, GetKeyspaceRoutingRulesRequestSchema, GetKeyspaceRoutingRulesResponseSchema, GetKeyspacesRequestSchema, GetKeyspacesResponseSchema, GetMirrorRulesRequestSchema, GetMirrorRulesResponseSchema, GetPermissionsRequestSchema, GetPermissionsResponseSchema, GetRoutingRulesRequestSchema, GetRoutingRulesResponseSchema, GetSchemaMigrationsRequestSchema, GetSchemaMigrationsResponseSchema, GetSchemaRequestSchema, GetSchemaResponseSchema, GetShardReplicationRequestSchema, GetShardReplicationResponseSchema, GetShardRequestSchema, GetShardResponseSchema, GetShardRoutingRulesRequestSchema, GetShardRoutingRulesResponseSchema, GetSrvKeyspaceNamesRequestSchema, GetSrvKeyspaceNamesResponseSchema, GetSrvKeyspacesRequestSchema, GetSrvKeyspacesResponseSchema, GetSrvVSchemaRequestSchema, GetSrvVSchemaResponseSchema, GetSrvVSchemasRequestSchema, GetSrvVSchemasResponseSchema, GetTabletRequestSchema, GetTabletResponseSchema, GetTabletsRequestSchema, GetTabletsResponseSchema, GetThrottlerStatusRequestSchema, GetThrottlerStatusResponseSchema, GetTopologyPathRequestSchema, GetTopologyPathResponseSchema, GetUnresolvedTransactionsRequestSchema, GetUnresolvedTransactionsResponseSchema, GetVersionRequestSchema, GetVersionResponseSchema, GetVSchemaRequestSchema, GetVSchemaResponseSchema, GetWorkflowsRequestSchema, GetWorkflowsResponseSchema, InitShardPrimaryRequestSchema, InitShardPrimaryResponseSchema, LaunchSchemaMigrationRequestSchema, LaunchSchemaMigrationResponseSchema, LookupVindexCreateRequestSchema, LookupVindexCreateResponseSchema, LookupVindexExternalizeRequestSchema, LookupVindexExternalizeResponseSchema, MaterializeCreateRequestSchema, MaterializeCreateResponseSchema, MigrateCreateRequestSchema, MountListRequestSchema, MountListResponseSchema, MountRegisterRequestSchema, MountRegisterResponseSchema, MountShowRequestSchema, MountShowResponseSchema, MountUnregisterRequestSchema, MountUnregisterResponseSchema, MoveTablesCompleteRequestSchema, MoveTablesCompleteResponseSchema, MoveTablesCreateRequestSchema, PingTabletRequestSchema, PingTabletResponseSchema, PlannedReparentShardRequestSchema, PlannedReparentShardResponseSchema, RebuildKeyspaceGraphRequestSchema, RebuildKeyspaceGraphResponseSchema, RebuildVSchemaGraphRequestSchema, RebuildVSchemaGraphResponseSchema, RefreshStateByShardRequestSchema, RefreshStateByShardResponseSchema, RefreshStateRequestSchema, RefreshStateResponseSchema, ReloadSchemaKeyspaceRequestSchema, ReloadSchemaKeyspaceResponseSchema, ReloadSchemaRequestSchema, ReloadSchemaResponseSchema, ReloadSchemaShardRequestSchema, ReloadSchemaShardResponseSchema, RemoveBackupRequestSchema, RemoveBackupResponseSchema, RemoveKeyspaceCellRequestSchema, RemoveKeyspaceCellResponseSchema, RemoveShardCellRequestSchema, RemoveShardCellResponseSchema, ReparentTabletRequestSchema, ReparentTabletResponseSchema, ReshardCreateRequestSchema, RestoreFromBackupRequestSchema, RestoreFromBackupResponseSchema, RetrySchemaMigrationRequestSchema, RetrySchemaMigrationResponseSchema, RunHealthCheckRequestSchema, RunHealthCheckResponseSchema, SetKeyspaceDurabilityPolicyRequestSchema, SetKeyspaceDurabilityPolicyResponseSchema, SetShardIsPrimaryServingRequestSchema, SetShardIsPrimaryServingResponseSchema, SetShardTabletControlRequestSchema, SetShardTabletControlResponseSchema, SetWritableRequestSchema, SetWritableResponseSchema, ShardReplicationAddRequestSchema, ShardReplicationAddResponseSchema, ShardReplicationFixRequestSchema, ShardReplicationFixResponseSchema, ShardReplicationPositionsRequestSchema, ShardReplicationPositionsResponseSchema, ShardReplicationRemoveRequestSchema, ShardReplicationRemoveResponseSchema, SleepTabletRequestSchema, SleepTabletResponseSchema, SourceShardAddRequestSchema, SourceShardAddResponseSchema, SourceShardDeleteRequestSchema, SourceShardDeleteResponseSchema, StartReplicationRequestSchema, StartReplicationResponseSchema, StopReplicationRequestSchema, StopReplicationResponseSchema, TabletExternallyReparentedRequestSchema, TabletExternallyReparentedResponseSchema, UpdateCellInfoRequestSchema, UpdateCellInfoResponseSchema, UpdateCellsAliasRequestSchema, UpdateCellsAliasResponseSchema, UpdateThrottlerConfigRequestSchema, UpdateThrottlerConfigResponseSchema, ValidateKeyspaceRequestSchema, ValidateKeyspaceResponseSchema, ValidateRequestSchema, ValidateResponseSchema, ValidateSchemaKeyspaceRequestSchema, ValidateSchemaKeyspaceResponseSchema, ValidateShardRequestSchema, ValidateShardResponseSchema, ValidateVersionKeyspaceRequestSchema, ValidateVersionKeyspaceResponseSchema, ValidateVersionShardRequestSchema, ValidateVersionShardResponseSchema, ValidateVSchemaRequestSchema, ValidateVSchemaResponseSchema, VDiffCreateRequestSchema, VDiffCreateResponseSchema, VDiffDeleteRequestSchema, VDiffDeleteResponseSchema, VDiffResumeRequestSchema, VDiffResumeResponseSchema, VDiffShowRequestSchema, VDiffShowResponseSchema, VDiffStopRequestSchema, VDiffStopResponseSchema, WorkflowDeleteRequestSchema, WorkflowDeleteResponseSchema, WorkflowMirrorTrafficRequestSchema, WorkflowMirrorTrafficResponseSchema, WorkflowStatusRequestSchema, WorkflowStatusResponseSchema, WorkflowSwitchTrafficRequestSchema, WorkflowSwitchTrafficResponseSchema, WorkflowUpdateRequestSchema, WorkflowUpdateResponseSchema } from "./vtctldata_pb";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * Service Vtctl allows you to call vt commands through gRPC.
 *
 * @generated from service vtctlservice.Vtctl
 */
export class VtctlClient {
  #client: Client<typeof Vtctl>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(Vtctl, transport);
  }

  async *executeVtctlCommand(params: ExecuteVtctlCommandRequestJson, opts?: CallOptions): AsyncGenerator<ExecuteVtctlCommandResponseJson> {
    const stream = this.#client.executeVtctlCommand(fromJson(ExecuteVtctlCommandRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(ExecuteVtctlCommandResponseSchema, response);
    }
  }

}
/**
 * Service Vtctld exposes gRPC endpoints for each vt command.
 *
 * @generated from service vtctlservice.Vtctld
 */
export class VtctldClient {
  #client: Client<typeof Vtctld>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(Vtctld, transport);
  }

  async addCellInfo(params: AddCellInfoRequestJson, opts?: CallOptions): Promise<AddCellInfoResponseJson> {
    const response = await this.#client.addCellInfo(fromJson(AddCellInfoRequestSchema, params), opts);
    return toJson(AddCellInfoResponseSchema, response);
  }

  async addCellsAlias(params: AddCellsAliasRequestJson, opts?: CallOptions): Promise<AddCellsAliasResponseJson> {
    const response = await this.#client.addCellsAlias(fromJson(AddCellsAliasRequestSchema, params), opts);
    return toJson(AddCellsAliasResponseSchema, response);
  }

  async applyRoutingRules(params: ApplyRoutingRulesRequestJson, opts?: CallOptions): Promise<ApplyRoutingRulesResponseJson> {
    const response = await this.#client.applyRoutingRules(fromJson(ApplyRoutingRulesRequestSchema, params), opts);
    return toJson(ApplyRoutingRulesResponseSchema, response);
  }

  async applySchema(params: ApplySchemaRequestJson, opts?: CallOptions): Promise<ApplySchemaResponseJson> {
    const response = await this.#client.applySchema(fromJson(ApplySchemaRequestSchema, params), opts);
    return toJson(ApplySchemaResponseSchema, response);
  }

  async applyKeyspaceRoutingRules(params: ApplyKeyspaceRoutingRulesRequestJson, opts?: CallOptions): Promise<ApplyKeyspaceRoutingRulesResponseJson> {
    const response = await this.#client.applyKeyspaceRoutingRules(fromJson(ApplyKeyspaceRoutingRulesRequestSchema, params), opts);
    return toJson(ApplyKeyspaceRoutingRulesResponseSchema, response);
  }

  async applyShardRoutingRules(params: ApplyShardRoutingRulesRequestJson, opts?: CallOptions): Promise<ApplyShardRoutingRulesResponseJson> {
    const response = await this.#client.applyShardRoutingRules(fromJson(ApplyShardRoutingRulesRequestSchema, params), opts);
    return toJson(ApplyShardRoutingRulesResponseSchema, response);
  }

  async applyVSchema(params: ApplyVSchemaRequestJson, opts?: CallOptions): Promise<ApplyVSchemaResponseJson> {
    const response = await this.#client.applyVSchema(fromJson(ApplyVSchemaRequestSchema, params), opts);
    return toJson(ApplyVSchemaResponseSchema, response);
  }

  async *backup(params: BackupRequestJson, opts?: CallOptions): AsyncGenerator<BackupResponseJson> {
    const stream = this.#client.backup(fromJson(BackupRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(BackupResponseSchema, response);
    }
  }

  async *backupShard(params: BackupShardRequestJson, opts?: CallOptions): AsyncGenerator<BackupResponseJson> {
    const stream = this.#client.backupShard(fromJson(BackupShardRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(BackupResponseSchema, response);
    }
  }

  async cancelSchemaMigration(params: CancelSchemaMigrationRequestJson, opts?: CallOptions): Promise<CancelSchemaMigrationResponseJson> {
    const response = await this.#client.cancelSchemaMigration(fromJson(CancelSchemaMigrationRequestSchema, params), opts);
    return toJson(CancelSchemaMigrationResponseSchema, response);
  }

  async changeTabletTags(params: ChangeTabletTagsRequestJson, opts?: CallOptions): Promise<ChangeTabletTagsResponseJson> {
    const response = await this.#client.changeTabletTags(fromJson(ChangeTabletTagsRequestSchema, params), opts);
    return toJson(ChangeTabletTagsResponseSchema, response);
  }

  async changeTabletType(params: ChangeTabletTypeRequestJson, opts?: CallOptions): Promise<ChangeTabletTypeResponseJson> {
    const response = await this.#client.changeTabletType(fromJson(ChangeTabletTypeRequestSchema, params), opts);
    return toJson(ChangeTabletTypeResponseSchema, response);
  }

  async checkThrottler(params: CheckThrottlerRequestJson, opts?: CallOptions): Promise<CheckThrottlerResponseJson> {
    const response = await this.#client.checkThrottler(fromJson(CheckThrottlerRequestSchema, params), opts);
    return toJson(CheckThrottlerResponseSchema, response);
  }

  async cleanupSchemaMigration(params: CleanupSchemaMigrationRequestJson, opts?: CallOptions): Promise<CleanupSchemaMigrationResponseJson> {
    const response = await this.#client.cleanupSchemaMigration(fromJson(CleanupSchemaMigrationRequestSchema, params), opts);
    return toJson(CleanupSchemaMigrationResponseSchema, response);
  }

  async completeSchemaMigration(params: CompleteSchemaMigrationRequestJson, opts?: CallOptions): Promise<CompleteSchemaMigrationResponseJson> {
    const response = await this.#client.completeSchemaMigration(fromJson(CompleteSchemaMigrationRequestSchema, params), opts);
    return toJson(CompleteSchemaMigrationResponseSchema, response);
  }

  async concludeTransaction(params: ConcludeTransactionRequestJson, opts?: CallOptions): Promise<ConcludeTransactionResponseJson> {
    const response = await this.#client.concludeTransaction(fromJson(ConcludeTransactionRequestSchema, params), opts);
    return toJson(ConcludeTransactionResponseSchema, response);
  }

  async createKeyspace(params: CreateKeyspaceRequestJson, opts?: CallOptions): Promise<CreateKeyspaceResponseJson> {
    const response = await this.#client.createKeyspace(fromJson(CreateKeyspaceRequestSchema, params), opts);
    return toJson(CreateKeyspaceResponseSchema, response);
  }

  async createShard(params: CreateShardRequestJson, opts?: CallOptions): Promise<CreateShardResponseJson> {
    const response = await this.#client.createShard(fromJson(CreateShardRequestSchema, params), opts);
    return toJson(CreateShardResponseSchema, response);
  }

  async deleteCellInfo(params: DeleteCellInfoRequestJson, opts?: CallOptions): Promise<DeleteCellInfoResponseJson> {
    const response = await this.#client.deleteCellInfo(fromJson(DeleteCellInfoRequestSchema, params), opts);
    return toJson(DeleteCellInfoResponseSchema, response);
  }

  async deleteCellsAlias(params: DeleteCellsAliasRequestJson, opts?: CallOptions): Promise<DeleteCellsAliasResponseJson> {
    const response = await this.#client.deleteCellsAlias(fromJson(DeleteCellsAliasRequestSchema, params), opts);
    return toJson(DeleteCellsAliasResponseSchema, response);
  }

  async deleteKeyspace(params: DeleteKeyspaceRequestJson, opts?: CallOptions): Promise<DeleteKeyspaceResponseJson> {
    const response = await this.#client.deleteKeyspace(fromJson(DeleteKeyspaceRequestSchema, params), opts);
    return toJson(DeleteKeyspaceResponseSchema, response);
  }

  async deleteShards(params: DeleteShardsRequestJson, opts?: CallOptions): Promise<DeleteShardsResponseJson> {
    const response = await this.#client.deleteShards(fromJson(DeleteShardsRequestSchema, params), opts);
    return toJson(DeleteShardsResponseSchema, response);
  }

  async deleteSrvVSchema(params: DeleteSrvVSchemaRequestJson, opts?: CallOptions): Promise<DeleteSrvVSchemaResponseJson> {
    const response = await this.#client.deleteSrvVSchema(fromJson(DeleteSrvVSchemaRequestSchema, params), opts);
    return toJson(DeleteSrvVSchemaResponseSchema, response);
  }

  async deleteTablets(params: DeleteTabletsRequestJson, opts?: CallOptions): Promise<DeleteTabletsResponseJson> {
    const response = await this.#client.deleteTablets(fromJson(DeleteTabletsRequestSchema, params), opts);
    return toJson(DeleteTabletsResponseSchema, response);
  }

  async emergencyReparentShard(params: EmergencyReparentShardRequestJson, opts?: CallOptions): Promise<EmergencyReparentShardResponseJson> {
    const response = await this.#client.emergencyReparentShard(fromJson(EmergencyReparentShardRequestSchema, params), opts);
    return toJson(EmergencyReparentShardResponseSchema, response);
  }

  async executeFetchAsApp(params: ExecuteFetchAsAppRequestJson, opts?: CallOptions): Promise<ExecuteFetchAsAppResponseJson> {
    const response = await this.#client.executeFetchAsApp(fromJson(ExecuteFetchAsAppRequestSchema, params), opts);
    return toJson(ExecuteFetchAsAppResponseSchema, response);
  }

  async executeFetchAsDBA(params: ExecuteFetchAsDBARequestJson, opts?: CallOptions): Promise<ExecuteFetchAsDBAResponseJson> {
    const response = await this.#client.executeFetchAsDBA(fromJson(ExecuteFetchAsDBARequestSchema, params), opts);
    return toJson(ExecuteFetchAsDBAResponseSchema, response);
  }

  async executeHook(params: ExecuteHookRequestJson, opts?: CallOptions): Promise<ExecuteHookResponseJson> {
    const response = await this.#client.executeHook(fromJson(ExecuteHookRequestSchema, params), opts);
    return toJson(ExecuteHookResponseSchema, response);
  }

  async executeMultiFetchAsDBA(params: ExecuteMultiFetchAsDBARequestJson, opts?: CallOptions): Promise<ExecuteMultiFetchAsDBAResponseJson> {
    const response = await this.#client.executeMultiFetchAsDBA(fromJson(ExecuteMultiFetchAsDBARequestSchema, params), opts);
    return toJson(ExecuteMultiFetchAsDBAResponseSchema, response);
  }

  async findAllShardsInKeyspace(params: FindAllShardsInKeyspaceRequestJson, opts?: CallOptions): Promise<FindAllShardsInKeyspaceResponseJson> {
    const response = await this.#client.findAllShardsInKeyspace(fromJson(FindAllShardsInKeyspaceRequestSchema, params), opts);
    return toJson(FindAllShardsInKeyspaceResponseSchema, response);
  }

  async forceCutOverSchemaMigration(params: ForceCutOverSchemaMigrationRequestJson, opts?: CallOptions): Promise<ForceCutOverSchemaMigrationResponseJson> {
    const response = await this.#client.forceCutOverSchemaMigration(fromJson(ForceCutOverSchemaMigrationRequestSchema, params), opts);
    return toJson(ForceCutOverSchemaMigrationResponseSchema, response);
  }

  async getBackups(params: GetBackupsRequestJson, opts?: CallOptions): Promise<GetBackupsResponseJson> {
    const response = await this.#client.getBackups(fromJson(GetBackupsRequestSchema, params), opts);
    return toJson(GetBackupsResponseSchema, response);
  }

  async getCellInfo(params: GetCellInfoRequestJson, opts?: CallOptions): Promise<GetCellInfoResponseJson> {
    const response = await this.#client.getCellInfo(fromJson(GetCellInfoRequestSchema, params), opts);
    return toJson(GetCellInfoResponseSchema, response);
  }

  async getCellInfoNames(params: GetCellInfoNamesRequestJson, opts?: CallOptions): Promise<GetCellInfoNamesResponseJson> {
    const response = await this.#client.getCellInfoNames(fromJson(GetCellInfoNamesRequestSchema, params), opts);
    return toJson(GetCellInfoNamesResponseSchema, response);
  }

  async getCellsAliases(params: GetCellsAliasesRequestJson, opts?: CallOptions): Promise<GetCellsAliasesResponseJson> {
    const response = await this.#client.getCellsAliases(fromJson(GetCellsAliasesRequestSchema, params), opts);
    return toJson(GetCellsAliasesResponseSchema, response);
  }

  async getFullStatus(params: GetFullStatusRequestJson, opts?: CallOptions): Promise<GetFullStatusResponseJson> {
    const response = await this.#client.getFullStatus(fromJson(GetFullStatusRequestSchema, params), opts);
    return toJson(GetFullStatusResponseSchema, response);
  }

  async getKeyspace(params: GetKeyspaceRequestJson, opts?: CallOptions): Promise<GetKeyspaceResponseJson> {
    const response = await this.#client.getKeyspace(fromJson(GetKeyspaceRequestSchema, params), opts);
    return toJson(GetKeyspaceResponseSchema, response);
  }

  async getKeyspaces(params: GetKeyspacesRequestJson, opts?: CallOptions): Promise<GetKeyspacesResponseJson> {
    const response = await this.#client.getKeyspaces(fromJson(GetKeyspacesRequestSchema, params), opts);
    return toJson(GetKeyspacesResponseSchema, response);
  }

  async getKeyspaceRoutingRules(params: GetKeyspaceRoutingRulesRequestJson, opts?: CallOptions): Promise<GetKeyspaceRoutingRulesResponseJson> {
    const response = await this.#client.getKeyspaceRoutingRules(fromJson(GetKeyspaceRoutingRulesRequestSchema, params), opts);
    return toJson(GetKeyspaceRoutingRulesResponseSchema, response);
  }

  async getPermissions(params: GetPermissionsRequestJson, opts?: CallOptions): Promise<GetPermissionsResponseJson> {
    const response = await this.#client.getPermissions(fromJson(GetPermissionsRequestSchema, params), opts);
    return toJson(GetPermissionsResponseSchema, response);
  }

  async getRoutingRules(params: GetRoutingRulesRequestJson, opts?: CallOptions): Promise<GetRoutingRulesResponseJson> {
    const response = await this.#client.getRoutingRules(fromJson(GetRoutingRulesRequestSchema, params), opts);
    return toJson(GetRoutingRulesResponseSchema, response);
  }

  async getSchema(params: GetSchemaRequestJson, opts?: CallOptions): Promise<GetSchemaResponseJson> {
    const response = await this.#client.getSchema(fromJson(GetSchemaRequestSchema, params), opts);
    return toJson(GetSchemaResponseSchema, response);
  }

  async getSchemaMigrations(params: GetSchemaMigrationsRequestJson, opts?: CallOptions): Promise<GetSchemaMigrationsResponseJson> {
    const response = await this.#client.getSchemaMigrations(fromJson(GetSchemaMigrationsRequestSchema, params), opts);
    return toJson(GetSchemaMigrationsResponseSchema, response);
  }

  async getShardReplication(params: GetShardReplicationRequestJson, opts?: CallOptions): Promise<GetShardReplicationResponseJson> {
    const response = await this.#client.getShardReplication(fromJson(GetShardReplicationRequestSchema, params), opts);
    return toJson(GetShardReplicationResponseSchema, response);
  }

  async getShard(params: GetShardRequestJson, opts?: CallOptions): Promise<GetShardResponseJson> {
    const response = await this.#client.getShard(fromJson(GetShardRequestSchema, params), opts);
    return toJson(GetShardResponseSchema, response);
  }

  async getShardRoutingRules(params: GetShardRoutingRulesRequestJson, opts?: CallOptions): Promise<GetShardRoutingRulesResponseJson> {
    const response = await this.#client.getShardRoutingRules(fromJson(GetShardRoutingRulesRequestSchema, params), opts);
    return toJson(GetShardRoutingRulesResponseSchema, response);
  }

  async getSrvKeyspaceNames(params: GetSrvKeyspaceNamesRequestJson, opts?: CallOptions): Promise<GetSrvKeyspaceNamesResponseJson> {
    const response = await this.#client.getSrvKeyspaceNames(fromJson(GetSrvKeyspaceNamesRequestSchema, params), opts);
    return toJson(GetSrvKeyspaceNamesResponseSchema, response);
  }

  async getSrvKeyspaces(params: GetSrvKeyspacesRequestJson, opts?: CallOptions): Promise<GetSrvKeyspacesResponseJson> {
    const response = await this.#client.getSrvKeyspaces(fromJson(GetSrvKeyspacesRequestSchema, params), opts);
    return toJson(GetSrvKeyspacesResponseSchema, response);
  }

  async updateThrottlerConfig(params: UpdateThrottlerConfigRequestJson, opts?: CallOptions): Promise<UpdateThrottlerConfigResponseJson> {
    const response = await this.#client.updateThrottlerConfig(fromJson(UpdateThrottlerConfigRequestSchema, params), opts);
    return toJson(UpdateThrottlerConfigResponseSchema, response);
  }

  async getSrvVSchema(params: GetSrvVSchemaRequestJson, opts?: CallOptions): Promise<GetSrvVSchemaResponseJson> {
    const response = await this.#client.getSrvVSchema(fromJson(GetSrvVSchemaRequestSchema, params), opts);
    return toJson(GetSrvVSchemaResponseSchema, response);
  }

  async getSrvVSchemas(params: GetSrvVSchemasRequestJson, opts?: CallOptions): Promise<GetSrvVSchemasResponseJson> {
    const response = await this.#client.getSrvVSchemas(fromJson(GetSrvVSchemasRequestSchema, params), opts);
    return toJson(GetSrvVSchemasResponseSchema, response);
  }

  async getTablet(params: GetTabletRequestJson, opts?: CallOptions): Promise<GetTabletResponseJson> {
    const response = await this.#client.getTablet(fromJson(GetTabletRequestSchema, params), opts);
    return toJson(GetTabletResponseSchema, response);
  }

  async getTablets(params: GetTabletsRequestJson, opts?: CallOptions): Promise<GetTabletsResponseJson> {
    const response = await this.#client.getTablets(fromJson(GetTabletsRequestSchema, params), opts);
    return toJson(GetTabletsResponseSchema, response);
  }

  async getThrottlerStatus(params: GetThrottlerStatusRequestJson, opts?: CallOptions): Promise<GetThrottlerStatusResponseJson> {
    const response = await this.#client.getThrottlerStatus(fromJson(GetThrottlerStatusRequestSchema, params), opts);
    return toJson(GetThrottlerStatusResponseSchema, response);
  }

  async getTopologyPath(params: GetTopologyPathRequestJson, opts?: CallOptions): Promise<GetTopologyPathResponseJson> {
    const response = await this.#client.getTopologyPath(fromJson(GetTopologyPathRequestSchema, params), opts);
    return toJson(GetTopologyPathResponseSchema, response);
  }

  async getUnresolvedTransactions(params: GetUnresolvedTransactionsRequestJson, opts?: CallOptions): Promise<GetUnresolvedTransactionsResponseJson> {
    const response = await this.#client.getUnresolvedTransactions(fromJson(GetUnresolvedTransactionsRequestSchema, params), opts);
    return toJson(GetUnresolvedTransactionsResponseSchema, response);
  }

  async getVersion(params: GetVersionRequestJson, opts?: CallOptions): Promise<GetVersionResponseJson> {
    const response = await this.#client.getVersion(fromJson(GetVersionRequestSchema, params), opts);
    return toJson(GetVersionResponseSchema, response);
  }

  async getVSchema(params: GetVSchemaRequestJson, opts?: CallOptions): Promise<GetVSchemaResponseJson> {
    const response = await this.#client.getVSchema(fromJson(GetVSchemaRequestSchema, params), opts);
    return toJson(GetVSchemaResponseSchema, response);
  }

  async getWorkflows(params: GetWorkflowsRequestJson, opts?: CallOptions): Promise<GetWorkflowsResponseJson> {
    const response = await this.#client.getWorkflows(fromJson(GetWorkflowsRequestSchema, params), opts);
    return toJson(GetWorkflowsResponseSchema, response);
  }

  async initShardPrimary(params: InitShardPrimaryRequestJson, opts?: CallOptions): Promise<InitShardPrimaryResponseJson> {
    const response = await this.#client.initShardPrimary(fromJson(InitShardPrimaryRequestSchema, params), opts);
    return toJson(InitShardPrimaryResponseSchema, response);
  }

  async launchSchemaMigration(params: LaunchSchemaMigrationRequestJson, opts?: CallOptions): Promise<LaunchSchemaMigrationResponseJson> {
    const response = await this.#client.launchSchemaMigration(fromJson(LaunchSchemaMigrationRequestSchema, params), opts);
    return toJson(LaunchSchemaMigrationResponseSchema, response);
  }

  async lookupVindexCreate(params: LookupVindexCreateRequestJson, opts?: CallOptions): Promise<LookupVindexCreateResponseJson> {
    const response = await this.#client.lookupVindexCreate(fromJson(LookupVindexCreateRequestSchema, params), opts);
    return toJson(LookupVindexCreateResponseSchema, response);
  }

  async lookupVindexExternalize(params: LookupVindexExternalizeRequestJson, opts?: CallOptions): Promise<LookupVindexExternalizeResponseJson> {
    const response = await this.#client.lookupVindexExternalize(fromJson(LookupVindexExternalizeRequestSchema, params), opts);
    return toJson(LookupVindexExternalizeResponseSchema, response);
  }

  async materializeCreate(params: MaterializeCreateRequestJson, opts?: CallOptions): Promise<MaterializeCreateResponseJson> {
    const response = await this.#client.materializeCreate(fromJson(MaterializeCreateRequestSchema, params), opts);
    return toJson(MaterializeCreateResponseSchema, response);
  }

  async migrateCreate(params: MigrateCreateRequestJson, opts?: CallOptions): Promise<WorkflowStatusResponseJson> {
    const response = await this.#client.migrateCreate(fromJson(MigrateCreateRequestSchema, params), opts);
    return toJson(WorkflowStatusResponseSchema, response);
  }

  async mountRegister(params: MountRegisterRequestJson, opts?: CallOptions): Promise<MountRegisterResponseJson> {
    const response = await this.#client.mountRegister(fromJson(MountRegisterRequestSchema, params), opts);
    return toJson(MountRegisterResponseSchema, response);
  }

  async mountUnregister(params: MountUnregisterRequestJson, opts?: CallOptions): Promise<MountUnregisterResponseJson> {
    const response = await this.#client.mountUnregister(fromJson(MountUnregisterRequestSchema, params), opts);
    return toJson(MountUnregisterResponseSchema, response);
  }

  async mountShow(params: MountShowRequestJson, opts?: CallOptions): Promise<MountShowResponseJson> {
    const response = await this.#client.mountShow(fromJson(MountShowRequestSchema, params), opts);
    return toJson(MountShowResponseSchema, response);
  }

  async mountList(params: MountListRequestJson, opts?: CallOptions): Promise<MountListResponseJson> {
    const response = await this.#client.mountList(fromJson(MountListRequestSchema, params), opts);
    return toJson(MountListResponseSchema, response);
  }

  async moveTablesCreate(params: MoveTablesCreateRequestJson, opts?: CallOptions): Promise<WorkflowStatusResponseJson> {
    const response = await this.#client.moveTablesCreate(fromJson(MoveTablesCreateRequestSchema, params), opts);
    return toJson(WorkflowStatusResponseSchema, response);
  }

  async moveTablesComplete(params: MoveTablesCompleteRequestJson, opts?: CallOptions): Promise<MoveTablesCompleteResponseJson> {
    const response = await this.#client.moveTablesComplete(fromJson(MoveTablesCompleteRequestSchema, params), opts);
    return toJson(MoveTablesCompleteResponseSchema, response);
  }

  async pingTablet(params: PingTabletRequestJson, opts?: CallOptions): Promise<PingTabletResponseJson> {
    const response = await this.#client.pingTablet(fromJson(PingTabletRequestSchema, params), opts);
    return toJson(PingTabletResponseSchema, response);
  }

  async plannedReparentShard(params: PlannedReparentShardRequestJson, opts?: CallOptions): Promise<PlannedReparentShardResponseJson> {
    const response = await this.#client.plannedReparentShard(fromJson(PlannedReparentShardRequestSchema, params), opts);
    return toJson(PlannedReparentShardResponseSchema, response);
  }

  async rebuildKeyspaceGraph(params: RebuildKeyspaceGraphRequestJson, opts?: CallOptions): Promise<RebuildKeyspaceGraphResponseJson> {
    const response = await this.#client.rebuildKeyspaceGraph(fromJson(RebuildKeyspaceGraphRequestSchema, params), opts);
    return toJson(RebuildKeyspaceGraphResponseSchema, response);
  }

  async rebuildVSchemaGraph(params: RebuildVSchemaGraphRequestJson, opts?: CallOptions): Promise<RebuildVSchemaGraphResponseJson> {
    const response = await this.#client.rebuildVSchemaGraph(fromJson(RebuildVSchemaGraphRequestSchema, params), opts);
    return toJson(RebuildVSchemaGraphResponseSchema, response);
  }

  async refreshState(params: RefreshStateRequestJson, opts?: CallOptions): Promise<RefreshStateResponseJson> {
    const response = await this.#client.refreshState(fromJson(RefreshStateRequestSchema, params), opts);
    return toJson(RefreshStateResponseSchema, response);
  }

  async refreshStateByShard(params: RefreshStateByShardRequestJson, opts?: CallOptions): Promise<RefreshStateByShardResponseJson> {
    const response = await this.#client.refreshStateByShard(fromJson(RefreshStateByShardRequestSchema, params), opts);
    return toJson(RefreshStateByShardResponseSchema, response);
  }

  async reloadSchema(params: ReloadSchemaRequestJson, opts?: CallOptions): Promise<ReloadSchemaResponseJson> {
    const response = await this.#client.reloadSchema(fromJson(ReloadSchemaRequestSchema, params), opts);
    return toJson(ReloadSchemaResponseSchema, response);
  }

  async reloadSchemaKeyspace(params: ReloadSchemaKeyspaceRequestJson, opts?: CallOptions): Promise<ReloadSchemaKeyspaceResponseJson> {
    const response = await this.#client.reloadSchemaKeyspace(fromJson(ReloadSchemaKeyspaceRequestSchema, params), opts);
    return toJson(ReloadSchemaKeyspaceResponseSchema, response);
  }

  async reloadSchemaShard(params: ReloadSchemaShardRequestJson, opts?: CallOptions): Promise<ReloadSchemaShardResponseJson> {
    const response = await this.#client.reloadSchemaShard(fromJson(ReloadSchemaShardRequestSchema, params), opts);
    return toJson(ReloadSchemaShardResponseSchema, response);
  }

  async removeBackup(params: RemoveBackupRequestJson, opts?: CallOptions): Promise<RemoveBackupResponseJson> {
    const response = await this.#client.removeBackup(fromJson(RemoveBackupRequestSchema, params), opts);
    return toJson(RemoveBackupResponseSchema, response);
  }

  async removeKeyspaceCell(params: RemoveKeyspaceCellRequestJson, opts?: CallOptions): Promise<RemoveKeyspaceCellResponseJson> {
    const response = await this.#client.removeKeyspaceCell(fromJson(RemoveKeyspaceCellRequestSchema, params), opts);
    return toJson(RemoveKeyspaceCellResponseSchema, response);
  }

  async removeShardCell(params: RemoveShardCellRequestJson, opts?: CallOptions): Promise<RemoveShardCellResponseJson> {
    const response = await this.#client.removeShardCell(fromJson(RemoveShardCellRequestSchema, params), opts);
    return toJson(RemoveShardCellResponseSchema, response);
  }

  async reparentTablet(params: ReparentTabletRequestJson, opts?: CallOptions): Promise<ReparentTabletResponseJson> {
    const response = await this.#client.reparentTablet(fromJson(ReparentTabletRequestSchema, params), opts);
    return toJson(ReparentTabletResponseSchema, response);
  }

  async reshardCreate(params: ReshardCreateRequestJson, opts?: CallOptions): Promise<WorkflowStatusResponseJson> {
    const response = await this.#client.reshardCreate(fromJson(ReshardCreateRequestSchema, params), opts);
    return toJson(WorkflowStatusResponseSchema, response);
  }

  async *restoreFromBackup(params: RestoreFromBackupRequestJson, opts?: CallOptions): AsyncGenerator<RestoreFromBackupResponseJson> {
    const stream = this.#client.restoreFromBackup(fromJson(RestoreFromBackupRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(RestoreFromBackupResponseSchema, response);
    }
  }

  async retrySchemaMigration(params: RetrySchemaMigrationRequestJson, opts?: CallOptions): Promise<RetrySchemaMigrationResponseJson> {
    const response = await this.#client.retrySchemaMigration(fromJson(RetrySchemaMigrationRequestSchema, params), opts);
    return toJson(RetrySchemaMigrationResponseSchema, response);
  }

  async runHealthCheck(params: RunHealthCheckRequestJson, opts?: CallOptions): Promise<RunHealthCheckResponseJson> {
    const response = await this.#client.runHealthCheck(fromJson(RunHealthCheckRequestSchema, params), opts);
    return toJson(RunHealthCheckResponseSchema, response);
  }

  async setKeyspaceDurabilityPolicy(params: SetKeyspaceDurabilityPolicyRequestJson, opts?: CallOptions): Promise<SetKeyspaceDurabilityPolicyResponseJson> {
    const response = await this.#client.setKeyspaceDurabilityPolicy(fromJson(SetKeyspaceDurabilityPolicyRequestSchema, params), opts);
    return toJson(SetKeyspaceDurabilityPolicyResponseSchema, response);
  }

  async setShardIsPrimaryServing(params: SetShardIsPrimaryServingRequestJson, opts?: CallOptions): Promise<SetShardIsPrimaryServingResponseJson> {
    const response = await this.#client.setShardIsPrimaryServing(fromJson(SetShardIsPrimaryServingRequestSchema, params), opts);
    return toJson(SetShardIsPrimaryServingResponseSchema, response);
  }

  async setShardTabletControl(params: SetShardTabletControlRequestJson, opts?: CallOptions): Promise<SetShardTabletControlResponseJson> {
    const response = await this.#client.setShardTabletControl(fromJson(SetShardTabletControlRequestSchema, params), opts);
    return toJson(SetShardTabletControlResponseSchema, response);
  }

  async setWritable(params: SetWritableRequestJson, opts?: CallOptions): Promise<SetWritableResponseJson> {
    const response = await this.#client.setWritable(fromJson(SetWritableRequestSchema, params), opts);
    return toJson(SetWritableResponseSchema, response);
  }

  async shardReplicationAdd(params: ShardReplicationAddRequestJson, opts?: CallOptions): Promise<ShardReplicationAddResponseJson> {
    const response = await this.#client.shardReplicationAdd(fromJson(ShardReplicationAddRequestSchema, params), opts);
    return toJson(ShardReplicationAddResponseSchema, response);
  }

  async shardReplicationFix(params: ShardReplicationFixRequestJson, opts?: CallOptions): Promise<ShardReplicationFixResponseJson> {
    const response = await this.#client.shardReplicationFix(fromJson(ShardReplicationFixRequestSchema, params), opts);
    return toJson(ShardReplicationFixResponseSchema, response);
  }

  async shardReplicationPositions(params: ShardReplicationPositionsRequestJson, opts?: CallOptions): Promise<ShardReplicationPositionsResponseJson> {
    const response = await this.#client.shardReplicationPositions(fromJson(ShardReplicationPositionsRequestSchema, params), opts);
    return toJson(ShardReplicationPositionsResponseSchema, response);
  }

  async shardReplicationRemove(params: ShardReplicationRemoveRequestJson, opts?: CallOptions): Promise<ShardReplicationRemoveResponseJson> {
    const response = await this.#client.shardReplicationRemove(fromJson(ShardReplicationRemoveRequestSchema, params), opts);
    return toJson(ShardReplicationRemoveResponseSchema, response);
  }

  async sleepTablet(params: SleepTabletRequestJson, opts?: CallOptions): Promise<SleepTabletResponseJson> {
    const response = await this.#client.sleepTablet(fromJson(SleepTabletRequestSchema, params), opts);
    return toJson(SleepTabletResponseSchema, response);
  }

  async sourceShardAdd(params: SourceShardAddRequestJson, opts?: CallOptions): Promise<SourceShardAddResponseJson> {
    const response = await this.#client.sourceShardAdd(fromJson(SourceShardAddRequestSchema, params), opts);
    return toJson(SourceShardAddResponseSchema, response);
  }

  async sourceShardDelete(params: SourceShardDeleteRequestJson, opts?: CallOptions): Promise<SourceShardDeleteResponseJson> {
    const response = await this.#client.sourceShardDelete(fromJson(SourceShardDeleteRequestSchema, params), opts);
    return toJson(SourceShardDeleteResponseSchema, response);
  }

  async startReplication(params: StartReplicationRequestJson, opts?: CallOptions): Promise<StartReplicationResponseJson> {
    const response = await this.#client.startReplication(fromJson(StartReplicationRequestSchema, params), opts);
    return toJson(StartReplicationResponseSchema, response);
  }

  async stopReplication(params: StopReplicationRequestJson, opts?: CallOptions): Promise<StopReplicationResponseJson> {
    const response = await this.#client.stopReplication(fromJson(StopReplicationRequestSchema, params), opts);
    return toJson(StopReplicationResponseSchema, response);
  }

  async tabletExternallyReparented(params: TabletExternallyReparentedRequestJson, opts?: CallOptions): Promise<TabletExternallyReparentedResponseJson> {
    const response = await this.#client.tabletExternallyReparented(fromJson(TabletExternallyReparentedRequestSchema, params), opts);
    return toJson(TabletExternallyReparentedResponseSchema, response);
  }

  async updateCellInfo(params: UpdateCellInfoRequestJson, opts?: CallOptions): Promise<UpdateCellInfoResponseJson> {
    const response = await this.#client.updateCellInfo(fromJson(UpdateCellInfoRequestSchema, params), opts);
    return toJson(UpdateCellInfoResponseSchema, response);
  }

  async updateCellsAlias(params: UpdateCellsAliasRequestJson, opts?: CallOptions): Promise<UpdateCellsAliasResponseJson> {
    const response = await this.#client.updateCellsAlias(fromJson(UpdateCellsAliasRequestSchema, params), opts);
    return toJson(UpdateCellsAliasResponseSchema, response);
  }

  async validate(params: ValidateRequestJson, opts?: CallOptions): Promise<ValidateResponseJson> {
    const response = await this.#client.validate(fromJson(ValidateRequestSchema, params), opts);
    return toJson(ValidateResponseSchema, response);
  }

  async validateKeyspace(params: ValidateKeyspaceRequestJson, opts?: CallOptions): Promise<ValidateKeyspaceResponseJson> {
    const response = await this.#client.validateKeyspace(fromJson(ValidateKeyspaceRequestSchema, params), opts);
    return toJson(ValidateKeyspaceResponseSchema, response);
  }

  async validateSchemaKeyspace(params: ValidateSchemaKeyspaceRequestJson, opts?: CallOptions): Promise<ValidateSchemaKeyspaceResponseJson> {
    const response = await this.#client.validateSchemaKeyspace(fromJson(ValidateSchemaKeyspaceRequestSchema, params), opts);
    return toJson(ValidateSchemaKeyspaceResponseSchema, response);
  }

  async validateShard(params: ValidateShardRequestJson, opts?: CallOptions): Promise<ValidateShardResponseJson> {
    const response = await this.#client.validateShard(fromJson(ValidateShardRequestSchema, params), opts);
    return toJson(ValidateShardResponseSchema, response);
  }

  async validateVersionKeyspace(params: ValidateVersionKeyspaceRequestJson, opts?: CallOptions): Promise<ValidateVersionKeyspaceResponseJson> {
    const response = await this.#client.validateVersionKeyspace(fromJson(ValidateVersionKeyspaceRequestSchema, params), opts);
    return toJson(ValidateVersionKeyspaceResponseSchema, response);
  }

  async validateVersionShard(params: ValidateVersionShardRequestJson, opts?: CallOptions): Promise<ValidateVersionShardResponseJson> {
    const response = await this.#client.validateVersionShard(fromJson(ValidateVersionShardRequestSchema, params), opts);
    return toJson(ValidateVersionShardResponseSchema, response);
  }

  async validateVSchema(params: ValidateVSchemaRequestJson, opts?: CallOptions): Promise<ValidateVSchemaResponseJson> {
    const response = await this.#client.validateVSchema(fromJson(ValidateVSchemaRequestSchema, params), opts);
    return toJson(ValidateVSchemaResponseSchema, response);
  }

  async vDiffCreate(params: VDiffCreateRequestJson, opts?: CallOptions): Promise<VDiffCreateResponseJson> {
    const response = await this.#client.vDiffCreate(fromJson(VDiffCreateRequestSchema, params), opts);
    return toJson(VDiffCreateResponseSchema, response);
  }

  async vDiffDelete(params: VDiffDeleteRequestJson, opts?: CallOptions): Promise<VDiffDeleteResponseJson> {
    const response = await this.#client.vDiffDelete(fromJson(VDiffDeleteRequestSchema, params), opts);
    return toJson(VDiffDeleteResponseSchema, response);
  }

  async vDiffResume(params: VDiffResumeRequestJson, opts?: CallOptions): Promise<VDiffResumeResponseJson> {
    const response = await this.#client.vDiffResume(fromJson(VDiffResumeRequestSchema, params), opts);
    return toJson(VDiffResumeResponseSchema, response);
  }

  async vDiffShow(params: VDiffShowRequestJson, opts?: CallOptions): Promise<VDiffShowResponseJson> {
    const response = await this.#client.vDiffShow(fromJson(VDiffShowRequestSchema, params), opts);
    return toJson(VDiffShowResponseSchema, response);
  }

  async vDiffStop(params: VDiffStopRequestJson, opts?: CallOptions): Promise<VDiffStopResponseJson> {
    const response = await this.#client.vDiffStop(fromJson(VDiffStopRequestSchema, params), opts);
    return toJson(VDiffStopResponseSchema, response);
  }

  async workflowDelete(params: WorkflowDeleteRequestJson, opts?: CallOptions): Promise<WorkflowDeleteResponseJson> {
    const response = await this.#client.workflowDelete(fromJson(WorkflowDeleteRequestSchema, params), opts);
    return toJson(WorkflowDeleteResponseSchema, response);
  }

  async workflowStatus(params: WorkflowStatusRequestJson, opts?: CallOptions): Promise<WorkflowStatusResponseJson> {
    const response = await this.#client.workflowStatus(fromJson(WorkflowStatusRequestSchema, params), opts);
    return toJson(WorkflowStatusResponseSchema, response);
  }

  async workflowSwitchTraffic(params: WorkflowSwitchTrafficRequestJson, opts?: CallOptions): Promise<WorkflowSwitchTrafficResponseJson> {
    const response = await this.#client.workflowSwitchTraffic(fromJson(WorkflowSwitchTrafficRequestSchema, params), opts);
    return toJson(WorkflowSwitchTrafficResponseSchema, response);
  }

  async workflowUpdate(params: WorkflowUpdateRequestJson, opts?: CallOptions): Promise<WorkflowUpdateResponseJson> {
    const response = await this.#client.workflowUpdate(fromJson(WorkflowUpdateRequestSchema, params), opts);
    return toJson(WorkflowUpdateResponseSchema, response);
  }

  async getMirrorRules(params: GetMirrorRulesRequestJson, opts?: CallOptions): Promise<GetMirrorRulesResponseJson> {
    const response = await this.#client.getMirrorRules(fromJson(GetMirrorRulesRequestSchema, params), opts);
    return toJson(GetMirrorRulesResponseSchema, response);
  }

  async workflowMirrorTraffic(params: WorkflowMirrorTrafficRequestJson, opts?: CallOptions): Promise<WorkflowMirrorTrafficResponseJson> {
    const response = await this.#client.workflowMirrorTraffic(fromJson(WorkflowMirrorTrafficRequestSchema, params), opts);
    return toJson(WorkflowMirrorTrafficResponseSchema, response);
  }

}
