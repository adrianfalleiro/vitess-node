//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service definition for making management API
// calls to mysqlctld.

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file mysqlctl.proto (package mysqlctl, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import type { ApplyBinlogFileRequestJson, ApplyBinlogFileResponseJson, HostMetricsRequestJson, HostMetricsResponseJson, ReadBinlogFilesTimestampsRequestJson, ReadBinlogFilesTimestampsResponseJson, RefreshConfigRequestJson, RefreshConfigResponseJson, ReinitConfigRequestJson, ReinitConfigResponseJson, RunMysqlUpgradeRequestJson, RunMysqlUpgradeResponseJson, ShutdownRequestJson, ShutdownResponseJson, StartRequestJson, StartResponseJson, VersionStringRequestJson, VersionStringResponseJson } from "./mysqlctl_pb";
import { ApplyBinlogFileRequestSchema, ApplyBinlogFileResponseSchema, HostMetricsRequestSchema, HostMetricsResponseSchema, MysqlCtl, ReadBinlogFilesTimestampsRequestSchema, ReadBinlogFilesTimestampsResponseSchema, RefreshConfigRequestSchema, RefreshConfigResponseSchema, ReinitConfigRequestSchema, ReinitConfigResponseSchema, RunMysqlUpgradeRequestSchema, RunMysqlUpgradeResponseSchema, ShutdownRequestSchema, ShutdownResponseSchema, StartRequestSchema, StartResponseSchema, VersionStringRequestSchema, VersionStringResponseSchema } from "./mysqlctl_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * MysqlCtl is the service definition
 *
 * @generated from service mysqlctl.MysqlCtl
 */
export class MysqlCtlClient {
  #client: Client<typeof MysqlCtl>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(MysqlCtl, transport);
  }

  async start(params: StartRequestJson, opts?: CallOptions): Promise<StartResponseJson> {
    const response = await this.#client.start(fromJson(StartRequestSchema, params), opts);
    return toJson(StartResponseSchema, response);
  }

  async shutdown(params: ShutdownRequestJson, opts?: CallOptions): Promise<ShutdownResponseJson> {
    const response = await this.#client.shutdown(fromJson(ShutdownRequestSchema, params), opts);
    return toJson(ShutdownResponseSchema, response);
  }

  async runMysqlUpgrade(params: RunMysqlUpgradeRequestJson, opts?: CallOptions): Promise<RunMysqlUpgradeResponseJson> {
    const response = await this.#client.runMysqlUpgrade(fromJson(RunMysqlUpgradeRequestSchema, params), opts);
    return toJson(RunMysqlUpgradeResponseSchema, response);
  }

  async applyBinlogFile(params: ApplyBinlogFileRequestJson, opts?: CallOptions): Promise<ApplyBinlogFileResponseJson> {
    const response = await this.#client.applyBinlogFile(fromJson(ApplyBinlogFileRequestSchema, params), opts);
    return toJson(ApplyBinlogFileResponseSchema, response);
  }

  async readBinlogFilesTimestamps(params: ReadBinlogFilesTimestampsRequestJson, opts?: CallOptions): Promise<ReadBinlogFilesTimestampsResponseJson> {
    const response = await this.#client.readBinlogFilesTimestamps(fromJson(ReadBinlogFilesTimestampsRequestSchema, params), opts);
    return toJson(ReadBinlogFilesTimestampsResponseSchema, response);
  }

  async reinitConfig(params: ReinitConfigRequestJson, opts?: CallOptions): Promise<ReinitConfigResponseJson> {
    const response = await this.#client.reinitConfig(fromJson(ReinitConfigRequestSchema, params), opts);
    return toJson(ReinitConfigResponseSchema, response);
  }

  async refreshConfig(params: RefreshConfigRequestJson, opts?: CallOptions): Promise<RefreshConfigResponseJson> {
    const response = await this.#client.refreshConfig(fromJson(RefreshConfigRequestSchema, params), opts);
    return toJson(RefreshConfigResponseSchema, response);
  }

  async versionString(params: VersionStringRequestJson, opts?: CallOptions): Promise<VersionStringResponseJson> {
    const response = await this.#client.versionString(fromJson(VersionStringRequestSchema, params), opts);
    return toJson(VersionStringResponseSchema, response);
  }

  async hostMetrics(params: HostMetricsRequestJson, opts?: CallOptions): Promise<HostMetricsResponseJson> {
    const response = await this.#client.hostMetrics(fromJson(HostMetricsRequestSchema, params), opts);
    return toJson(HostMetricsResponseSchema, response);
  }

}
