//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service definition for making management API
// calls to VtTablet.

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file tabletmanagerservice.proto (package tabletmanagerservice, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import { TabletManager } from "./tabletmanagerservice_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import type { ApplySchemaRequestJson, ApplySchemaResponseJson, BackupRequestJson, BackupResponseJson, ChangeTagsRequestJson, ChangeTagsResponseJson, ChangeTypeRequestJson, ChangeTypeResponseJson, CheckThrottlerRequestJson, CheckThrottlerResponseJson, ConcludeTransactionRequestJson, ConcludeTransactionResponseJson, CreateVReplicationWorkflowRequestJson, CreateVReplicationWorkflowResponseJson, DeleteVReplicationWorkflowRequestJson, DeleteVReplicationWorkflowResponseJson, DemotePrimaryRequestJson, DemotePrimaryResponseJson, ExecuteFetchAsAllPrivsRequestJson, ExecuteFetchAsAllPrivsResponseJson, ExecuteFetchAsAppRequestJson, ExecuteFetchAsAppResponseJson, ExecuteFetchAsDbaRequestJson, ExecuteFetchAsDbaResponseJson, ExecuteHookRequestJson, ExecuteHookResponseJson, ExecuteMultiFetchAsDbaRequestJson, ExecuteMultiFetchAsDbaResponseJson, ExecuteQueryRequestJson, ExecuteQueryResponseJson, FullStatusRequestJson, FullStatusResponseJson, GetGlobalStatusVarsRequestJson, GetGlobalStatusVarsResponseJson, GetPermissionsRequestJson, GetPermissionsResponseJson, GetReplicasRequestJson, GetReplicasResponseJson, GetSchemaRequestJson, GetSchemaResponseJson, GetThrottlerStatusRequestJson, GetThrottlerStatusResponseJson, GetUnresolvedTransactionsRequestJson, GetUnresolvedTransactionsResponseJson, HasVReplicationWorkflowsRequestJson, HasVReplicationWorkflowsResponseJson, InitPrimaryRequestJson, InitPrimaryResponseJson, InitReplicaRequestJson, InitReplicaResponseJson, LockTablesRequestJson, LockTablesResponseJson, MysqlHostMetricsRequestJson, MysqlHostMetricsResponseJson, PingRequestJson, PingResponseJson, PopulateReparentJournalRequestJson, PopulateReparentJournalResponseJson, PreflightSchemaRequestJson, PreflightSchemaResponseJson, PrimaryPositionRequestJson, PrimaryPositionResponseJson, PrimaryStatusRequestJson, PrimaryStatusResponseJson, PromoteReplicaRequestJson, PromoteReplicaResponseJson, ReadReparentJournalInfoRequestJson, ReadReparentJournalInfoResponseJson, ReadTransactionRequestJson, ReadTransactionResponseJson, ReadVReplicationWorkflowRequestJson, ReadVReplicationWorkflowResponseJson, ReadVReplicationWorkflowsRequestJson, ReadVReplicationWorkflowsResponseJson, RefreshStateRequestJson, RefreshStateResponseJson, ReloadSchemaRequestJson, ReloadSchemaResponseJson, ReplicationStatusRequestJson, ReplicationStatusResponseJson, ReplicaWasPromotedRequestJson, ReplicaWasPromotedResponseJson, ReplicaWasRestartedRequestJson, ReplicaWasRestartedResponseJson, ResetReplicationParametersRequestJson, ResetReplicationParametersResponseJson, ResetReplicationRequestJson, ResetReplicationResponseJson, ResetSequencesRequestJson, ResetSequencesResponseJson, RestoreFromBackupRequestJson, RestoreFromBackupResponseJson, RunHealthCheckRequestJson, RunHealthCheckResponseJson, SetReadOnlyRequestJson, SetReadOnlyResponseJson, SetReadWriteRequestJson, SetReadWriteResponseJson, SetReplicationSourceRequestJson, SetReplicationSourceResponseJson, SleepRequestJson, SleepResponseJson, StartReplicationRequestJson, StartReplicationResponseJson, StartReplicationUntilAfterRequestJson, StartReplicationUntilAfterResponseJson, StopReplicationAndGetStatusRequestJson, StopReplicationAndGetStatusResponseJson, StopReplicationMinimumRequestJson, StopReplicationMinimumResponseJson, StopReplicationRequestJson, StopReplicationResponseJson, UndoDemotePrimaryRequestJson, UndoDemotePrimaryResponseJson, UnlockTablesRequestJson, UnlockTablesResponseJson, UpdateVReplicationWorkflowRequestJson, UpdateVReplicationWorkflowResponseJson, UpdateVReplicationWorkflowsRequestJson, UpdateVReplicationWorkflowsResponseJson, ValidateVReplicationPermissionsRequestJson, ValidateVReplicationPermissionsResponseJson, VDiffRequestJson, VDiffResponseJson, VReplicationExecRequestJson, VReplicationExecResponseJson, VReplicationWaitForPosRequestJson, VReplicationWaitForPosResponseJson, WaitForPositionRequestJson, WaitForPositionResponseJson } from "./tabletmanagerdata_pb";
import { ApplySchemaRequestSchema, ApplySchemaResponseSchema, BackupRequestSchema, BackupResponseSchema, ChangeTagsRequestSchema, ChangeTagsResponseSchema, ChangeTypeRequestSchema, ChangeTypeResponseSchema, CheckThrottlerRequestSchema, CheckThrottlerResponseSchema, ConcludeTransactionRequestSchema, ConcludeTransactionResponseSchema, CreateVReplicationWorkflowRequestSchema, CreateVReplicationWorkflowResponseSchema, DeleteVReplicationWorkflowRequestSchema, DeleteVReplicationWorkflowResponseSchema, DemotePrimaryRequestSchema, DemotePrimaryResponseSchema, ExecuteFetchAsAllPrivsRequestSchema, ExecuteFetchAsAllPrivsResponseSchema, ExecuteFetchAsAppRequestSchema, ExecuteFetchAsAppResponseSchema, ExecuteFetchAsDbaRequestSchema, ExecuteFetchAsDbaResponseSchema, ExecuteHookRequestSchema, ExecuteHookResponseSchema, ExecuteMultiFetchAsDbaRequestSchema, ExecuteMultiFetchAsDbaResponseSchema, ExecuteQueryRequestSchema, ExecuteQueryResponseSchema, FullStatusRequestSchema, FullStatusResponseSchema, GetGlobalStatusVarsRequestSchema, GetGlobalStatusVarsResponseSchema, GetPermissionsRequestSchema, GetPermissionsResponseSchema, GetReplicasRequestSchema, GetReplicasResponseSchema, GetSchemaRequestSchema, GetSchemaResponseSchema, GetThrottlerStatusRequestSchema, GetThrottlerStatusResponseSchema, GetUnresolvedTransactionsRequestSchema, GetUnresolvedTransactionsResponseSchema, HasVReplicationWorkflowsRequestSchema, HasVReplicationWorkflowsResponseSchema, InitPrimaryRequestSchema, InitPrimaryResponseSchema, InitReplicaRequestSchema, InitReplicaResponseSchema, LockTablesRequestSchema, LockTablesResponseSchema, MysqlHostMetricsRequestSchema, MysqlHostMetricsResponseSchema, PingRequestSchema, PingResponseSchema, PopulateReparentJournalRequestSchema, PopulateReparentJournalResponseSchema, PreflightSchemaRequestSchema, PreflightSchemaResponseSchema, PrimaryPositionRequestSchema, PrimaryPositionResponseSchema, PrimaryStatusRequestSchema, PrimaryStatusResponseSchema, PromoteReplicaRequestSchema, PromoteReplicaResponseSchema, ReadReparentJournalInfoRequestSchema, ReadReparentJournalInfoResponseSchema, ReadTransactionRequestSchema, ReadTransactionResponseSchema, ReadVReplicationWorkflowRequestSchema, ReadVReplicationWorkflowResponseSchema, ReadVReplicationWorkflowsRequestSchema, ReadVReplicationWorkflowsResponseSchema, RefreshStateRequestSchema, RefreshStateResponseSchema, ReloadSchemaRequestSchema, ReloadSchemaResponseSchema, ReplicationStatusRequestSchema, ReplicationStatusResponseSchema, ReplicaWasPromotedRequestSchema, ReplicaWasPromotedResponseSchema, ReplicaWasRestartedRequestSchema, ReplicaWasRestartedResponseSchema, ResetReplicationParametersRequestSchema, ResetReplicationParametersResponseSchema, ResetReplicationRequestSchema, ResetReplicationResponseSchema, ResetSequencesRequestSchema, ResetSequencesResponseSchema, RestoreFromBackupRequestSchema, RestoreFromBackupResponseSchema, RunHealthCheckRequestSchema, RunHealthCheckResponseSchema, SetReadOnlyRequestSchema, SetReadOnlyResponseSchema, SetReadWriteRequestSchema, SetReadWriteResponseSchema, SetReplicationSourceRequestSchema, SetReplicationSourceResponseSchema, SleepRequestSchema, SleepResponseSchema, StartReplicationRequestSchema, StartReplicationResponseSchema, StartReplicationUntilAfterRequestSchema, StartReplicationUntilAfterResponseSchema, StopReplicationAndGetStatusRequestSchema, StopReplicationAndGetStatusResponseSchema, StopReplicationMinimumRequestSchema, StopReplicationMinimumResponseSchema, StopReplicationRequestSchema, StopReplicationResponseSchema, UndoDemotePrimaryRequestSchema, UndoDemotePrimaryResponseSchema, UnlockTablesRequestSchema, UnlockTablesResponseSchema, UpdateVReplicationWorkflowRequestSchema, UpdateVReplicationWorkflowResponseSchema, UpdateVReplicationWorkflowsRequestSchema, UpdateVReplicationWorkflowsResponseSchema, ValidateVReplicationPermissionsRequestSchema, ValidateVReplicationPermissionsResponseSchema, VDiffRequestSchema, VDiffResponseSchema, VReplicationExecRequestSchema, VReplicationExecResponseSchema, VReplicationWaitForPosRequestSchema, VReplicationWaitForPosResponseSchema, WaitForPositionRequestSchema, WaitForPositionResponseSchema } from "./tabletmanagerdata_pb";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * TabletManager is a service definition for tabletmanagerdata.TabletManager.
 *
 *
 * Various read-only methods
 *
 *
 * @generated from service tabletmanagerservice.TabletManager
 */
export class TabletManagerClient {
  #client: Client<typeof TabletManager>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(TabletManager, transport);
  }

  async ping(params: PingRequestJson, opts?: CallOptions): Promise<PingResponseJson> {
    const response = await this.#client.ping(fromJson(PingRequestSchema, params), opts);
    return toJson(PingResponseSchema, response);
  }

  async sleep(params: SleepRequestJson, opts?: CallOptions): Promise<SleepResponseJson> {
    const response = await this.#client.sleep(fromJson(SleepRequestSchema, params), opts);
    return toJson(SleepResponseSchema, response);
  }

  async executeHook(params: ExecuteHookRequestJson, opts?: CallOptions): Promise<ExecuteHookResponseJson> {
    const response = await this.#client.executeHook(fromJson(ExecuteHookRequestSchema, params), opts);
    return toJson(ExecuteHookResponseSchema, response);
  }

  async getSchema(params: GetSchemaRequestJson, opts?: CallOptions): Promise<GetSchemaResponseJson> {
    const response = await this.#client.getSchema(fromJson(GetSchemaRequestSchema, params), opts);
    return toJson(GetSchemaResponseSchema, response);
  }

  async getPermissions(params: GetPermissionsRequestJson, opts?: CallOptions): Promise<GetPermissionsResponseJson> {
    const response = await this.#client.getPermissions(fromJson(GetPermissionsRequestSchema, params), opts);
    return toJson(GetPermissionsResponseSchema, response);
  }

  async getGlobalStatusVars(params: GetGlobalStatusVarsRequestJson, opts?: CallOptions): Promise<GetGlobalStatusVarsResponseJson> {
    const response = await this.#client.getGlobalStatusVars(fromJson(GetGlobalStatusVarsRequestSchema, params), opts);
    return toJson(GetGlobalStatusVarsResponseSchema, response);
  }

  async setReadOnly(params: SetReadOnlyRequestJson, opts?: CallOptions): Promise<SetReadOnlyResponseJson> {
    const response = await this.#client.setReadOnly(fromJson(SetReadOnlyRequestSchema, params), opts);
    return toJson(SetReadOnlyResponseSchema, response);
  }

  async setReadWrite(params: SetReadWriteRequestJson, opts?: CallOptions): Promise<SetReadWriteResponseJson> {
    const response = await this.#client.setReadWrite(fromJson(SetReadWriteRequestSchema, params), opts);
    return toJson(SetReadWriteResponseSchema, response);
  }

  async changeTags(params: ChangeTagsRequestJson, opts?: CallOptions): Promise<ChangeTagsResponseJson> {
    const response = await this.#client.changeTags(fromJson(ChangeTagsRequestSchema, params), opts);
    return toJson(ChangeTagsResponseSchema, response);
  }

  async changeType(params: ChangeTypeRequestJson, opts?: CallOptions): Promise<ChangeTypeResponseJson> {
    const response = await this.#client.changeType(fromJson(ChangeTypeRequestSchema, params), opts);
    return toJson(ChangeTypeResponseSchema, response);
  }

  async refreshState(params: RefreshStateRequestJson, opts?: CallOptions): Promise<RefreshStateResponseJson> {
    const response = await this.#client.refreshState(fromJson(RefreshStateRequestSchema, params), opts);
    return toJson(RefreshStateResponseSchema, response);
  }

  async runHealthCheck(params: RunHealthCheckRequestJson, opts?: CallOptions): Promise<RunHealthCheckResponseJson> {
    const response = await this.#client.runHealthCheck(fromJson(RunHealthCheckRequestSchema, params), opts);
    return toJson(RunHealthCheckResponseSchema, response);
  }

  async reloadSchema(params: ReloadSchemaRequestJson, opts?: CallOptions): Promise<ReloadSchemaResponseJson> {
    const response = await this.#client.reloadSchema(fromJson(ReloadSchemaRequestSchema, params), opts);
    return toJson(ReloadSchemaResponseSchema, response);
  }

  async preflightSchema(params: PreflightSchemaRequestJson, opts?: CallOptions): Promise<PreflightSchemaResponseJson> {
    const response = await this.#client.preflightSchema(fromJson(PreflightSchemaRequestSchema, params), opts);
    return toJson(PreflightSchemaResponseSchema, response);
  }

  async applySchema(params: ApplySchemaRequestJson, opts?: CallOptions): Promise<ApplySchemaResponseJson> {
    const response = await this.#client.applySchema(fromJson(ApplySchemaRequestSchema, params), opts);
    return toJson(ApplySchemaResponseSchema, response);
  }

  async resetSequences(params: ResetSequencesRequestJson, opts?: CallOptions): Promise<ResetSequencesResponseJson> {
    const response = await this.#client.resetSequences(fromJson(ResetSequencesRequestSchema, params), opts);
    return toJson(ResetSequencesResponseSchema, response);
  }

  async lockTables(params: LockTablesRequestJson, opts?: CallOptions): Promise<LockTablesResponseJson> {
    const response = await this.#client.lockTables(fromJson(LockTablesRequestSchema, params), opts);
    return toJson(LockTablesResponseSchema, response);
  }

  async unlockTables(params: UnlockTablesRequestJson, opts?: CallOptions): Promise<UnlockTablesResponseJson> {
    const response = await this.#client.unlockTables(fromJson(UnlockTablesRequestSchema, params), opts);
    return toJson(UnlockTablesResponseSchema, response);
  }

  async executeQuery(params: ExecuteQueryRequestJson, opts?: CallOptions): Promise<ExecuteQueryResponseJson> {
    const response = await this.#client.executeQuery(fromJson(ExecuteQueryRequestSchema, params), opts);
    return toJson(ExecuteQueryResponseSchema, response);
  }

  async executeFetchAsDba(params: ExecuteFetchAsDbaRequestJson, opts?: CallOptions): Promise<ExecuteFetchAsDbaResponseJson> {
    const response = await this.#client.executeFetchAsDba(fromJson(ExecuteFetchAsDbaRequestSchema, params), opts);
    return toJson(ExecuteFetchAsDbaResponseSchema, response);
  }

  async executeMultiFetchAsDba(params: ExecuteMultiFetchAsDbaRequestJson, opts?: CallOptions): Promise<ExecuteMultiFetchAsDbaResponseJson> {
    const response = await this.#client.executeMultiFetchAsDba(fromJson(ExecuteMultiFetchAsDbaRequestSchema, params), opts);
    return toJson(ExecuteMultiFetchAsDbaResponseSchema, response);
  }

  async executeFetchAsAllPrivs(params: ExecuteFetchAsAllPrivsRequestJson, opts?: CallOptions): Promise<ExecuteFetchAsAllPrivsResponseJson> {
    const response = await this.#client.executeFetchAsAllPrivs(fromJson(ExecuteFetchAsAllPrivsRequestSchema, params), opts);
    return toJson(ExecuteFetchAsAllPrivsResponseSchema, response);
  }

  async executeFetchAsApp(params: ExecuteFetchAsAppRequestJson, opts?: CallOptions): Promise<ExecuteFetchAsAppResponseJson> {
    const response = await this.#client.executeFetchAsApp(fromJson(ExecuteFetchAsAppRequestSchema, params), opts);
    return toJson(ExecuteFetchAsAppResponseSchema, response);
  }

  async getUnresolvedTransactions(params: GetUnresolvedTransactionsRequestJson, opts?: CallOptions): Promise<GetUnresolvedTransactionsResponseJson> {
    const response = await this.#client.getUnresolvedTransactions(fromJson(GetUnresolvedTransactionsRequestSchema, params), opts);
    return toJson(GetUnresolvedTransactionsResponseSchema, response);
  }

  async readTransaction(params: ReadTransactionRequestJson, opts?: CallOptions): Promise<ReadTransactionResponseJson> {
    const response = await this.#client.readTransaction(fromJson(ReadTransactionRequestSchema, params), opts);
    return toJson(ReadTransactionResponseSchema, response);
  }

  async concludeTransaction(params: ConcludeTransactionRequestJson, opts?: CallOptions): Promise<ConcludeTransactionResponseJson> {
    const response = await this.#client.concludeTransaction(fromJson(ConcludeTransactionRequestSchema, params), opts);
    return toJson(ConcludeTransactionResponseSchema, response);
  }

  async mysqlHostMetrics(params: MysqlHostMetricsRequestJson, opts?: CallOptions): Promise<MysqlHostMetricsResponseJson> {
    const response = await this.#client.mysqlHostMetrics(fromJson(MysqlHostMetricsRequestSchema, params), opts);
    return toJson(MysqlHostMetricsResponseSchema, response);
  }

  async replicationStatus(params: ReplicationStatusRequestJson, opts?: CallOptions): Promise<ReplicationStatusResponseJson> {
    const response = await this.#client.replicationStatus(fromJson(ReplicationStatusRequestSchema, params), opts);
    return toJson(ReplicationStatusResponseSchema, response);
  }

  async primaryStatus(params: PrimaryStatusRequestJson, opts?: CallOptions): Promise<PrimaryStatusResponseJson> {
    const response = await this.#client.primaryStatus(fromJson(PrimaryStatusRequestSchema, params), opts);
    return toJson(PrimaryStatusResponseSchema, response);
  }

  async primaryPosition(params: PrimaryPositionRequestJson, opts?: CallOptions): Promise<PrimaryPositionResponseJson> {
    const response = await this.#client.primaryPosition(fromJson(PrimaryPositionRequestSchema, params), opts);
    return toJson(PrimaryPositionResponseSchema, response);
  }

  async waitForPosition(params: WaitForPositionRequestJson, opts?: CallOptions): Promise<WaitForPositionResponseJson> {
    const response = await this.#client.waitForPosition(fromJson(WaitForPositionRequestSchema, params), opts);
    return toJson(WaitForPositionResponseSchema, response);
  }

  async stopReplication(params: StopReplicationRequestJson, opts?: CallOptions): Promise<StopReplicationResponseJson> {
    const response = await this.#client.stopReplication(fromJson(StopReplicationRequestSchema, params), opts);
    return toJson(StopReplicationResponseSchema, response);
  }

  async stopReplicationMinimum(params: StopReplicationMinimumRequestJson, opts?: CallOptions): Promise<StopReplicationMinimumResponseJson> {
    const response = await this.#client.stopReplicationMinimum(fromJson(StopReplicationMinimumRequestSchema, params), opts);
    return toJson(StopReplicationMinimumResponseSchema, response);
  }

  async startReplication(params: StartReplicationRequestJson, opts?: CallOptions): Promise<StartReplicationResponseJson> {
    const response = await this.#client.startReplication(fromJson(StartReplicationRequestSchema, params), opts);
    return toJson(StartReplicationResponseSchema, response);
  }

  async startReplicationUntilAfter(params: StartReplicationUntilAfterRequestJson, opts?: CallOptions): Promise<StartReplicationUntilAfterResponseJson> {
    const response = await this.#client.startReplicationUntilAfter(fromJson(StartReplicationUntilAfterRequestSchema, params), opts);
    return toJson(StartReplicationUntilAfterResponseSchema, response);
  }

  async getReplicas(params: GetReplicasRequestJson, opts?: CallOptions): Promise<GetReplicasResponseJson> {
    const response = await this.#client.getReplicas(fromJson(GetReplicasRequestSchema, params), opts);
    return toJson(GetReplicasResponseSchema, response);
  }

  async createVReplicationWorkflow(params: CreateVReplicationWorkflowRequestJson, opts?: CallOptions): Promise<CreateVReplicationWorkflowResponseJson> {
    const response = await this.#client.createVReplicationWorkflow(fromJson(CreateVReplicationWorkflowRequestSchema, params), opts);
    return toJson(CreateVReplicationWorkflowResponseSchema, response);
  }

  async deleteVReplicationWorkflow(params: DeleteVReplicationWorkflowRequestJson, opts?: CallOptions): Promise<DeleteVReplicationWorkflowResponseJson> {
    const response = await this.#client.deleteVReplicationWorkflow(fromJson(DeleteVReplicationWorkflowRequestSchema, params), opts);
    return toJson(DeleteVReplicationWorkflowResponseSchema, response);
  }

  async hasVReplicationWorkflows(params: HasVReplicationWorkflowsRequestJson, opts?: CallOptions): Promise<HasVReplicationWorkflowsResponseJson> {
    const response = await this.#client.hasVReplicationWorkflows(fromJson(HasVReplicationWorkflowsRequestSchema, params), opts);
    return toJson(HasVReplicationWorkflowsResponseSchema, response);
  }

  async readVReplicationWorkflow(params: ReadVReplicationWorkflowRequestJson, opts?: CallOptions): Promise<ReadVReplicationWorkflowResponseJson> {
    const response = await this.#client.readVReplicationWorkflow(fromJson(ReadVReplicationWorkflowRequestSchema, params), opts);
    return toJson(ReadVReplicationWorkflowResponseSchema, response);
  }

  async readVReplicationWorkflows(params: ReadVReplicationWorkflowsRequestJson, opts?: CallOptions): Promise<ReadVReplicationWorkflowsResponseJson> {
    const response = await this.#client.readVReplicationWorkflows(fromJson(ReadVReplicationWorkflowsRequestSchema, params), opts);
    return toJson(ReadVReplicationWorkflowsResponseSchema, response);
  }

  async updateVReplicationWorkflow(params: UpdateVReplicationWorkflowRequestJson, opts?: CallOptions): Promise<UpdateVReplicationWorkflowResponseJson> {
    const response = await this.#client.updateVReplicationWorkflow(fromJson(UpdateVReplicationWorkflowRequestSchema, params), opts);
    return toJson(UpdateVReplicationWorkflowResponseSchema, response);
  }

  async updateVReplicationWorkflows(params: UpdateVReplicationWorkflowsRequestJson, opts?: CallOptions): Promise<UpdateVReplicationWorkflowsResponseJson> {
    const response = await this.#client.updateVReplicationWorkflows(fromJson(UpdateVReplicationWorkflowsRequestSchema, params), opts);
    return toJson(UpdateVReplicationWorkflowsResponseSchema, response);
  }

  async validateVReplicationPermissions(params: ValidateVReplicationPermissionsRequestJson, opts?: CallOptions): Promise<ValidateVReplicationPermissionsResponseJson> {
    const response = await this.#client.validateVReplicationPermissions(fromJson(ValidateVReplicationPermissionsRequestSchema, params), opts);
    return toJson(ValidateVReplicationPermissionsResponseSchema, response);
  }

  async vReplicationExec(params: VReplicationExecRequestJson, opts?: CallOptions): Promise<VReplicationExecResponseJson> {
    const response = await this.#client.vReplicationExec(fromJson(VReplicationExecRequestSchema, params), opts);
    return toJson(VReplicationExecResponseSchema, response);
  }

  async vReplicationWaitForPos(params: VReplicationWaitForPosRequestJson, opts?: CallOptions): Promise<VReplicationWaitForPosResponseJson> {
    const response = await this.#client.vReplicationWaitForPos(fromJson(VReplicationWaitForPosRequestSchema, params), opts);
    return toJson(VReplicationWaitForPosResponseSchema, response);
  }

  async vDiff(params: VDiffRequestJson, opts?: CallOptions): Promise<VDiffResponseJson> {
    const response = await this.#client.vDiff(fromJson(VDiffRequestSchema, params), opts);
    return toJson(VDiffResponseSchema, response);
  }

  async resetReplication(params: ResetReplicationRequestJson, opts?: CallOptions): Promise<ResetReplicationResponseJson> {
    const response = await this.#client.resetReplication(fromJson(ResetReplicationRequestSchema, params), opts);
    return toJson(ResetReplicationResponseSchema, response);
  }

  async initPrimary(params: InitPrimaryRequestJson, opts?: CallOptions): Promise<InitPrimaryResponseJson> {
    const response = await this.#client.initPrimary(fromJson(InitPrimaryRequestSchema, params), opts);
    return toJson(InitPrimaryResponseSchema, response);
  }

  async populateReparentJournal(params: PopulateReparentJournalRequestJson, opts?: CallOptions): Promise<PopulateReparentJournalResponseJson> {
    const response = await this.#client.populateReparentJournal(fromJson(PopulateReparentJournalRequestSchema, params), opts);
    return toJson(PopulateReparentJournalResponseSchema, response);
  }

  async readReparentJournalInfo(params: ReadReparentJournalInfoRequestJson, opts?: CallOptions): Promise<ReadReparentJournalInfoResponseJson> {
    const response = await this.#client.readReparentJournalInfo(fromJson(ReadReparentJournalInfoRequestSchema, params), opts);
    return toJson(ReadReparentJournalInfoResponseSchema, response);
  }

  async initReplica(params: InitReplicaRequestJson, opts?: CallOptions): Promise<InitReplicaResponseJson> {
    const response = await this.#client.initReplica(fromJson(InitReplicaRequestSchema, params), opts);
    return toJson(InitReplicaResponseSchema, response);
  }

  async demotePrimary(params: DemotePrimaryRequestJson, opts?: CallOptions): Promise<DemotePrimaryResponseJson> {
    const response = await this.#client.demotePrimary(fromJson(DemotePrimaryRequestSchema, params), opts);
    return toJson(DemotePrimaryResponseSchema, response);
  }

  async undoDemotePrimary(params: UndoDemotePrimaryRequestJson, opts?: CallOptions): Promise<UndoDemotePrimaryResponseJson> {
    const response = await this.#client.undoDemotePrimary(fromJson(UndoDemotePrimaryRequestSchema, params), opts);
    return toJson(UndoDemotePrimaryResponseSchema, response);
  }

  async replicaWasPromoted(params: ReplicaWasPromotedRequestJson, opts?: CallOptions): Promise<ReplicaWasPromotedResponseJson> {
    const response = await this.#client.replicaWasPromoted(fromJson(ReplicaWasPromotedRequestSchema, params), opts);
    return toJson(ReplicaWasPromotedResponseSchema, response);
  }

  async resetReplicationParameters(params: ResetReplicationParametersRequestJson, opts?: CallOptions): Promise<ResetReplicationParametersResponseJson> {
    const response = await this.#client.resetReplicationParameters(fromJson(ResetReplicationParametersRequestSchema, params), opts);
    return toJson(ResetReplicationParametersResponseSchema, response);
  }

  async fullStatus(params: FullStatusRequestJson, opts?: CallOptions): Promise<FullStatusResponseJson> {
    const response = await this.#client.fullStatus(fromJson(FullStatusRequestSchema, params), opts);
    return toJson(FullStatusResponseSchema, response);
  }

  async setReplicationSource(params: SetReplicationSourceRequestJson, opts?: CallOptions): Promise<SetReplicationSourceResponseJson> {
    const response = await this.#client.setReplicationSource(fromJson(SetReplicationSourceRequestSchema, params), opts);
    return toJson(SetReplicationSourceResponseSchema, response);
  }

  async replicaWasRestarted(params: ReplicaWasRestartedRequestJson, opts?: CallOptions): Promise<ReplicaWasRestartedResponseJson> {
    const response = await this.#client.replicaWasRestarted(fromJson(ReplicaWasRestartedRequestSchema, params), opts);
    return toJson(ReplicaWasRestartedResponseSchema, response);
  }

  async stopReplicationAndGetStatus(params: StopReplicationAndGetStatusRequestJson, opts?: CallOptions): Promise<StopReplicationAndGetStatusResponseJson> {
    const response = await this.#client.stopReplicationAndGetStatus(fromJson(StopReplicationAndGetStatusRequestSchema, params), opts);
    return toJson(StopReplicationAndGetStatusResponseSchema, response);
  }

  async promoteReplica(params: PromoteReplicaRequestJson, opts?: CallOptions): Promise<PromoteReplicaResponseJson> {
    const response = await this.#client.promoteReplica(fromJson(PromoteReplicaRequestSchema, params), opts);
    return toJson(PromoteReplicaResponseSchema, response);
  }

  async *backup(params: BackupRequestJson, opts?: CallOptions): AsyncGenerator<BackupResponseJson> {
    const stream = this.#client.backup(fromJson(BackupRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(BackupResponseSchema, response);
    }
  }

  async *restoreFromBackup(params: RestoreFromBackupRequestJson, opts?: CallOptions): AsyncGenerator<RestoreFromBackupResponseJson> {
    const stream = this.#client.restoreFromBackup(fromJson(RestoreFromBackupRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(RestoreFromBackupResponseSchema, response);
    }
  }

  async checkThrottler(params: CheckThrottlerRequestJson, opts?: CallOptions): Promise<CheckThrottlerResponseJson> {
    const response = await this.#client.checkThrottler(fromJson(CheckThrottlerRequestSchema, params), opts);
    return toJson(CheckThrottlerResponseSchema, response);
  }

  async getThrottlerStatus(params: GetThrottlerStatusRequestJson, opts?: CallOptions): Promise<GetThrottlerStatusResponseJson> {
    const response = await this.#client.getThrottlerStatus(fromJson(GetThrottlerStatusRequestSchema, params), opts);
    return toJson(GetThrottlerStatusResponseSchema, response);
  }

}
