// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "vttest.proto" (package "vttest", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This file contains the vttest topology configuration structures.
//
// The protobuf message "VTTestTopology" specifies the Vitess and
// database configuration of the "vttest" test component which can be
// used in end-to-end tests to test an application against an actual
// Vitess and MySQL server.
//
// To start a "vttest" instance, pass the "VTTestTopology" message,
// encoded in the protobuf compact text format, to
// py/vttest/run_local_database.py which in turn will send it to the
// Vitess test binary called "vtcombo".
//
// To encode a "VTTestTopology" message in the protobuf compact text
// format, create the protobuf in your test's native language first
// and then use the protobuf library to encode it as text.
// For an example in Python, see: test/vttest_sample_test.py
// In go, see: go/vt/vttest/local_cluster_test.go
//
// Sample encoded proto configurations would be as follow. Note there are
// multiple encoding options, see the proto documentation for more info
// (first and last quote not included in the encoding):
// - single keyspace named test_keyspace with one shard '0':
//   'keyspaces:<name:"test_keyspace" shards:<name:"0" > > '
// - two keyspaces, one with two shards, the other one with a redirect:
//   'keyspaces { name: "test_keyspace" shards { name: "-80" } shards { name: "80-" } } keyspaces { name: "redirect" served_from: "test_keyspace" }'
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MirrorRules } from "./vschema";
import { RoutingRules } from "./vschema";
/**
 * Shard describes a single shard in a keyspace.
 *
 * @generated from protobuf message vttest.Shard
 */
export interface Shard {
    /**
     * name has to be unique in a keyspace. For unsharded keyspaces, it
     * should be '0'. For sharded keyspace, it should be derived from
     * the keyrange, like '-80' or '40-80'.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * db_name_override is the mysql db name for this shard. Has to be
     * globally unique. If not specified, we will by default use
     * 'vt_<keyspace>_<shard>'.
     *
     * @generated from protobuf field: string db_name_override = 2;
     */
    dbNameOverride: string;
}
/**
 * Keyspace describes a single keyspace.
 *
 * @generated from protobuf message vttest.Keyspace
 */
export interface Keyspace {
    /**
     * name has to be unique in a VTTestTopology.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * shards inside this keyspace. Ignored if redirect is set.
     *
     * @generated from protobuf field: repeated vttest.Shard shards = 2;
     */
    shards: Shard[];
    /**
     * number of replica tablets to instantiate. This includes the primary tablet.
     *
     * @generated from protobuf field: int32 replica_count = 6;
     */
    replicaCount: number;
    /**
     * number of rdonly tablets to instantiate.
     *
     * @generated from protobuf field: int32 rdonly_count = 7;
     */
    rdonlyCount: number;
}
/**
 * VTTestTopology describes the keyspaces in the topology.
 *
 * @generated from protobuf message vttest.VTTestTopology
 */
export interface VTTestTopology {
    /**
     * all keyspaces in the topology.
     *
     * @generated from protobuf field: repeated vttest.Keyspace keyspaces = 1;
     */
    keyspaces: Keyspace[];
    /**
     * list of cells the keyspaces reside in. Vtgate is started in only the first cell.
     *
     * @generated from protobuf field: repeated string cells = 2;
     */
    cells: string[];
    /**
     * routing rules for the topology.
     *
     * @generated from protobuf field: vschema.RoutingRules routing_rules = 3;
     */
    routingRules?: RoutingRules;
    /**
     * mirror rules for the topology.
     *
     * @generated from protobuf field: vschema.MirrorRules mirror_rules = 4;
     */
    mirrorRules?: MirrorRules;
}
// @generated message type with reflection information, may provide speed optimized methods
class Shard$Type extends MessageType<Shard> {
    constructor() {
        super("vttest.Shard", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "db_name_override", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Shard>): Shard {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.dbNameOverride = "";
        if (value !== undefined)
            reflectionMergePartial<Shard>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shard): Shard {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string db_name_override */ 2:
                    message.dbNameOverride = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shard, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string db_name_override = 2; */
        if (message.dbNameOverride !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbNameOverride);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vttest.Shard
 */
export const Shard = new Shard$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Keyspace$Type extends MessageType<Keyspace> {
    constructor() {
        super("vttest.Keyspace", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "shards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Shard },
            { no: 6, name: "replica_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "rdonly_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Keyspace>): Keyspace {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.shards = [];
        message.replicaCount = 0;
        message.rdonlyCount = 0;
        if (value !== undefined)
            reflectionMergePartial<Keyspace>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Keyspace): Keyspace {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated vttest.Shard shards */ 2:
                    message.shards.push(Shard.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 replica_count */ 6:
                    message.replicaCount = reader.int32();
                    break;
                case /* int32 rdonly_count */ 7:
                    message.rdonlyCount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Keyspace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated vttest.Shard shards = 2; */
        for (let i = 0; i < message.shards.length; i++)
            Shard.internalBinaryWrite(message.shards[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 replica_count = 6; */
        if (message.replicaCount !== 0)
            writer.tag(6, WireType.Varint).int32(message.replicaCount);
        /* int32 rdonly_count = 7; */
        if (message.rdonlyCount !== 0)
            writer.tag(7, WireType.Varint).int32(message.rdonlyCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vttest.Keyspace
 */
export const Keyspace = new Keyspace$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VTTestTopology$Type extends MessageType<VTTestTopology> {
    constructor() {
        super("vttest.VTTestTopology", [
            { no: 1, name: "keyspaces", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Keyspace },
            { no: 2, name: "cells", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "routing_rules", kind: "message", T: () => RoutingRules },
            { no: 4, name: "mirror_rules", kind: "message", T: () => MirrorRules }
        ]);
    }
    create(value?: PartialMessage<VTTestTopology>): VTTestTopology {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keyspaces = [];
        message.cells = [];
        if (value !== undefined)
            reflectionMergePartial<VTTestTopology>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VTTestTopology): VTTestTopology {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated vttest.Keyspace keyspaces */ 1:
                    message.keyspaces.push(Keyspace.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string cells */ 2:
                    message.cells.push(reader.string());
                    break;
                case /* vschema.RoutingRules routing_rules */ 3:
                    message.routingRules = RoutingRules.internalBinaryRead(reader, reader.uint32(), options, message.routingRules);
                    break;
                case /* vschema.MirrorRules mirror_rules */ 4:
                    message.mirrorRules = MirrorRules.internalBinaryRead(reader, reader.uint32(), options, message.mirrorRules);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VTTestTopology, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated vttest.Keyspace keyspaces = 1; */
        for (let i = 0; i < message.keyspaces.length; i++)
            Keyspace.internalBinaryWrite(message.keyspaces[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string cells = 2; */
        for (let i = 0; i < message.cells.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.cells[i]);
        /* vschema.RoutingRules routing_rules = 3; */
        if (message.routingRules)
            RoutingRules.internalBinaryWrite(message.routingRules, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* vschema.MirrorRules mirror_rules = 4; */
        if (message.mirrorRules)
            MirrorRules.internalBinaryWrite(message.mirrorRules, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message vttest.VTTestTopology
 */
export const VTTestTopology = new VTTestTopology$Type();
