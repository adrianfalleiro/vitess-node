//
//Copyright 2020 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains the types used by VTAdmin (and later an RPC service).

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file vtadmin.proto (package vtadmin, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import type { ApplySchemaRequestJson, CancelSchemaMigrationRequestJson, CleanupSchemaMigrationRequestJson, CompleteSchemaMigrationRequestJson, ConcludeTransactionRequestJson, CreateKeyspaceRequestJson, CreateKeyspaceResponseJson, CreateShardRequestJson, DeleteKeyspaceRequestJson, DeleteShardsRequestJson, DeleteTabletRequestJson, DeleteTabletResponseJson, EmergencyFailoverShardRequestJson, EmergencyFailoverShardResponseJson, FindSchemaRequestJson, GetBackupsRequestJson, GetBackupsResponseJson, GetCellInfosRequestJson, GetCellInfosResponseJson, GetCellsAliasesRequestJson, GetCellsAliasesResponseJson, GetClustersRequestJson, GetClustersResponseJson, GetFullStatusRequestJson, GetGatesRequestJson, GetGatesResponseJson, GetKeyspaceRequestJson, GetKeyspacesRequestJson, GetKeyspacesResponseJson, GetSchemaMigrationsRequestJson, GetSchemaMigrationsResponseJson, GetSchemaRequestJson, GetSchemasRequestJson, GetSchemasResponseJson, GetShardReplicationPositionsRequestJson, GetShardReplicationPositionsResponseJson, GetSrvKeyspaceRequestJson, GetSrvKeyspacesRequestJson, GetSrvKeyspacesResponseJson as GetSrvKeyspacesResponseJson$1, GetSrvVSchemaRequestJson, GetSrvVSchemasRequestJson, GetSrvVSchemasResponseJson, GetTabletRequestJson, GetTabletsRequestJson, GetTabletsResponseJson, GetTopologyPathRequestJson, GetUnresolvedTransactionsRequestJson, GetVSchemaRequestJson, GetVSchemasRequestJson, GetVSchemasResponseJson, GetVtctldsRequestJson, GetVtctldsResponseJson, GetWorkflowRequestJson, GetWorkflowsRequestJson, GetWorkflowsResponseJson, GetWorkflowStatusRequestJson, KeyspaceJson, LaunchSchemaMigrationRequestJson, MoveTablesCreateRequestJson, PingTabletRequestJson, PingTabletResponseJson, PlannedFailoverShardRequestJson, PlannedFailoverShardResponseJson, RebuildKeyspaceGraphRequestJson, RebuildKeyspaceGraphResponseJson, RefreshStateRequestJson, RefreshStateResponseJson, RefreshTabletReplicationSourceRequestJson, RefreshTabletReplicationSourceResponseJson, ReloadSchemaShardRequestJson, ReloadSchemaShardResponseJson, ReloadSchemasRequestJson, ReloadSchemasResponseJson, RemoveKeyspaceCellRequestJson, RemoveKeyspaceCellResponseJson, RetrySchemaMigrationRequestJson, RunHealthCheckRequestJson, RunHealthCheckResponseJson, SchemaJson, SetReadOnlyRequestJson, SetReadOnlyResponseJson, SetReadWriteRequestJson, SetReadWriteResponseJson, SrvVSchemaJson, StartReplicationRequestJson, StartReplicationResponseJson, StartWorkflowRequestJson, StopReplicationRequestJson, StopReplicationResponseJson, StopWorkflowRequestJson, TabletExternallyPromotedRequestJson, TabletExternallyPromotedResponseJson, TabletJson, ValidateKeyspaceRequestJson, ValidateRequestJson, ValidateSchemaKeyspaceRequestJson, ValidateShardRequestJson, ValidateVersionKeyspaceRequestJson, ValidateVersionShardRequestJson, VSchemaJson, VTExplainRequestJson, VTExplainResponseJson, WorkflowJson } from "./vtadmin_pb";
import { ApplySchemaRequestSchema, CancelSchemaMigrationRequestSchema, CleanupSchemaMigrationRequestSchema, CompleteSchemaMigrationRequestSchema, ConcludeTransactionRequestSchema, CreateKeyspaceRequestSchema, CreateKeyspaceResponseSchema, CreateShardRequestSchema, DeleteKeyspaceRequestSchema, DeleteShardsRequestSchema, DeleteTabletRequestSchema, DeleteTabletResponseSchema, EmergencyFailoverShardRequestSchema, EmergencyFailoverShardResponseSchema, FindSchemaRequestSchema, GetBackupsRequestSchema, GetBackupsResponseSchema, GetCellInfosRequestSchema, GetCellInfosResponseSchema, GetCellsAliasesRequestSchema, GetCellsAliasesResponseSchema, GetClustersRequestSchema, GetClustersResponseSchema, GetFullStatusRequestSchema, GetGatesRequestSchema, GetGatesResponseSchema, GetKeyspaceRequestSchema, GetKeyspacesRequestSchema, GetKeyspacesResponseSchema, GetSchemaMigrationsRequestSchema, GetSchemaMigrationsResponseSchema, GetSchemaRequestSchema, GetSchemasRequestSchema, GetSchemasResponseSchema, GetShardReplicationPositionsRequestSchema, GetShardReplicationPositionsResponseSchema, GetSrvKeyspaceRequestSchema, GetSrvKeyspacesRequestSchema, GetSrvKeyspacesResponseSchema as GetSrvKeyspacesResponseSchema$1, GetSrvVSchemaRequestSchema, GetSrvVSchemasRequestSchema, GetSrvVSchemasResponseSchema, GetTabletRequestSchema, GetTabletsRequestSchema, GetTabletsResponseSchema, GetTopologyPathRequestSchema, GetUnresolvedTransactionsRequestSchema, GetVSchemaRequestSchema, GetVSchemasRequestSchema, GetVSchemasResponseSchema, GetVtctldsRequestSchema, GetVtctldsResponseSchema, GetWorkflowRequestSchema, GetWorkflowsRequestSchema, GetWorkflowsResponseSchema, GetWorkflowStatusRequestSchema, KeyspaceSchema, LaunchSchemaMigrationRequestSchema, MoveTablesCreateRequestSchema, PingTabletRequestSchema, PingTabletResponseSchema, PlannedFailoverShardRequestSchema, PlannedFailoverShardResponseSchema, RebuildKeyspaceGraphRequestSchema, RebuildKeyspaceGraphResponseSchema, RefreshStateRequestSchema, RefreshStateResponseSchema, RefreshTabletReplicationSourceRequestSchema, RefreshTabletReplicationSourceResponseSchema, ReloadSchemaShardRequestSchema, ReloadSchemaShardResponseSchema, ReloadSchemasRequestSchema, ReloadSchemasResponseSchema, RemoveKeyspaceCellRequestSchema, RemoveKeyspaceCellResponseSchema, RetrySchemaMigrationRequestSchema, RunHealthCheckRequestSchema, RunHealthCheckResponseSchema, SchemaSchema, SetReadOnlyRequestSchema, SetReadOnlyResponseSchema, SetReadWriteRequestSchema, SetReadWriteResponseSchema, SrvVSchemaSchema, StartReplicationRequestSchema, StartReplicationResponseSchema, StartWorkflowRequestSchema, StopReplicationRequestSchema, StopReplicationResponseSchema, StopWorkflowRequestSchema, TabletExternallyPromotedRequestSchema, TabletExternallyPromotedResponseSchema, TabletSchema, ValidateKeyspaceRequestSchema, ValidateRequestSchema, ValidateSchemaKeyspaceRequestSchema, ValidateShardRequestSchema, ValidateVersionKeyspaceRequestSchema, ValidateVersionShardRequestSchema, VSchemaSchema, VTAdmin, VTExplainRequestSchema, VTExplainResponseSchema, WorkflowSchema } from "./vtadmin_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import type { ApplySchemaResponseJson, CancelSchemaMigrationResponseJson, CleanupSchemaMigrationResponseJson, CompleteSchemaMigrationResponseJson, ConcludeTransactionResponseJson, CreateShardResponseJson, DeleteKeyspaceResponseJson, DeleteShardsResponseJson, GetFullStatusResponseJson, GetSrvKeyspacesResponseJson, GetTopologyPathResponseJson, GetUnresolvedTransactionsResponseJson, LaunchSchemaMigrationResponseJson, RetrySchemaMigrationResponseJson, ValidateKeyspaceResponseJson, ValidateResponseJson, ValidateSchemaKeyspaceResponseJson, ValidateShardResponseJson, ValidateVersionKeyspaceResponseJson, ValidateVersionShardResponseJson, WorkflowStatusResponseJson, WorkflowUpdateResponseJson } from "./vtctldata_pb";
import { ApplySchemaResponseSchema, CancelSchemaMigrationResponseSchema, CleanupSchemaMigrationResponseSchema, CompleteSchemaMigrationResponseSchema, ConcludeTransactionResponseSchema, CreateShardResponseSchema, DeleteKeyspaceResponseSchema, DeleteShardsResponseSchema, GetFullStatusResponseSchema, GetSrvKeyspacesResponseSchema, GetTopologyPathResponseSchema, GetUnresolvedTransactionsResponseSchema, LaunchSchemaMigrationResponseSchema, RetrySchemaMigrationResponseSchema, ValidateKeyspaceResponseSchema, ValidateResponseSchema, ValidateSchemaKeyspaceResponseSchema, ValidateShardResponseSchema, ValidateVersionKeyspaceResponseSchema, ValidateVersionShardResponseSchema, WorkflowStatusResponseSchema, WorkflowUpdateResponseSchema } from "./vtctldata_pb";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * VTAdmin is the Vitess Admin API service. It provides RPCs that operate on
 * across a range of Vitess clusters.
 *
 * @generated from service vtadmin.VTAdmin
 */
export class VTAdminClient {
  #client: Client<typeof VTAdmin>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(VTAdmin, transport);
  }

  async applySchema(params: ApplySchemaRequestJson, opts?: CallOptions): Promise<ApplySchemaResponseJson> {
    const response = await this.#client.applySchema(fromJson(ApplySchemaRequestSchema, params), opts);
    return toJson(ApplySchemaResponseSchema, response);
  }

  async cancelSchemaMigration(params: CancelSchemaMigrationRequestJson, opts?: CallOptions): Promise<CancelSchemaMigrationResponseJson> {
    const response = await this.#client.cancelSchemaMigration(fromJson(CancelSchemaMigrationRequestSchema, params), opts);
    return toJson(CancelSchemaMigrationResponseSchema, response);
  }

  async cleanupSchemaMigration(params: CleanupSchemaMigrationRequestJson, opts?: CallOptions): Promise<CleanupSchemaMigrationResponseJson> {
    const response = await this.#client.cleanupSchemaMigration(fromJson(CleanupSchemaMigrationRequestSchema, params), opts);
    return toJson(CleanupSchemaMigrationResponseSchema, response);
  }

  async completeSchemaMigration(params: CompleteSchemaMigrationRequestJson, opts?: CallOptions): Promise<CompleteSchemaMigrationResponseJson> {
    const response = await this.#client.completeSchemaMigration(fromJson(CompleteSchemaMigrationRequestSchema, params), opts);
    return toJson(CompleteSchemaMigrationResponseSchema, response);
  }

  async concludeTransaction(params: ConcludeTransactionRequestJson, opts?: CallOptions): Promise<ConcludeTransactionResponseJson> {
    const response = await this.#client.concludeTransaction(fromJson(ConcludeTransactionRequestSchema, params), opts);
    return toJson(ConcludeTransactionResponseSchema, response);
  }

  async createKeyspace(params: CreateKeyspaceRequestJson, opts?: CallOptions): Promise<CreateKeyspaceResponseJson> {
    const response = await this.#client.createKeyspace(fromJson(CreateKeyspaceRequestSchema, params), opts);
    return toJson(CreateKeyspaceResponseSchema, response);
  }

  async createShard(params: CreateShardRequestJson, opts?: CallOptions): Promise<CreateShardResponseJson> {
    const response = await this.#client.createShard(fromJson(CreateShardRequestSchema, params), opts);
    return toJson(CreateShardResponseSchema, response);
  }

  async deleteKeyspace(params: DeleteKeyspaceRequestJson, opts?: CallOptions): Promise<DeleteKeyspaceResponseJson> {
    const response = await this.#client.deleteKeyspace(fromJson(DeleteKeyspaceRequestSchema, params), opts);
    return toJson(DeleteKeyspaceResponseSchema, response);
  }

  async deleteShards(params: DeleteShardsRequestJson, opts?: CallOptions): Promise<DeleteShardsResponseJson> {
    const response = await this.#client.deleteShards(fromJson(DeleteShardsRequestSchema, params), opts);
    return toJson(DeleteShardsResponseSchema, response);
  }

  async deleteTablet(params: DeleteTabletRequestJson, opts?: CallOptions): Promise<DeleteTabletResponseJson> {
    const response = await this.#client.deleteTablet(fromJson(DeleteTabletRequestSchema, params), opts);
    return toJson(DeleteTabletResponseSchema, response);
  }

  async emergencyFailoverShard(params: EmergencyFailoverShardRequestJson, opts?: CallOptions): Promise<EmergencyFailoverShardResponseJson> {
    const response = await this.#client.emergencyFailoverShard(fromJson(EmergencyFailoverShardRequestSchema, params), opts);
    return toJson(EmergencyFailoverShardResponseSchema, response);
  }

  async findSchema(params: FindSchemaRequestJson, opts?: CallOptions): Promise<SchemaJson> {
    const response = await this.#client.findSchema(fromJson(FindSchemaRequestSchema, params), opts);
    return toJson(SchemaSchema, response);
  }

  async getBackups(params: GetBackupsRequestJson, opts?: CallOptions): Promise<GetBackupsResponseJson> {
    const response = await this.#client.getBackups(fromJson(GetBackupsRequestSchema, params), opts);
    return toJson(GetBackupsResponseSchema, response);
  }

  async getCellInfos(params: GetCellInfosRequestJson, opts?: CallOptions): Promise<GetCellInfosResponseJson> {
    const response = await this.#client.getCellInfos(fromJson(GetCellInfosRequestSchema, params), opts);
    return toJson(GetCellInfosResponseSchema, response);
  }

  async getCellsAliases(params: GetCellsAliasesRequestJson, opts?: CallOptions): Promise<GetCellsAliasesResponseJson> {
    const response = await this.#client.getCellsAliases(fromJson(GetCellsAliasesRequestSchema, params), opts);
    return toJson(GetCellsAliasesResponseSchema, response);
  }

  async getClusters(params: GetClustersRequestJson, opts?: CallOptions): Promise<GetClustersResponseJson> {
    const response = await this.#client.getClusters(fromJson(GetClustersRequestSchema, params), opts);
    return toJson(GetClustersResponseSchema, response);
  }

  async getFullStatus(params: GetFullStatusRequestJson, opts?: CallOptions): Promise<GetFullStatusResponseJson> {
    const response = await this.#client.getFullStatus(fromJson(GetFullStatusRequestSchema, params), opts);
    return toJson(GetFullStatusResponseSchema, response);
  }

  async getGates(params: GetGatesRequestJson, opts?: CallOptions): Promise<GetGatesResponseJson> {
    const response = await this.#client.getGates(fromJson(GetGatesRequestSchema, params), opts);
    return toJson(GetGatesResponseSchema, response);
  }

  async getKeyspace(params: GetKeyspaceRequestJson, opts?: CallOptions): Promise<KeyspaceJson> {
    const response = await this.#client.getKeyspace(fromJson(GetKeyspaceRequestSchema, params), opts);
    return toJson(KeyspaceSchema, response);
  }

  async getKeyspaces(params: GetKeyspacesRequestJson, opts?: CallOptions): Promise<GetKeyspacesResponseJson> {
    const response = await this.#client.getKeyspaces(fromJson(GetKeyspacesRequestSchema, params), opts);
    return toJson(GetKeyspacesResponseSchema, response);
  }

  async getSchema(params: GetSchemaRequestJson, opts?: CallOptions): Promise<SchemaJson> {
    const response = await this.#client.getSchema(fromJson(GetSchemaRequestSchema, params), opts);
    return toJson(SchemaSchema, response);
  }

  async getSchemas(params: GetSchemasRequestJson, opts?: CallOptions): Promise<GetSchemasResponseJson> {
    const response = await this.#client.getSchemas(fromJson(GetSchemasRequestSchema, params), opts);
    return toJson(GetSchemasResponseSchema, response);
  }

  async getSchemaMigrations(params: GetSchemaMigrationsRequestJson, opts?: CallOptions): Promise<GetSchemaMigrationsResponseJson> {
    const response = await this.#client.getSchemaMigrations(fromJson(GetSchemaMigrationsRequestSchema, params), opts);
    return toJson(GetSchemaMigrationsResponseSchema, response);
  }

  async getShardReplicationPositions(params: GetShardReplicationPositionsRequestJson, opts?: CallOptions): Promise<GetShardReplicationPositionsResponseJson> {
    const response = await this.#client.getShardReplicationPositions(fromJson(GetShardReplicationPositionsRequestSchema, params), opts);
    return toJson(GetShardReplicationPositionsResponseSchema, response);
  }

  async getSrvKeyspace(params: GetSrvKeyspaceRequestJson, opts?: CallOptions): Promise<GetSrvKeyspacesResponseJson> {
    const response = await this.#client.getSrvKeyspace(fromJson(GetSrvKeyspaceRequestSchema, params), opts);
    return toJson(GetSrvKeyspacesResponseSchema, response);
  }

  async getSrvKeyspaces(params: GetSrvKeyspacesRequestJson, opts?: CallOptions): Promise<GetSrvKeyspacesResponseJson$1> {
    const response = await this.#client.getSrvKeyspaces(fromJson(GetSrvKeyspacesRequestSchema, params), opts);
    return toJson(GetSrvKeyspacesResponseSchema$1, response);
  }

  async getSrvVSchema(params: GetSrvVSchemaRequestJson, opts?: CallOptions): Promise<SrvVSchemaJson> {
    const response = await this.#client.getSrvVSchema(fromJson(GetSrvVSchemaRequestSchema, params), opts);
    return toJson(SrvVSchemaSchema, response);
  }

  async getSrvVSchemas(params: GetSrvVSchemasRequestJson, opts?: CallOptions): Promise<GetSrvVSchemasResponseJson> {
    const response = await this.#client.getSrvVSchemas(fromJson(GetSrvVSchemasRequestSchema, params), opts);
    return toJson(GetSrvVSchemasResponseSchema, response);
  }

  async getTablet(params: GetTabletRequestJson, opts?: CallOptions): Promise<TabletJson> {
    const response = await this.#client.getTablet(fromJson(GetTabletRequestSchema, params), opts);
    return toJson(TabletSchema, response);
  }

  async getTablets(params: GetTabletsRequestJson, opts?: CallOptions): Promise<GetTabletsResponseJson> {
    const response = await this.#client.getTablets(fromJson(GetTabletsRequestSchema, params), opts);
    return toJson(GetTabletsResponseSchema, response);
  }

  async getTopologyPath(params: GetTopologyPathRequestJson, opts?: CallOptions): Promise<GetTopologyPathResponseJson> {
    const response = await this.#client.getTopologyPath(fromJson(GetTopologyPathRequestSchema, params), opts);
    return toJson(GetTopologyPathResponseSchema, response);
  }

  async getUnresolvedTransactions(params: GetUnresolvedTransactionsRequestJson, opts?: CallOptions): Promise<GetUnresolvedTransactionsResponseJson> {
    const response = await this.#client.getUnresolvedTransactions(fromJson(GetUnresolvedTransactionsRequestSchema, params), opts);
    return toJson(GetUnresolvedTransactionsResponseSchema, response);
  }

  async getVSchema(params: GetVSchemaRequestJson, opts?: CallOptions): Promise<VSchemaJson> {
    const response = await this.#client.getVSchema(fromJson(GetVSchemaRequestSchema, params), opts);
    return toJson(VSchemaSchema, response);
  }

  async getVSchemas(params: GetVSchemasRequestJson, opts?: CallOptions): Promise<GetVSchemasResponseJson> {
    const response = await this.#client.getVSchemas(fromJson(GetVSchemasRequestSchema, params), opts);
    return toJson(GetVSchemasResponseSchema, response);
  }

  async getVtctlds(params: GetVtctldsRequestJson, opts?: CallOptions): Promise<GetVtctldsResponseJson> {
    const response = await this.#client.getVtctlds(fromJson(GetVtctldsRequestSchema, params), opts);
    return toJson(GetVtctldsResponseSchema, response);
  }

  async getWorkflow(params: GetWorkflowRequestJson, opts?: CallOptions): Promise<WorkflowJson> {
    const response = await this.#client.getWorkflow(fromJson(GetWorkflowRequestSchema, params), opts);
    return toJson(WorkflowSchema, response);
  }

  async getWorkflows(params: GetWorkflowsRequestJson, opts?: CallOptions): Promise<GetWorkflowsResponseJson> {
    const response = await this.#client.getWorkflows(fromJson(GetWorkflowsRequestSchema, params), opts);
    return toJson(GetWorkflowsResponseSchema, response);
  }

  async getWorkflowStatus(params: GetWorkflowStatusRequestJson, opts?: CallOptions): Promise<WorkflowStatusResponseJson> {
    const response = await this.#client.getWorkflowStatus(fromJson(GetWorkflowStatusRequestSchema, params), opts);
    return toJson(WorkflowStatusResponseSchema, response);
  }

  async startWorkflow(params: StartWorkflowRequestJson, opts?: CallOptions): Promise<WorkflowUpdateResponseJson> {
    const response = await this.#client.startWorkflow(fromJson(StartWorkflowRequestSchema, params), opts);
    return toJson(WorkflowUpdateResponseSchema, response);
  }

  async stopWorkflow(params: StopWorkflowRequestJson, opts?: CallOptions): Promise<WorkflowUpdateResponseJson> {
    const response = await this.#client.stopWorkflow(fromJson(StopWorkflowRequestSchema, params), opts);
    return toJson(WorkflowUpdateResponseSchema, response);
  }

  async launchSchemaMigration(params: LaunchSchemaMigrationRequestJson, opts?: CallOptions): Promise<LaunchSchemaMigrationResponseJson> {
    const response = await this.#client.launchSchemaMigration(fromJson(LaunchSchemaMigrationRequestSchema, params), opts);
    return toJson(LaunchSchemaMigrationResponseSchema, response);
  }

  async moveTablesCreate(params: MoveTablesCreateRequestJson, opts?: CallOptions): Promise<WorkflowStatusResponseJson> {
    const response = await this.#client.moveTablesCreate(fromJson(MoveTablesCreateRequestSchema, params), opts);
    return toJson(WorkflowStatusResponseSchema, response);
  }

  async pingTablet(params: PingTabletRequestJson, opts?: CallOptions): Promise<PingTabletResponseJson> {
    const response = await this.#client.pingTablet(fromJson(PingTabletRequestSchema, params), opts);
    return toJson(PingTabletResponseSchema, response);
  }

  async plannedFailoverShard(params: PlannedFailoverShardRequestJson, opts?: CallOptions): Promise<PlannedFailoverShardResponseJson> {
    const response = await this.#client.plannedFailoverShard(fromJson(PlannedFailoverShardRequestSchema, params), opts);
    return toJson(PlannedFailoverShardResponseSchema, response);
  }

  async rebuildKeyspaceGraph(params: RebuildKeyspaceGraphRequestJson, opts?: CallOptions): Promise<RebuildKeyspaceGraphResponseJson> {
    const response = await this.#client.rebuildKeyspaceGraph(fromJson(RebuildKeyspaceGraphRequestSchema, params), opts);
    return toJson(RebuildKeyspaceGraphResponseSchema, response);
  }

  async refreshState(params: RefreshStateRequestJson, opts?: CallOptions): Promise<RefreshStateResponseJson> {
    const response = await this.#client.refreshState(fromJson(RefreshStateRequestSchema, params), opts);
    return toJson(RefreshStateResponseSchema, response);
  }

  async refreshTabletReplicationSource(params: RefreshTabletReplicationSourceRequestJson, opts?: CallOptions): Promise<RefreshTabletReplicationSourceResponseJson> {
    const response = await this.#client.refreshTabletReplicationSource(fromJson(RefreshTabletReplicationSourceRequestSchema, params), opts);
    return toJson(RefreshTabletReplicationSourceResponseSchema, response);
  }

  async reloadSchemas(params: ReloadSchemasRequestJson, opts?: CallOptions): Promise<ReloadSchemasResponseJson> {
    const response = await this.#client.reloadSchemas(fromJson(ReloadSchemasRequestSchema, params), opts);
    return toJson(ReloadSchemasResponseSchema, response);
  }

  async reloadSchemaShard(params: ReloadSchemaShardRequestJson, opts?: CallOptions): Promise<ReloadSchemaShardResponseJson> {
    const response = await this.#client.reloadSchemaShard(fromJson(ReloadSchemaShardRequestSchema, params), opts);
    return toJson(ReloadSchemaShardResponseSchema, response);
  }

  async removeKeyspaceCell(params: RemoveKeyspaceCellRequestJson, opts?: CallOptions): Promise<RemoveKeyspaceCellResponseJson> {
    const response = await this.#client.removeKeyspaceCell(fromJson(RemoveKeyspaceCellRequestSchema, params), opts);
    return toJson(RemoveKeyspaceCellResponseSchema, response);
  }

  async retrySchemaMigration(params: RetrySchemaMigrationRequestJson, opts?: CallOptions): Promise<RetrySchemaMigrationResponseJson> {
    const response = await this.#client.retrySchemaMigration(fromJson(RetrySchemaMigrationRequestSchema, params), opts);
    return toJson(RetrySchemaMigrationResponseSchema, response);
  }

  async runHealthCheck(params: RunHealthCheckRequestJson, opts?: CallOptions): Promise<RunHealthCheckResponseJson> {
    const response = await this.#client.runHealthCheck(fromJson(RunHealthCheckRequestSchema, params), opts);
    return toJson(RunHealthCheckResponseSchema, response);
  }

  async setReadOnly(params: SetReadOnlyRequestJson, opts?: CallOptions): Promise<SetReadOnlyResponseJson> {
    const response = await this.#client.setReadOnly(fromJson(SetReadOnlyRequestSchema, params), opts);
    return toJson(SetReadOnlyResponseSchema, response);
  }

  async setReadWrite(params: SetReadWriteRequestJson, opts?: CallOptions): Promise<SetReadWriteResponseJson> {
    const response = await this.#client.setReadWrite(fromJson(SetReadWriteRequestSchema, params), opts);
    return toJson(SetReadWriteResponseSchema, response);
  }

  async startReplication(params: StartReplicationRequestJson, opts?: CallOptions): Promise<StartReplicationResponseJson> {
    const response = await this.#client.startReplication(fromJson(StartReplicationRequestSchema, params), opts);
    return toJson(StartReplicationResponseSchema, response);
  }

  async stopReplication(params: StopReplicationRequestJson, opts?: CallOptions): Promise<StopReplicationResponseJson> {
    const response = await this.#client.stopReplication(fromJson(StopReplicationRequestSchema, params), opts);
    return toJson(StopReplicationResponseSchema, response);
  }

  async tabletExternallyPromoted(params: TabletExternallyPromotedRequestJson, opts?: CallOptions): Promise<TabletExternallyPromotedResponseJson> {
    const response = await this.#client.tabletExternallyPromoted(fromJson(TabletExternallyPromotedRequestSchema, params), opts);
    return toJson(TabletExternallyPromotedResponseSchema, response);
  }

  async validate(params: ValidateRequestJson, opts?: CallOptions): Promise<ValidateResponseJson> {
    const response = await this.#client.validate(fromJson(ValidateRequestSchema, params), opts);
    return toJson(ValidateResponseSchema, response);
  }

  async validateKeyspace(params: ValidateKeyspaceRequestJson, opts?: CallOptions): Promise<ValidateKeyspaceResponseJson> {
    const response = await this.#client.validateKeyspace(fromJson(ValidateKeyspaceRequestSchema, params), opts);
    return toJson(ValidateKeyspaceResponseSchema, response);
  }

  async validateSchemaKeyspace(params: ValidateSchemaKeyspaceRequestJson, opts?: CallOptions): Promise<ValidateSchemaKeyspaceResponseJson> {
    const response = await this.#client.validateSchemaKeyspace(fromJson(ValidateSchemaKeyspaceRequestSchema, params), opts);
    return toJson(ValidateSchemaKeyspaceResponseSchema, response);
  }

  async validateShard(params: ValidateShardRequestJson, opts?: CallOptions): Promise<ValidateShardResponseJson> {
    const response = await this.#client.validateShard(fromJson(ValidateShardRequestSchema, params), opts);
    return toJson(ValidateShardResponseSchema, response);
  }

  async validateVersionKeyspace(params: ValidateVersionKeyspaceRequestJson, opts?: CallOptions): Promise<ValidateVersionKeyspaceResponseJson> {
    const response = await this.#client.validateVersionKeyspace(fromJson(ValidateVersionKeyspaceRequestSchema, params), opts);
    return toJson(ValidateVersionKeyspaceResponseSchema, response);
  }

  async validateVersionShard(params: ValidateVersionShardRequestJson, opts?: CallOptions): Promise<ValidateVersionShardResponseJson> {
    const response = await this.#client.validateVersionShard(fromJson(ValidateVersionShardRequestSchema, params), opts);
    return toJson(ValidateVersionShardResponseSchema, response);
  }

  async vTExplain(params: VTExplainRequestJson, opts?: CallOptions): Promise<VTExplainResponseJson> {
    const response = await this.#client.vTExplain(fromJson(VTExplainRequestSchema, params), opts);
    return toJson(VTExplainResponseSchema, response);
  }

}
