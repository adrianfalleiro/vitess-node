// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "queryservice.proto" (package "queryservice", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This file contains the service VtTablet exposes for queries.
//
import { GetSchemaResponse } from "./query";
import { GetSchemaRequest } from "./query";
import { VStreamResultsResponse } from "./binlogdata";
import { VStreamResultsRequest } from "./binlogdata";
import { VStreamTablesResponse } from "./binlogdata";
import { VStreamTablesRequest } from "./binlogdata";
import { VStreamRowsResponse } from "./binlogdata";
import { VStreamRowsRequest } from "./binlogdata";
import { VStreamResponse } from "./binlogdata";
import { VStreamRequest } from "./binlogdata";
import { StreamHealthResponse } from "./query";
import { StreamHealthRequest } from "./query";
import { ReleaseResponse } from "./query";
import { ReleaseRequest } from "./query";
import { ReserveBeginStreamExecuteResponse } from "./query";
import { ReserveBeginStreamExecuteRequest } from "./query";
import { ReserveStreamExecuteResponse } from "./query";
import { ReserveStreamExecuteRequest } from "./query";
import { ReserveBeginExecuteResponse } from "./query";
import { ReserveBeginExecuteRequest } from "./query";
import { ReserveExecuteResponse } from "./query";
import { ReserveExecuteRequest } from "./query";
import { MessageAckResponse } from "./query";
import { MessageAckRequest } from "./query";
import { MessageStreamResponse } from "./query";
import { MessageStreamRequest } from "./query";
import { BeginStreamExecuteResponse } from "./query";
import { BeginStreamExecuteRequest } from "./query";
import { BeginExecuteResponse } from "./query";
import { BeginExecuteRequest } from "./query";
import { UnresolvedTransactionsResponse } from "./query";
import { UnresolvedTransactionsRequest } from "./query";
import { ReadTransactionResponse } from "./query";
import { ReadTransactionRequest } from "./query";
import { ConcludeTransactionResponse } from "./query";
import { ConcludeTransactionRequest } from "./query";
import { SetRollbackResponse } from "./query";
import { SetRollbackRequest } from "./query";
import { StartCommitResponse } from "./query";
import { StartCommitRequest } from "./query";
import { CreateTransactionResponse } from "./query";
import { CreateTransactionRequest } from "./query";
import { RollbackPreparedResponse } from "./query";
import { RollbackPreparedRequest } from "./query";
import { CommitPreparedResponse } from "./query";
import { CommitPreparedRequest } from "./query";
import { PrepareResponse } from "./query";
import { PrepareRequest } from "./query";
import { RollbackResponse } from "./query";
import { RollbackRequest } from "./query";
import { CommitResponse } from "./query";
import { CommitRequest } from "./query";
import { BeginResponse } from "./query";
import { BeginRequest } from "./query";
import { StreamExecuteResponse } from "./query";
import { StreamExecuteRequest } from "./query";
import { ExecuteResponse } from "./query";
import { ExecuteRequest } from "./query";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
/**
 * @generated ServiceType for protobuf service queryservice.Query
 */
export const Query = new ServiceType("queryservice.Query", [
    { name: "Execute", options: {}, I: ExecuteRequest, O: ExecuteResponse },
    { name: "StreamExecute", serverStreaming: true, options: {}, I: StreamExecuteRequest, O: StreamExecuteResponse },
    { name: "Begin", options: {}, I: BeginRequest, O: BeginResponse },
    { name: "Commit", options: {}, I: CommitRequest, O: CommitResponse },
    { name: "Rollback", options: {}, I: RollbackRequest, O: RollbackResponse },
    { name: "Prepare", options: {}, I: PrepareRequest, O: PrepareResponse },
    { name: "CommitPrepared", options: {}, I: CommitPreparedRequest, O: CommitPreparedResponse },
    { name: "RollbackPrepared", options: {}, I: RollbackPreparedRequest, O: RollbackPreparedResponse },
    { name: "CreateTransaction", options: {}, I: CreateTransactionRequest, O: CreateTransactionResponse },
    { name: "StartCommit", options: {}, I: StartCommitRequest, O: StartCommitResponse },
    { name: "SetRollback", options: {}, I: SetRollbackRequest, O: SetRollbackResponse },
    { name: "ConcludeTransaction", options: {}, I: ConcludeTransactionRequest, O: ConcludeTransactionResponse },
    { name: "ReadTransaction", options: {}, I: ReadTransactionRequest, O: ReadTransactionResponse },
    { name: "UnresolvedTransactions", options: {}, I: UnresolvedTransactionsRequest, O: UnresolvedTransactionsResponse },
    { name: "BeginExecute", options: {}, I: BeginExecuteRequest, O: BeginExecuteResponse },
    { name: "BeginStreamExecute", serverStreaming: true, options: {}, I: BeginStreamExecuteRequest, O: BeginStreamExecuteResponse },
    { name: "MessageStream", serverStreaming: true, options: {}, I: MessageStreamRequest, O: MessageStreamResponse },
    { name: "MessageAck", options: {}, I: MessageAckRequest, O: MessageAckResponse },
    { name: "ReserveExecute", options: {}, I: ReserveExecuteRequest, O: ReserveExecuteResponse },
    { name: "ReserveBeginExecute", options: {}, I: ReserveBeginExecuteRequest, O: ReserveBeginExecuteResponse },
    { name: "ReserveStreamExecute", serverStreaming: true, options: {}, I: ReserveStreamExecuteRequest, O: ReserveStreamExecuteResponse },
    { name: "ReserveBeginStreamExecute", serverStreaming: true, options: {}, I: ReserveBeginStreamExecuteRequest, O: ReserveBeginStreamExecuteResponse },
    { name: "Release", options: {}, I: ReleaseRequest, O: ReleaseResponse },
    { name: "StreamHealth", serverStreaming: true, options: {}, I: StreamHealthRequest, O: StreamHealthResponse },
    { name: "VStream", serverStreaming: true, options: {}, I: VStreamRequest, O: VStreamResponse },
    { name: "VStreamRows", serverStreaming: true, options: {}, I: VStreamRowsRequest, O: VStreamRowsResponse },
    { name: "VStreamTables", serverStreaming: true, options: {}, I: VStreamTablesRequest, O: VStreamTablesResponse },
    { name: "VStreamResults", serverStreaming: true, options: {}, I: VStreamResultsRequest, O: VStreamResultsResponse },
    { name: "GetSchema", serverStreaming: true, options: {}, I: GetSchemaRequest, O: GetSchemaResponse }
]);
