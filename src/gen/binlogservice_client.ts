//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the UpdateStream service definition, necessary
// to make RPC calls to VtTablet for the binlog protocol, used by
// filtered replication only.

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file binlogservice.proto (package binlogservice, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import { UpdateStream } from "./binlogservice_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import type { StreamKeyRangeRequestJson, StreamKeyRangeResponseJson, StreamTablesRequestJson, StreamTablesResponseJson } from "./binlogdata_pb";
import { StreamKeyRangeRequestSchema, StreamKeyRangeResponseSchema, StreamTablesRequestSchema, StreamTablesResponseSchema } from "./binlogdata_pb";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * UpdateStream is the RPC version of binlog.UpdateStream.
 *
 * @generated from service binlogservice.UpdateStream
 */
export class UpdateStreamClient {
  #client: Client<typeof UpdateStream>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(UpdateStream, transport);
  }

  async *streamKeyRange(params: StreamKeyRangeRequestJson, opts?: CallOptions): AsyncGenerator<StreamKeyRangeResponseJson> {
    const stream = this.#client.streamKeyRange(fromJson(StreamKeyRangeRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(StreamKeyRangeResponseSchema, response);
    }
  }

  async *streamTables(params: StreamTablesRequestJson, opts?: CallOptions): AsyncGenerator<StreamTablesResponseJson> {
    const stream = this.#client.streamTables(fromJson(StreamTablesRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(StreamTablesResponseSchema, response);
    }
  }

}
