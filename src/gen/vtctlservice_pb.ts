//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains a service allowing you to use vtctld as a
// proxy for vt commands.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file vtctlservice.proto (package vtctlservice, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { AddCellInfoRequestSchema, AddCellInfoResponseSchema, AddCellsAliasRequestSchema, AddCellsAliasResponseSchema, ApplyKeyspaceRoutingRulesRequestSchema, ApplyKeyspaceRoutingRulesResponseSchema, ApplyRoutingRulesRequestSchema, ApplyRoutingRulesResponseSchema, ApplySchemaRequestSchema, ApplySchemaResponseSchema, ApplyShardRoutingRulesRequestSchema, ApplyShardRoutingRulesResponseSchema, ApplyVSchemaRequestSchema, ApplyVSchemaResponseSchema, BackupRequestSchema, BackupResponseSchema, BackupShardRequestSchema, CancelSchemaMigrationRequestSchema, CancelSchemaMigrationResponseSchema, ChangeTabletTagsRequestSchema, ChangeTabletTagsResponseSchema, ChangeTabletTypeRequestSchema, ChangeTabletTypeResponseSchema, CheckThrottlerRequestSchema, CheckThrottlerResponseSchema, CleanupSchemaMigrationRequestSchema, CleanupSchemaMigrationResponseSchema, CompleteSchemaMigrationRequestSchema, CompleteSchemaMigrationResponseSchema, ConcludeTransactionRequestSchema, ConcludeTransactionResponseSchema, CreateKeyspaceRequestSchema, CreateKeyspaceResponseSchema, CreateShardRequestSchema, CreateShardResponseSchema, DeleteCellInfoRequestSchema, DeleteCellInfoResponseSchema, DeleteCellsAliasRequestSchema, DeleteCellsAliasResponseSchema, DeleteKeyspaceRequestSchema, DeleteKeyspaceResponseSchema, DeleteShardsRequestSchema, DeleteShardsResponseSchema, DeleteSrvVSchemaRequestSchema, DeleteSrvVSchemaResponseSchema, DeleteTabletsRequestSchema, DeleteTabletsResponseSchema, EmergencyReparentShardRequestSchema, EmergencyReparentShardResponseSchema, ExecuteFetchAsAppRequestSchema, ExecuteFetchAsAppResponseSchema, ExecuteFetchAsDBARequestSchema, ExecuteFetchAsDBAResponseSchema, ExecuteHookRequestSchema, ExecuteHookResponseSchema, ExecuteMultiFetchAsDBARequestSchema, ExecuteMultiFetchAsDBAResponseSchema, ExecuteVtctlCommandRequestSchema, ExecuteVtctlCommandResponseSchema, FindAllShardsInKeyspaceRequestSchema, FindAllShardsInKeyspaceResponseSchema, ForceCutOverSchemaMigrationRequestSchema, ForceCutOverSchemaMigrationResponseSchema, GetBackupsRequestSchema, GetBackupsResponseSchema, GetCellInfoNamesRequestSchema, GetCellInfoNamesResponseSchema, GetCellInfoRequestSchema, GetCellInfoResponseSchema, GetCellsAliasesRequestSchema, GetCellsAliasesResponseSchema, GetFullStatusRequestSchema, GetFullStatusResponseSchema, GetKeyspaceRequestSchema, GetKeyspaceResponseSchema, GetKeyspaceRoutingRulesRequestSchema, GetKeyspaceRoutingRulesResponseSchema, GetKeyspacesRequestSchema, GetKeyspacesResponseSchema, GetMirrorRulesRequestSchema, GetMirrorRulesResponseSchema, GetPermissionsRequestSchema, GetPermissionsResponseSchema, GetRoutingRulesRequestSchema, GetRoutingRulesResponseSchema, GetSchemaMigrationsRequestSchema, GetSchemaMigrationsResponseSchema, GetSchemaRequestSchema, GetSchemaResponseSchema, GetShardReplicationRequestSchema, GetShardReplicationResponseSchema, GetShardRequestSchema, GetShardResponseSchema, GetShardRoutingRulesRequestSchema, GetShardRoutingRulesResponseSchema, GetSrvKeyspaceNamesRequestSchema, GetSrvKeyspaceNamesResponseSchema, GetSrvKeyspacesRequestSchema, GetSrvKeyspacesResponseSchema, GetSrvVSchemaRequestSchema, GetSrvVSchemaResponseSchema, GetSrvVSchemasRequestSchema, GetSrvVSchemasResponseSchema, GetTabletRequestSchema, GetTabletResponseSchema, GetTabletsRequestSchema, GetTabletsResponseSchema, GetThrottlerStatusRequestSchema, GetThrottlerStatusResponseSchema, GetTopologyPathRequestSchema, GetTopologyPathResponseSchema, GetUnresolvedTransactionsRequestSchema, GetUnresolvedTransactionsResponseSchema, GetVersionRequestSchema, GetVersionResponseSchema, GetVSchemaRequestSchema, GetVSchemaResponseSchema, GetWorkflowsRequestSchema, GetWorkflowsResponseSchema, InitShardPrimaryRequestSchema, InitShardPrimaryResponseSchema, LaunchSchemaMigrationRequestSchema, LaunchSchemaMigrationResponseSchema, LookupVindexCreateRequestSchema, LookupVindexCreateResponseSchema, LookupVindexExternalizeRequestSchema, LookupVindexExternalizeResponseSchema, MaterializeCreateRequestSchema, MaterializeCreateResponseSchema, MigrateCreateRequestSchema, MountListRequestSchema, MountListResponseSchema, MountRegisterRequestSchema, MountRegisterResponseSchema, MountShowRequestSchema, MountShowResponseSchema, MountUnregisterRequestSchema, MountUnregisterResponseSchema, MoveTablesCompleteRequestSchema, MoveTablesCompleteResponseSchema, MoveTablesCreateRequestSchema, PingTabletRequestSchema, PingTabletResponseSchema, PlannedReparentShardRequestSchema, PlannedReparentShardResponseSchema, RebuildKeyspaceGraphRequestSchema, RebuildKeyspaceGraphResponseSchema, RebuildVSchemaGraphRequestSchema, RebuildVSchemaGraphResponseSchema, RefreshStateByShardRequestSchema, RefreshStateByShardResponseSchema, RefreshStateRequestSchema, RefreshStateResponseSchema, ReloadSchemaKeyspaceRequestSchema, ReloadSchemaKeyspaceResponseSchema, ReloadSchemaRequestSchema, ReloadSchemaResponseSchema, ReloadSchemaShardRequestSchema, ReloadSchemaShardResponseSchema, RemoveBackupRequestSchema, RemoveBackupResponseSchema, RemoveKeyspaceCellRequestSchema, RemoveKeyspaceCellResponseSchema, RemoveShardCellRequestSchema, RemoveShardCellResponseSchema, ReparentTabletRequestSchema, ReparentTabletResponseSchema, ReshardCreateRequestSchema, RestoreFromBackupRequestSchema, RestoreFromBackupResponseSchema, RetrySchemaMigrationRequestSchema, RetrySchemaMigrationResponseSchema, RunHealthCheckRequestSchema, RunHealthCheckResponseSchema, SetKeyspaceDurabilityPolicyRequestSchema, SetKeyspaceDurabilityPolicyResponseSchema, SetShardIsPrimaryServingRequestSchema, SetShardIsPrimaryServingResponseSchema, SetShardTabletControlRequestSchema, SetShardTabletControlResponseSchema, SetWritableRequestSchema, SetWritableResponseSchema, ShardReplicationAddRequestSchema, ShardReplicationAddResponseSchema, ShardReplicationFixRequestSchema, ShardReplicationFixResponseSchema, ShardReplicationPositionsRequestSchema, ShardReplicationPositionsResponseSchema, ShardReplicationRemoveRequestSchema, ShardReplicationRemoveResponseSchema, SleepTabletRequestSchema, SleepTabletResponseSchema, SourceShardAddRequestSchema, SourceShardAddResponseSchema, SourceShardDeleteRequestSchema, SourceShardDeleteResponseSchema, StartReplicationRequestSchema, StartReplicationResponseSchema, StopReplicationRequestSchema, StopReplicationResponseSchema, TabletExternallyReparentedRequestSchema, TabletExternallyReparentedResponseSchema, UpdateCellInfoRequestSchema, UpdateCellInfoResponseSchema, UpdateCellsAliasRequestSchema, UpdateCellsAliasResponseSchema, UpdateThrottlerConfigRequestSchema, UpdateThrottlerConfigResponseSchema, ValidateKeyspaceRequestSchema, ValidateKeyspaceResponseSchema, ValidateRequestSchema, ValidateResponseSchema, ValidateSchemaKeyspaceRequestSchema, ValidateSchemaKeyspaceResponseSchema, ValidateShardRequestSchema, ValidateShardResponseSchema, ValidateVersionKeyspaceRequestSchema, ValidateVersionKeyspaceResponseSchema, ValidateVersionShardRequestSchema, ValidateVersionShardResponseSchema, ValidateVSchemaRequestSchema, ValidateVSchemaResponseSchema, VDiffCreateRequestSchema, VDiffCreateResponseSchema, VDiffDeleteRequestSchema, VDiffDeleteResponseSchema, VDiffResumeRequestSchema, VDiffResumeResponseSchema, VDiffShowRequestSchema, VDiffShowResponseSchema, VDiffStopRequestSchema, VDiffStopResponseSchema, WorkflowDeleteRequestSchema, WorkflowDeleteResponseSchema, WorkflowMirrorTrafficRequestSchema, WorkflowMirrorTrafficResponseSchema, WorkflowStatusRequestSchema, WorkflowStatusResponseSchema, WorkflowSwitchTrafficRequestSchema, WorkflowSwitchTrafficResponseSchema, WorkflowUpdateRequestSchema, WorkflowUpdateResponseSchema } from "./vtctldata_pb";
import { file_vtctldata } from "./vtctldata_pb";

/**
 * Describes the file vtctlservice.proto.
 */
export const file_vtctlservice: GenFile = /*@__PURE__*/
  fileDesc("", [file_vtctldata]);

/**
 * Service Vtctl allows you to call vt commands through gRPC.
 *
 * @generated from service vtctlservice.Vtctl
 */
export const Vtctl: GenService<{
  /**
   * @generated from rpc vtctlservice.Vtctl.ExecuteVtctlCommand
   */
  executeVtctlCommand: {
    methodKind: "server_streaming";
    input: typeof ExecuteVtctlCommandRequestSchema;
    output: typeof ExecuteVtctlCommandResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_vtctlservice, 0);

/**
 * Service Vtctld exposes gRPC endpoints for each vt command.
 *
 * @generated from service vtctlservice.Vtctld
 */
export const Vtctld: GenService<{
  /**
   * AddCellInfo registers a local topology service in a new cell by creating
   * the CellInfo with the provided parameters.
   *
   * @generated from rpc vtctlservice.Vtctld.AddCellInfo
   */
  addCellInfo: {
    methodKind: "unary";
    input: typeof AddCellInfoRequestSchema;
    output: typeof AddCellInfoResponseSchema;
  },
  /**
   * AddCellsAlias defines a group of cells that can be referenced by a single
   * name (the alias).
   *
   * When routing query traffic, replica/rdonly traffic can be routed across
   * cells within the group (alias). Only primary traffic can be routed across
   * cells not in the same group (alias).
   *
   * @generated from rpc vtctlservice.Vtctld.AddCellsAlias
   */
  addCellsAlias: {
    methodKind: "unary";
    input: typeof AddCellsAliasRequestSchema;
    output: typeof AddCellsAliasResponseSchema;
  },
  /**
   * ApplyRoutingRules applies the VSchema routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.ApplyRoutingRules
   */
  applyRoutingRules: {
    methodKind: "unary";
    input: typeof ApplyRoutingRulesRequestSchema;
    output: typeof ApplyRoutingRulesResponseSchema;
  },
  /**
   * ApplySchema applies a schema to a keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.ApplySchema
   */
  applySchema: {
    methodKind: "unary";
    input: typeof ApplySchemaRequestSchema;
    output: typeof ApplySchemaResponseSchema;
  },
  /**
   * ApplyKeyspaceRoutingRules applies the VSchema keyspace routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.ApplyKeyspaceRoutingRules
   */
  applyKeyspaceRoutingRules: {
    methodKind: "unary";
    input: typeof ApplyKeyspaceRoutingRulesRequestSchema;
    output: typeof ApplyKeyspaceRoutingRulesResponseSchema;
  },
  /**
   * ApplyShardRoutingRules applies the VSchema shard routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.ApplyShardRoutingRules
   */
  applyShardRoutingRules: {
    methodKind: "unary";
    input: typeof ApplyShardRoutingRulesRequestSchema;
    output: typeof ApplyShardRoutingRulesResponseSchema;
  },
  /**
   * ApplyVSchema applies a vschema to a keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.ApplyVSchema
   */
  applyVSchema: {
    methodKind: "unary";
    input: typeof ApplyVSchemaRequestSchema;
    output: typeof ApplyVSchemaResponseSchema;
  },
  /**
   * Backup uses the BackupEngine and BackupStorage services on the specified
   * tablet to create and store a new backup.
   *
   * @generated from rpc vtctlservice.Vtctld.Backup
   */
  backup: {
    methodKind: "server_streaming";
    input: typeof BackupRequestSchema;
    output: typeof BackupResponseSchema;
  },
  /**
   * BackupShard chooses a tablet in the shard and uses it to create a backup.
   *
   * @generated from rpc vtctlservice.Vtctld.BackupShard
   */
  backupShard: {
    methodKind: "server_streaming";
    input: typeof BackupShardRequestSchema;
    output: typeof BackupResponseSchema;
  },
  /**
   * CancelSchemaMigration cancels one or all migrations, terminating any running ones as needed.
   *
   * @generated from rpc vtctlservice.Vtctld.CancelSchemaMigration
   */
  cancelSchemaMigration: {
    methodKind: "unary";
    input: typeof CancelSchemaMigrationRequestSchema;
    output: typeof CancelSchemaMigrationResponseSchema;
  },
  /**
   * ChangeTabletTags changes the tags of the specified tablet, if possible.
   *
   * @generated from rpc vtctlservice.Vtctld.ChangeTabletTags
   */
  changeTabletTags: {
    methodKind: "unary";
    input: typeof ChangeTabletTagsRequestSchema;
    output: typeof ChangeTabletTagsResponseSchema;
  },
  /**
   * ChangeTabletType changes the db type for the specified tablet, if possible.
   * This is used primarily to arrange replicas, and it will not convert a
   * primary. For that, use InitShardPrimary.
   *
   * NOTE: This command automatically updates the serving graph.
   *
   * @generated from rpc vtctlservice.Vtctld.ChangeTabletType
   */
  changeTabletType: {
    methodKind: "unary";
    input: typeof ChangeTabletTypeRequestSchema;
    output: typeof ChangeTabletTypeResponseSchema;
  },
  /**
   * CheckThrottler issues a 'check' on a tablet's throttler
   *
   * @generated from rpc vtctlservice.Vtctld.CheckThrottler
   */
  checkThrottler: {
    methodKind: "unary";
    input: typeof CheckThrottlerRequestSchema;
    output: typeof CheckThrottlerResponseSchema;
  },
  /**
   * CleanupSchemaMigration marks a schema migration as ready for artifact cleanup.
   *
   * @generated from rpc vtctlservice.Vtctld.CleanupSchemaMigration
   */
  cleanupSchemaMigration: {
    methodKind: "unary";
    input: typeof CleanupSchemaMigrationRequestSchema;
    output: typeof CleanupSchemaMigrationResponseSchema;
  },
  /**
   * CompleteSchemaMigration completes one or all migrations executed with --postpone-completion.
   *
   * @generated from rpc vtctlservice.Vtctld.CompleteSchemaMigration
   */
  completeSchemaMigration: {
    methodKind: "unary";
    input: typeof CompleteSchemaMigrationRequestSchema;
    output: typeof CompleteSchemaMigrationResponseSchema;
  },
  /**
   * CompleteSchemaMigration completes one or all migrations executed with --postpone-completion.
   *
   * @generated from rpc vtctlservice.Vtctld.ConcludeTransaction
   */
  concludeTransaction: {
    methodKind: "unary";
    input: typeof ConcludeTransactionRequestSchema;
    output: typeof ConcludeTransactionResponseSchema;
  },
  /**
   * CreateKeyspace creates the specified keyspace in the topology. For a
   * SNAPSHOT keyspace, the request must specify the name of a base keyspace,
   * as well as a snapshot time.
   *
   * @generated from rpc vtctlservice.Vtctld.CreateKeyspace
   */
  createKeyspace: {
    methodKind: "unary";
    input: typeof CreateKeyspaceRequestSchema;
    output: typeof CreateKeyspaceResponseSchema;
  },
  /**
   * CreateShard creates the specified shard in the topology.
   *
   * @generated from rpc vtctlservice.Vtctld.CreateShard
   */
  createShard: {
    methodKind: "unary";
    input: typeof CreateShardRequestSchema;
    output: typeof CreateShardResponseSchema;
  },
  /**
   * DeleteCellInfo deletes the CellInfo for the provided cell. The cell cannot
   * be referenced by any Shard record in the topology.
   *
   * @generated from rpc vtctlservice.Vtctld.DeleteCellInfo
   */
  deleteCellInfo: {
    methodKind: "unary";
    input: typeof DeleteCellInfoRequestSchema;
    output: typeof DeleteCellInfoResponseSchema;
  },
  /**
   * DeleteCellsAlias deletes the CellsAlias for the provided alias.
   *
   * @generated from rpc vtctlservice.Vtctld.DeleteCellsAlias
   */
  deleteCellsAlias: {
    methodKind: "unary";
    input: typeof DeleteCellsAliasRequestSchema;
    output: typeof DeleteCellsAliasResponseSchema;
  },
  /**
   * DeleteKeyspace deletes the specified keyspace from the topology. In
   * recursive mode, it also recursively deletes all shards in the keyspace.
   * Otherwise, the keyspace must be empty (have no shards), or DeleteKeyspace
   * returns an error.
   *
   * @generated from rpc vtctlservice.Vtctld.DeleteKeyspace
   */
  deleteKeyspace: {
    methodKind: "unary";
    input: typeof DeleteKeyspaceRequestSchema;
    output: typeof DeleteKeyspaceResponseSchema;
  },
  /**
   * DeleteShards deletes the specified shards from the topology. In recursive
   * mode, it also deletes all tablets belonging to the shard. Otherwise, the
   * shard must be empty (have no tablets) or DeleteShards returns an error for
   * that shard.
   *
   * @generated from rpc vtctlservice.Vtctld.DeleteShards
   */
  deleteShards: {
    methodKind: "unary";
    input: typeof DeleteShardsRequestSchema;
    output: typeof DeleteShardsResponseSchema;
  },
  /**
   * DeleteSrvVSchema deletes the SrvVSchema object in the specified cell.
   *
   * @generated from rpc vtctlservice.Vtctld.DeleteSrvVSchema
   */
  deleteSrvVSchema: {
    methodKind: "unary";
    input: typeof DeleteSrvVSchemaRequestSchema;
    output: typeof DeleteSrvVSchemaResponseSchema;
  },
  /**
   * DeleteTablets deletes one or more tablets from the topology.
   *
   * @generated from rpc vtctlservice.Vtctld.DeleteTablets
   */
  deleteTablets: {
    methodKind: "unary";
    input: typeof DeleteTabletsRequestSchema;
    output: typeof DeleteTabletsResponseSchema;
  },
  /**
   * EmergencyReparentShard reparents the shard to the new primary. It assumes
   * the old primary is dead or otherwise not responding.
   *
   * @generated from rpc vtctlservice.Vtctld.EmergencyReparentShard
   */
  emergencyReparentShard: {
    methodKind: "unary";
    input: typeof EmergencyReparentShardRequestSchema;
    output: typeof EmergencyReparentShardResponseSchema;
  },
  /**
   * ExecuteFetchAsApp executes a SQL query on the remote tablet as the App user.
   *
   * @generated from rpc vtctlservice.Vtctld.ExecuteFetchAsApp
   */
  executeFetchAsApp: {
    methodKind: "unary";
    input: typeof ExecuteFetchAsAppRequestSchema;
    output: typeof ExecuteFetchAsAppResponseSchema;
  },
  /**
   * ExecuteFetchAsDBA executes a SQL query on the remote tablet as the DBA user.
   *
   * @generated from rpc vtctlservice.Vtctld.ExecuteFetchAsDBA
   */
  executeFetchAsDBA: {
    methodKind: "unary";
    input: typeof ExecuteFetchAsDBARequestSchema;
    output: typeof ExecuteFetchAsDBAResponseSchema;
  },
  /**
   * ExecuteHook runs the hook on the tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.ExecuteHook
   */
  executeHook: {
    methodKind: "unary";
    input: typeof ExecuteHookRequestSchema;
    output: typeof ExecuteHookResponseSchema;
  },
  /**
   * ExecuteMultiFetchAsDBA executes one or more SQL queries on the remote tablet as the DBA user.
   *
   * @generated from rpc vtctlservice.Vtctld.ExecuteMultiFetchAsDBA
   */
  executeMultiFetchAsDBA: {
    methodKind: "unary";
    input: typeof ExecuteMultiFetchAsDBARequestSchema;
    output: typeof ExecuteMultiFetchAsDBAResponseSchema;
  },
  /**
   * FindAllShardsInKeyspace returns a map of shard names to shard references
   * for a given keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.FindAllShardsInKeyspace
   */
  findAllShardsInKeyspace: {
    methodKind: "unary";
    input: typeof FindAllShardsInKeyspaceRequestSchema;
    output: typeof FindAllShardsInKeyspaceResponseSchema;
  },
  /**
   * ForceCutOverSchemaMigration marks a schema migration for forced cut-over.
   *
   * @generated from rpc vtctlservice.Vtctld.ForceCutOverSchemaMigration
   */
  forceCutOverSchemaMigration: {
    methodKind: "unary";
    input: typeof ForceCutOverSchemaMigrationRequestSchema;
    output: typeof ForceCutOverSchemaMigrationResponseSchema;
  },
  /**
   * GetBackups returns all the backups for a shard.
   *
   * @generated from rpc vtctlservice.Vtctld.GetBackups
   */
  getBackups: {
    methodKind: "unary";
    input: typeof GetBackupsRequestSchema;
    output: typeof GetBackupsResponseSchema;
  },
  /**
   * GetCellInfo returns the information for a cell.
   *
   * @generated from rpc vtctlservice.Vtctld.GetCellInfo
   */
  getCellInfo: {
    methodKind: "unary";
    input: typeof GetCellInfoRequestSchema;
    output: typeof GetCellInfoResponseSchema;
  },
  /**
   * GetCellInfoNames returns all the cells for which we have a CellInfo object,
   * meaning we have a topology service registered.
   *
   * @generated from rpc vtctlservice.Vtctld.GetCellInfoNames
   */
  getCellInfoNames: {
    methodKind: "unary";
    input: typeof GetCellInfoNamesRequestSchema;
    output: typeof GetCellInfoNamesResponseSchema;
  },
  /**
   * GetCellsAliases returns a mapping of cell alias to cells identified by that
   * alias.
   *
   * @generated from rpc vtctlservice.Vtctld.GetCellsAliases
   */
  getCellsAliases: {
    methodKind: "unary";
    input: typeof GetCellsAliasesRequestSchema;
    output: typeof GetCellsAliasesResponseSchema;
  },
  /**
   * GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
   *
   * @generated from rpc vtctlservice.Vtctld.GetFullStatus
   */
  getFullStatus: {
    methodKind: "unary";
    input: typeof GetFullStatusRequestSchema;
    output: typeof GetFullStatusResponseSchema;
  },
  /**
   * GetKeyspace reads the given keyspace from the topo and returns it.
   *
   * @generated from rpc vtctlservice.Vtctld.GetKeyspace
   */
  getKeyspace: {
    methodKind: "unary";
    input: typeof GetKeyspaceRequestSchema;
    output: typeof GetKeyspaceResponseSchema;
  },
  /**
   * GetKeyspaces returns the keyspace struct of all keyspaces in the topo.
   *
   * @generated from rpc vtctlservice.Vtctld.GetKeyspaces
   */
  getKeyspaces: {
    methodKind: "unary";
    input: typeof GetKeyspacesRequestSchema;
    output: typeof GetKeyspacesResponseSchema;
  },
  /**
   * GetKeyspaceRoutingRules returns the VSchema keyspace routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.GetKeyspaceRoutingRules
   */
  getKeyspaceRoutingRules: {
    methodKind: "unary";
    input: typeof GetKeyspaceRoutingRulesRequestSchema;
    output: typeof GetKeyspaceRoutingRulesResponseSchema;
  },
  /**
   * GetPermissions returns the permissions set on the remote tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.GetPermissions
   */
  getPermissions: {
    methodKind: "unary";
    input: typeof GetPermissionsRequestSchema;
    output: typeof GetPermissionsResponseSchema;
  },
  /**
   * GetRoutingRules returns the VSchema routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.GetRoutingRules
   */
  getRoutingRules: {
    methodKind: "unary";
    input: typeof GetRoutingRulesRequestSchema;
    output: typeof GetRoutingRulesResponseSchema;
  },
  /**
   * GetSchema returns the schema for a tablet, or just the schema for the
   * specified tables in that tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.GetSchema
   */
  getSchema: {
    methodKind: "unary";
    input: typeof GetSchemaRequestSchema;
    output: typeof GetSchemaResponseSchema;
  },
  /**
   * GetSchemaMigrations returns one or more online schema migrations for the
   * specified keyspace, analagous to `SHOW VITESS_MIGRATIONS`.
   *
   * Different fields in the request message result in different filtering
   * behaviors. See the documentation on GetSchemaMigrationsRequest for details.
   *
   * @generated from rpc vtctlservice.Vtctld.GetSchemaMigrations
   */
  getSchemaMigrations: {
    methodKind: "unary";
    input: typeof GetSchemaMigrationsRequestSchema;
    output: typeof GetSchemaMigrationsResponseSchema;
  },
  /**
   * GetShardReplication returns the replication graph for a shard in a cell.
   *
   * @generated from rpc vtctlservice.Vtctld.GetShardReplication
   */
  getShardReplication: {
    methodKind: "unary";
    input: typeof GetShardReplicationRequestSchema;
    output: typeof GetShardReplicationResponseSchema;
  },
  /**
   * GetShard returns information about a shard in the topology.
   *
   * @generated from rpc vtctlservice.Vtctld.GetShard
   */
  getShard: {
    methodKind: "unary";
    input: typeof GetShardRequestSchema;
    output: typeof GetShardResponseSchema;
  },
  /**
   * GetShardRoutingRules returns the VSchema shard routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.GetShardRoutingRules
   */
  getShardRoutingRules: {
    methodKind: "unary";
    input: typeof GetShardRoutingRulesRequestSchema;
    output: typeof GetShardRoutingRulesResponseSchema;
  },
  /**
   * GetSrvKeyspaceNames returns a mapping of cell name to the keyspaces served
   * in that cell.
   *
   * @generated from rpc vtctlservice.Vtctld.GetSrvKeyspaceNames
   */
  getSrvKeyspaceNames: {
    methodKind: "unary";
    input: typeof GetSrvKeyspaceNamesRequestSchema;
    output: typeof GetSrvKeyspaceNamesResponseSchema;
  },
  /**
   * GetSrvKeyspaces returns the SrvKeyspaces for a keyspace in one or more
   * cells.
   *
   * @generated from rpc vtctlservice.Vtctld.GetSrvKeyspaces
   */
  getSrvKeyspaces: {
    methodKind: "unary";
    input: typeof GetSrvKeyspacesRequestSchema;
    output: typeof GetSrvKeyspacesResponseSchema;
  },
  /**
   * UpdateThrottlerConfig updates the tablet throttler configuration
   *
   * @generated from rpc vtctlservice.Vtctld.UpdateThrottlerConfig
   */
  updateThrottlerConfig: {
    methodKind: "unary";
    input: typeof UpdateThrottlerConfigRequestSchema;
    output: typeof UpdateThrottlerConfigResponseSchema;
  },
  /**
   * GetSrvVSchema returns the SrvVSchema for a cell.
   *
   * @generated from rpc vtctlservice.Vtctld.GetSrvVSchema
   */
  getSrvVSchema: {
    methodKind: "unary";
    input: typeof GetSrvVSchemaRequestSchema;
    output: typeof GetSrvVSchemaResponseSchema;
  },
  /**
   * GetSrvVSchemas returns a mapping from cell name to SrvVSchema for all cells,
   * optionally filtered by cell name.
   *
   * @generated from rpc vtctlservice.Vtctld.GetSrvVSchemas
   */
  getSrvVSchemas: {
    methodKind: "unary";
    input: typeof GetSrvVSchemasRequestSchema;
    output: typeof GetSrvVSchemasResponseSchema;
  },
  /**
   * GetTablet returns information about a tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.GetTablet
   */
  getTablet: {
    methodKind: "unary";
    input: typeof GetTabletRequestSchema;
    output: typeof GetTabletResponseSchema;
  },
  /**
   * GetTablets returns tablets, optionally filtered by keyspace and shard.
   *
   * @generated from rpc vtctlservice.Vtctld.GetTablets
   */
  getTablets: {
    methodKind: "unary";
    input: typeof GetTabletsRequestSchema;
    output: typeof GetTabletsResponseSchema;
  },
  /**
   * GetThrottlerStatus gets the status of a tablet throttler
   *
   * @generated from rpc vtctlservice.Vtctld.GetThrottlerStatus
   */
  getThrottlerStatus: {
    methodKind: "unary";
    input: typeof GetThrottlerStatusRequestSchema;
    output: typeof GetThrottlerStatusResponseSchema;
  },
  /**
   * GetTopologyPath returns the topology cell at a given path.
   *
   * @generated from rpc vtctlservice.Vtctld.GetTopologyPath
   */
  getTopologyPath: {
    methodKind: "unary";
    input: typeof GetTopologyPathRequestSchema;
    output: typeof GetTopologyPathResponseSchema;
  },
  /**
   * GetTransactions returns the unresolved transactions for the request.
   *
   * @generated from rpc vtctlservice.Vtctld.GetUnresolvedTransactions
   */
  getUnresolvedTransactions: {
    methodKind: "unary";
    input: typeof GetUnresolvedTransactionsRequestSchema;
    output: typeof GetUnresolvedTransactionsResponseSchema;
  },
  /**
   * GetVersion returns the version of a tablet from its debug vars.
   *
   * @generated from rpc vtctlservice.Vtctld.GetVersion
   */
  getVersion: {
    methodKind: "unary";
    input: typeof GetVersionRequestSchema;
    output: typeof GetVersionResponseSchema;
  },
  /**
   * GetVSchema returns the vschema for a keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.GetVSchema
   */
  getVSchema: {
    methodKind: "unary";
    input: typeof GetVSchemaRequestSchema;
    output: typeof GetVSchemaResponseSchema;
  },
  /**
   * GetWorkflows returns a list of workflows for the given keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.GetWorkflows
   */
  getWorkflows: {
    methodKind: "unary";
    input: typeof GetWorkflowsRequestSchema;
    output: typeof GetWorkflowsResponseSchema;
  },
  /**
   * InitShardPrimary sets the initial primary for a shard. Will make all other
   * tablets in the shard replicas of the provided primary.
   *
   * WARNING: This could cause data loss on an already replicating shard.
   * PlannedReparentShard or EmergencyReparentShard should be used in those
   * cases instead.
   *
   * @generated from rpc vtctlservice.Vtctld.InitShardPrimary
   */
  initShardPrimary: {
    methodKind: "unary";
    input: typeof InitShardPrimaryRequestSchema;
    output: typeof InitShardPrimaryResponseSchema;
  },
  /**
   * LaunchSchemaMigration launches one or all migrations executed with --postpone-launch.
   *
   * @generated from rpc vtctlservice.Vtctld.LaunchSchemaMigration
   */
  launchSchemaMigration: {
    methodKind: "unary";
    input: typeof LaunchSchemaMigrationRequestSchema;
    output: typeof LaunchSchemaMigrationResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.LookupVindexCreate
   */
  lookupVindexCreate: {
    methodKind: "unary";
    input: typeof LookupVindexCreateRequestSchema;
    output: typeof LookupVindexCreateResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.LookupVindexExternalize
   */
  lookupVindexExternalize: {
    methodKind: "unary";
    input: typeof LookupVindexExternalizeRequestSchema;
    output: typeof LookupVindexExternalizeResponseSchema;
  },
  /**
   * MaterializeCreate creates a workflow to materialize one or more tables
   * from a source keyspace to a target keyspace using a provided expressions.
   *
   * @generated from rpc vtctlservice.Vtctld.MaterializeCreate
   */
  materializeCreate: {
    methodKind: "unary";
    input: typeof MaterializeCreateRequestSchema;
    output: typeof MaterializeCreateResponseSchema;
  },
  /**
   * MigrateCreate creates a workflow which migrates one or more tables from an
   * external cluster into Vitess.
   *
   * @generated from rpc vtctlservice.Vtctld.MigrateCreate
   */
  migrateCreate: {
    methodKind: "unary";
    input: typeof MigrateCreateRequestSchema;
    output: typeof WorkflowStatusResponseSchema;
  },
  /**
   * MountRegister registers a new external Vitess cluster.
   *
   * @generated from rpc vtctlservice.Vtctld.MountRegister
   */
  mountRegister: {
    methodKind: "unary";
    input: typeof MountRegisterRequestSchema;
    output: typeof MountRegisterResponseSchema;
  },
  /**
   * MountUnregister unregisters an external Vitess cluster.
   *
   * @generated from rpc vtctlservice.Vtctld.MountUnregister
   */
  mountUnregister: {
    methodKind: "unary";
    input: typeof MountUnregisterRequestSchema;
    output: typeof MountUnregisterResponseSchema;
  },
  /**
   * MountShow returns information about an external Vitess cluster.
   *
   * @generated from rpc vtctlservice.Vtctld.MountShow
   */
  mountShow: {
    methodKind: "unary";
    input: typeof MountShowRequestSchema;
    output: typeof MountShowResponseSchema;
  },
  /**
   * MountList lists all registered external Vitess clusters.
   *
   * @generated from rpc vtctlservice.Vtctld.MountList
   */
  mountList: {
    methodKind: "unary";
    input: typeof MountListRequestSchema;
    output: typeof MountListResponseSchema;
  },
  /**
   * MoveTablesCreate creates a workflow which moves one or more tables from a
   * source keyspace to a target keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.MoveTablesCreate
   */
  moveTablesCreate: {
    methodKind: "unary";
    input: typeof MoveTablesCreateRequestSchema;
    output: typeof WorkflowStatusResponseSchema;
  },
  /**
   * MoveTablesComplete completes the move and cleans up the workflow and
   * its related artifacts.
   *
   * @generated from rpc vtctlservice.Vtctld.MoveTablesComplete
   */
  moveTablesComplete: {
    methodKind: "unary";
    input: typeof MoveTablesCompleteRequestSchema;
    output: typeof MoveTablesCompleteResponseSchema;
  },
  /**
   * PingTablet checks that the specified tablet is awake and responding to RPCs.
   * This command can be blocked by other in-flight operations.
   *
   * @generated from rpc vtctlservice.Vtctld.PingTablet
   */
  pingTablet: {
    methodKind: "unary";
    input: typeof PingTabletRequestSchema;
    output: typeof PingTabletResponseSchema;
  },
  /**
   * PlannedReparentShard reparents the shard to the new primary, or away from
   * an old primary. Both the old and new primaries need to be reachable and
   * running.
   *
   * **NOTE**: The vtctld will not consider any replicas outside the cell the
   * current shard primary is in for promotion unless NewPrimary is explicitly
   * provided in the request.
   *
   * @generated from rpc vtctlservice.Vtctld.PlannedReparentShard
   */
  plannedReparentShard: {
    methodKind: "unary";
    input: typeof PlannedReparentShardRequestSchema;
    output: typeof PlannedReparentShardResponseSchema;
  },
  /**
   * RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
   *
   * This may trigger an update to all connected clients.
   *
   * @generated from rpc vtctlservice.Vtctld.RebuildKeyspaceGraph
   */
  rebuildKeyspaceGraph: {
    methodKind: "unary";
    input: typeof RebuildKeyspaceGraphRequestSchema;
    output: typeof RebuildKeyspaceGraphResponseSchema;
  },
  /**
   * RebuildVSchemaGraph rebuilds the per-cell SrvVSchema from the global
   * VSchema objects in the provided cells (or all cells in the topo none
   * provided).
   *
   * @generated from rpc vtctlservice.Vtctld.RebuildVSchemaGraph
   */
  rebuildVSchemaGraph: {
    methodKind: "unary";
    input: typeof RebuildVSchemaGraphRequestSchema;
    output: typeof RebuildVSchemaGraphResponseSchema;
  },
  /**
   * RefreshState reloads the tablet record on the specified tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.RefreshState
   */
  refreshState: {
    methodKind: "unary";
    input: typeof RefreshStateRequestSchema;
    output: typeof RefreshStateResponseSchema;
  },
  /**
   * RefreshStateByShard calls RefreshState on all the tablets in the given shard.
   *
   * @generated from rpc vtctlservice.Vtctld.RefreshStateByShard
   */
  refreshStateByShard: {
    methodKind: "unary";
    input: typeof RefreshStateByShardRequestSchema;
    output: typeof RefreshStateByShardResponseSchema;
  },
  /**
   * ReloadSchema instructs the remote tablet to reload its schema.
   *
   * @generated from rpc vtctlservice.Vtctld.ReloadSchema
   */
  reloadSchema: {
    methodKind: "unary";
    input: typeof ReloadSchemaRequestSchema;
    output: typeof ReloadSchemaResponseSchema;
  },
  /**
   * ReloadSchemaKeyspace reloads the schema on all tablets in a keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.ReloadSchemaKeyspace
   */
  reloadSchemaKeyspace: {
    methodKind: "unary";
    input: typeof ReloadSchemaKeyspaceRequestSchema;
    output: typeof ReloadSchemaKeyspaceResponseSchema;
  },
  /**
   * ReloadSchemaShard reloads the schema on all tablets in a shard.
   *
   * In general, we don't always expect all replicas to be ready to reload, and
   * the periodic schema reload makes them self-healing anyway. So, we do this
   * on a best-effort basis, and log warnings for any tablets that fail to
   * reload within the context deadline.
   *
   * @generated from rpc vtctlservice.Vtctld.ReloadSchemaShard
   */
  reloadSchemaShard: {
    methodKind: "unary";
    input: typeof ReloadSchemaShardRequestSchema;
    output: typeof ReloadSchemaShardResponseSchema;
  },
  /**
   * RemoveBackup removes a backup from the BackupStorage used by vtctld.
   *
   * @generated from rpc vtctlservice.Vtctld.RemoveBackup
   */
  removeBackup: {
    methodKind: "unary";
    input: typeof RemoveBackupRequestSchema;
    output: typeof RemoveBackupResponseSchema;
  },
  /**
   * RemoveKeyspaceCell removes the specified cell from the Cells list for all
   * shards in the specified keyspace (by calling RemoveShardCell on every
   * shard). It also removes the SrvKeyspace for that keyspace in that cell.
   *
   * @generated from rpc vtctlservice.Vtctld.RemoveKeyspaceCell
   */
  removeKeyspaceCell: {
    methodKind: "unary";
    input: typeof RemoveKeyspaceCellRequestSchema;
    output: typeof RemoveKeyspaceCellResponseSchema;
  },
  /**
   * RemoveShardCell removes the specified cell from the specified shard's Cells
   * list.
   *
   * @generated from rpc vtctlservice.Vtctld.RemoveShardCell
   */
  removeShardCell: {
    methodKind: "unary";
    input: typeof RemoveShardCellRequestSchema;
    output: typeof RemoveShardCellResponseSchema;
  },
  /**
   * ReparentTablet reparents a tablet to the current primary in the shard. This
   * only works if the current replica position matches the last known reparent
   * action.
   *
   * @generated from rpc vtctlservice.Vtctld.ReparentTablet
   */
  reparentTablet: {
    methodKind: "unary";
    input: typeof ReparentTabletRequestSchema;
    output: typeof ReparentTabletResponseSchema;
  },
  /**
   * ReshardCreate creates a workflow to reshard a keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.ReshardCreate
   */
  reshardCreate: {
    methodKind: "unary";
    input: typeof ReshardCreateRequestSchema;
    output: typeof WorkflowStatusResponseSchema;
  },
  /**
   * RestoreFromBackup stops mysqld for the given tablet and restores a backup.
   *
   * @generated from rpc vtctlservice.Vtctld.RestoreFromBackup
   */
  restoreFromBackup: {
    methodKind: "server_streaming";
    input: typeof RestoreFromBackupRequestSchema;
    output: typeof RestoreFromBackupResponseSchema;
  },
  /**
   * RetrySchemaMigration marks a given schema migration for retry.
   *
   * @generated from rpc vtctlservice.Vtctld.RetrySchemaMigration
   */
  retrySchemaMigration: {
    methodKind: "unary";
    input: typeof RetrySchemaMigrationRequestSchema;
    output: typeof RetrySchemaMigrationResponseSchema;
  },
  /**
   * RunHealthCheck runs a healthcheck on the remote tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.RunHealthCheck
   */
  runHealthCheck: {
    methodKind: "unary";
    input: typeof RunHealthCheckRequestSchema;
    output: typeof RunHealthCheckResponseSchema;
  },
  /**
   * SetKeyspaceDurabilityPolicy updates the DurabilityPolicy for a keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.SetKeyspaceDurabilityPolicy
   */
  setKeyspaceDurabilityPolicy: {
    methodKind: "unary";
    input: typeof SetKeyspaceDurabilityPolicyRequestSchema;
    output: typeof SetKeyspaceDurabilityPolicyResponseSchema;
  },
  /**
   * SetShardIsPrimaryServing adds or removes a shard from serving.
   *
   * This is meant as an emergency function. It does not rebuild any serving
   * graph (i.e. it does not run RebuildKeyspaceGraph).
   *
   * @generated from rpc vtctlservice.Vtctld.SetShardIsPrimaryServing
   */
  setShardIsPrimaryServing: {
    methodKind: "unary";
    input: typeof SetShardIsPrimaryServingRequestSchema;
    output: typeof SetShardIsPrimaryServingResponseSchema;
  },
  /**
   * SetShardTabletControl updates the TabletControl topo record for a shard and
   * tablet type.
   *
   * This should only be used for an emergency fix, or after a finished
   * Reshard. See the documentation on SetShardTabletControlRequest for more
   * information about the different update modes.
   *
   * @generated from rpc vtctlservice.Vtctld.SetShardTabletControl
   */
  setShardTabletControl: {
    methodKind: "unary";
    input: typeof SetShardTabletControlRequestSchema;
    output: typeof SetShardTabletControlResponseSchema;
  },
  /**
   * SetWritable sets a tablet as read-write (writable=true) or read-only (writable=false).
   *
   * @generated from rpc vtctlservice.Vtctld.SetWritable
   */
  setWritable: {
    methodKind: "unary";
    input: typeof SetWritableRequestSchema;
    output: typeof SetWritableResponseSchema;
  },
  /**
   * ShardReplicationAdd adds an entry to a topodata.ShardReplication object.
   *
   * It is a low-level function and should generally not be called.
   *
   * @generated from rpc vtctlservice.Vtctld.ShardReplicationAdd
   */
  shardReplicationAdd: {
    methodKind: "unary";
    input: typeof ShardReplicationAddRequestSchema;
    output: typeof ShardReplicationAddResponseSchema;
  },
  /**
   * ShardReplicationFix walks the replication graph for a shard in a cell and
   * attempts to fix the first problem encountered, returning information about
   * the problem fixed, if any.
   *
   * @generated from rpc vtctlservice.Vtctld.ShardReplicationFix
   */
  shardReplicationFix: {
    methodKind: "unary";
    input: typeof ShardReplicationFixRequestSchema;
    output: typeof ShardReplicationFixResponseSchema;
  },
  /**
   * ShardReplicationPositions returns the replication position of each tablet
   * in a shard. This RPC makes a best-effort to return partial results. For
   * example, if one tablet in the shard graph is unreachable, then
   * ShardReplicationPositions will return non-error, and include valid results
   * for the reachable tablets.
   *
   * @generated from rpc vtctlservice.Vtctld.ShardReplicationPositions
   */
  shardReplicationPositions: {
    methodKind: "unary";
    input: typeof ShardReplicationPositionsRequestSchema;
    output: typeof ShardReplicationPositionsResponseSchema;
  },
  /**
   * ShardReplicationRemove removes an entry from a topodata.ShardReplication
   * object.
   *
   * It is a low-level function and should generally not be called.
   *
   * @generated from rpc vtctlservice.Vtctld.ShardReplicationRemove
   */
  shardReplicationRemove: {
    methodKind: "unary";
    input: typeof ShardReplicationRemoveRequestSchema;
    output: typeof ShardReplicationRemoveResponseSchema;
  },
  /**
   * SleepTablet blocks the aciton queue on the specified tablet for the
   * specified duration.
   *
   * This is typically used for testing.
   *
   * @generated from rpc vtctlservice.Vtctld.SleepTablet
   */
  sleepTablet: {
    methodKind: "unary";
    input: typeof SleepTabletRequestSchema;
    output: typeof SleepTabletResponseSchema;
  },
  /**
   * SourceShardAdd adds the SourceShard record with the provided index. This
   * should be used only as an emergency function.
   *
   * It does not call RefreshState for the shard primary.
   *
   * @generated from rpc vtctlservice.Vtctld.SourceShardAdd
   */
  sourceShardAdd: {
    methodKind: "unary";
    input: typeof SourceShardAddRequestSchema;
    output: typeof SourceShardAddResponseSchema;
  },
  /**
   * SourceShardDelete deletes the SourceShard record with the provided index.
   * This should be used only as an emergency cleanup function.
   *
   * It does not call RefreshState for the shard primary.
   *
   * @generated from rpc vtctlservice.Vtctld.SourceShardDelete
   */
  sourceShardDelete: {
    methodKind: "unary";
    input: typeof SourceShardDeleteRequestSchema;
    output: typeof SourceShardDeleteResponseSchema;
  },
  /**
   * StartReplication starts replication on the specified tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.StartReplication
   */
  startReplication: {
    methodKind: "unary";
    input: typeof StartReplicationRequestSchema;
    output: typeof StartReplicationResponseSchema;
  },
  /**
   * StopReplication stops replication on the specified tablet.
   *
   * @generated from rpc vtctlservice.Vtctld.StopReplication
   */
  stopReplication: {
    methodKind: "unary";
    input: typeof StopReplicationRequestSchema;
    output: typeof StopReplicationResponseSchema;
  },
  /**
   * TabletExternallyReparented changes metadata in the topology server to
   * acknowledge a shard primary change performed by an external tool (e.g.
   * orchestrator).
   *
   * See the Reparenting guide for more information:
   * https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
   *
   * @generated from rpc vtctlservice.Vtctld.TabletExternallyReparented
   */
  tabletExternallyReparented: {
    methodKind: "unary";
    input: typeof TabletExternallyReparentedRequestSchema;
    output: typeof TabletExternallyReparentedResponseSchema;
  },
  /**
   * UpdateCellInfo updates the content of a CellInfo with the provided
   * parameters. Empty values are ignored. If the cell does not exist, the
   * CellInfo will be created.
   *
   * @generated from rpc vtctlservice.Vtctld.UpdateCellInfo
   */
  updateCellInfo: {
    methodKind: "unary";
    input: typeof UpdateCellInfoRequestSchema;
    output: typeof UpdateCellInfoResponseSchema;
  },
  /**
   * UpdateCellsAlias updates the content of a CellsAlias with the provided
   * parameters. Empty values are ignored. If the alias does not exist, the
   * CellsAlias will be created.
   *
   * @generated from rpc vtctlservice.Vtctld.UpdateCellsAlias
   */
  updateCellsAlias: {
    methodKind: "unary";
    input: typeof UpdateCellsAliasRequestSchema;
    output: typeof UpdateCellsAliasResponseSchema;
  },
  /**
   * Validate validates that all nodes from the global replication graph are
   * reachable, and that all tablets in discoverable cells are consistent.
   *
   * @generated from rpc vtctlservice.Vtctld.Validate
   */
  validate: {
    methodKind: "unary";
    input: typeof ValidateRequestSchema;
    output: typeof ValidateResponseSchema;
  },
  /**
   * ValidateKeyspace validates that all nodes reachable from the specified
   * keyspace are consistent.
   *
   * @generated from rpc vtctlservice.Vtctld.ValidateKeyspace
   */
  validateKeyspace: {
    methodKind: "unary";
    input: typeof ValidateKeyspaceRequestSchema;
    output: typeof ValidateKeyspaceResponseSchema;
  },
  /**
   * ValidateSchemaKeyspace validates that the schema on the primary tablet for shard 0 matches the schema on all of the other tablets in the keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.ValidateSchemaKeyspace
   */
  validateSchemaKeyspace: {
    methodKind: "unary";
    input: typeof ValidateSchemaKeyspaceRequestSchema;
    output: typeof ValidateSchemaKeyspaceResponseSchema;
  },
  /**
   * ValidateShard validates that all nodes reachable from the specified shard
   * are consistent.
   *
   * @generated from rpc vtctlservice.Vtctld.ValidateShard
   */
  validateShard: {
    methodKind: "unary";
    input: typeof ValidateShardRequestSchema;
    output: typeof ValidateShardResponseSchema;
  },
  /**
   * ValidateVersionKeyspace validates that the version on the primary of shard 0 matches all of the other tablets in the keyspace.
   *
   * @generated from rpc vtctlservice.Vtctld.ValidateVersionKeyspace
   */
  validateVersionKeyspace: {
    methodKind: "unary";
    input: typeof ValidateVersionKeyspaceRequestSchema;
    output: typeof ValidateVersionKeyspaceResponseSchema;
  },
  /**
   * ValidateVersionShard validates that the version on the primary matches all of the replicas.
   *
   * @generated from rpc vtctlservice.Vtctld.ValidateVersionShard
   */
  validateVersionShard: {
    methodKind: "unary";
    input: typeof ValidateVersionShardRequestSchema;
    output: typeof ValidateVersionShardResponseSchema;
  },
  /**
   * ValidateVSchema compares the schema of each primary tablet in "keyspace/shards..." to the vschema and errs if there are differences.
   *
   * @generated from rpc vtctlservice.Vtctld.ValidateVSchema
   */
  validateVSchema: {
    methodKind: "unary";
    input: typeof ValidateVSchemaRequestSchema;
    output: typeof ValidateVSchemaResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.VDiffCreate
   */
  vDiffCreate: {
    methodKind: "unary";
    input: typeof VDiffCreateRequestSchema;
    output: typeof VDiffCreateResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.VDiffDelete
   */
  vDiffDelete: {
    methodKind: "unary";
    input: typeof VDiffDeleteRequestSchema;
    output: typeof VDiffDeleteResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.VDiffResume
   */
  vDiffResume: {
    methodKind: "unary";
    input: typeof VDiffResumeRequestSchema;
    output: typeof VDiffResumeResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.VDiffShow
   */
  vDiffShow: {
    methodKind: "unary";
    input: typeof VDiffShowRequestSchema;
    output: typeof VDiffShowResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.VDiffStop
   */
  vDiffStop: {
    methodKind: "unary";
    input: typeof VDiffStopRequestSchema;
    output: typeof VDiffStopResponseSchema;
  },
  /**
   * WorkflowDelete deletes a vreplication workflow.
   *
   * @generated from rpc vtctlservice.Vtctld.WorkflowDelete
   */
  workflowDelete: {
    methodKind: "unary";
    input: typeof WorkflowDeleteRequestSchema;
    output: typeof WorkflowDeleteResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.WorkflowStatus
   */
  workflowStatus: {
    methodKind: "unary";
    input: typeof WorkflowStatusRequestSchema;
    output: typeof WorkflowStatusResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.WorkflowSwitchTraffic
   */
  workflowSwitchTraffic: {
    methodKind: "unary";
    input: typeof WorkflowSwitchTrafficRequestSchema;
    output: typeof WorkflowSwitchTrafficResponseSchema;
  },
  /**
   * WorkflowUpdate updates the configuration of a vreplication workflow
   * using the provided updated parameters.
   *
   * @generated from rpc vtctlservice.Vtctld.WorkflowUpdate
   */
  workflowUpdate: {
    methodKind: "unary";
    input: typeof WorkflowUpdateRequestSchema;
    output: typeof WorkflowUpdateResponseSchema;
  },
  /**
   * GetMirrorRules returns the VSchema routing rules.
   *
   * @generated from rpc vtctlservice.Vtctld.GetMirrorRules
   */
  getMirrorRules: {
    methodKind: "unary";
    input: typeof GetMirrorRulesRequestSchema;
    output: typeof GetMirrorRulesResponseSchema;
  },
  /**
   * @generated from rpc vtctlservice.Vtctld.WorkflowMirrorTraffic
   */
  workflowMirrorTraffic: {
    methodKind: "unary";
    input: typeof WorkflowMirrorTrafficRequestSchema;
    output: typeof WorkflowMirrorTrafficResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_vtctlservice, 1);

