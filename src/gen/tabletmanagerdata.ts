// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "tabletmanagerdata.proto" (package "tabletmanagerdata", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This file contains all the types and servers necessary to make
// RPC calls to VtTablet for the management API.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ThrottledAppRule } from "./topodata";
import { OnDDLAction } from "./binlogdata";
import { VReplicationWorkflowState } from "./binlogdata";
import { VReplicationWorkflowSubType } from "./binlogdata";
import { VReplicationWorkflowType } from "./binlogdata";
import { BinlogSource } from "./binlogdata";
import { Time } from "./vttime";
import { Event } from "./logutil";
import { StopReplicationStatus } from "./replicationdata";
import { StopReplicationMode } from "./replicationdata";
import { FullStatus } from "./replicationdata";
import { TabletAlias } from "./topodata";
import { PrimaryStatus } from "./replicationdata";
import { Status } from "./replicationdata";
import { HostMetricsResponse } from "./mysqlctl";
import { TransactionMetadata } from "./query";
import { QueryResult } from "./query";
import { CallerID } from "./vtrpc";
import { TabletType } from "./topodata";
import { Field } from "./query";
/**
 * @generated from protobuf message tabletmanagerdata.TableDefinition
 */
export interface TableDefinition {
    /**
     * the table name
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * the SQL to run to create the table
     *
     * @generated from protobuf field: string schema = 2;
     */
    schema: string;
    /**
     * the columns in the order that will be used to dump and load the data
     *
     * @generated from protobuf field: repeated string columns = 3;
     */
    columns: string[];
    /**
     * the primary key columns in the primary key order
     *
     * @generated from protobuf field: repeated string primary_key_columns = 4;
     */
    primaryKeyColumns: string[];
    /**
     * type is either mysqlctl.TableBaseTable or mysqlctl.TableView
     *
     * @generated from protobuf field: string type = 5;
     */
    type: string;
    /**
     * how much space the data file takes.
     *
     * @generated from protobuf field: uint64 data_length = 6;
     */
    dataLength: bigint;
    /**
     * approximate number of rows
     *
     * @generated from protobuf field: uint64 row_count = 7;
     */
    rowCount: bigint;
    /**
     * column names along with their types.
     * NOTE: this is a superset of columns.
     *
     * @generated from protobuf field: repeated query.Field fields = 8;
     */
    fields: Field[];
}
/**
 * @generated from protobuf message tabletmanagerdata.SchemaDefinition
 */
export interface SchemaDefinition {
    /**
     * @generated from protobuf field: string database_schema = 1;
     */
    databaseSchema: string;
    /**
     * @generated from protobuf field: repeated tabletmanagerdata.TableDefinition table_definitions = 2;
     */
    tableDefinitions: TableDefinition[];
}
/**
 * @generated from protobuf message tabletmanagerdata.SchemaChangeResult
 */
export interface SchemaChangeResult {
    /**
     * before_schema holds the schema before each change.
     *
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition before_schema = 1;
     */
    beforeSchema?: SchemaDefinition;
    /**
     * after_schema holds the schema after each change.
     *
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition after_schema = 2;
     */
    afterSchema?: SchemaDefinition;
}
/**
 * UserPermission describes a single row in the mysql.user table
 * Primary key is Host+User
 * PasswordChecksum is the crc64 of the password, for security reasons
 *
 * @generated from protobuf message tabletmanagerdata.UserPermission
 */
export interface UserPermission {
    /**
     * @generated from protobuf field: string host = 1;
     */
    host: string;
    /**
     * @generated from protobuf field: string user = 2;
     */
    user: string;
    /**
     * @generated from protobuf field: uint64 password_checksum = 3;
     */
    passwordChecksum: bigint;
    /**
     * @generated from protobuf field: map<string, string> privileges = 4;
     */
    privileges: {
        [key: string]: string;
    };
}
/**
 * DbPermission describes a single row in the mysql.db table
 * Primary key is Host+Db+User
 *
 * @generated from protobuf message tabletmanagerdata.DbPermission
 */
export interface DbPermission {
    /**
     * @generated from protobuf field: string host = 1;
     */
    host: string;
    /**
     * @generated from protobuf field: string db = 2;
     */
    db: string;
    /**
     * @generated from protobuf field: string user = 3;
     */
    user: string;
    /**
     * @generated from protobuf field: map<string, string> privileges = 4;
     */
    privileges: {
        [key: string]: string;
    };
}
/**
 * Permissions have all the rows in mysql.{user,db} tables,
 * (all rows are sorted by primary key)
 *
 * @generated from protobuf message tabletmanagerdata.Permissions
 */
export interface Permissions {
    /**
     * @generated from protobuf field: repeated tabletmanagerdata.UserPermission user_permissions = 1;
     */
    userPermissions: UserPermission[];
    /**
     * @generated from protobuf field: repeated tabletmanagerdata.DbPermission db_permissions = 2;
     */
    dbPermissions: DbPermission[];
}
// 
// RPC payloads
// 

/**
 * @generated from protobuf message tabletmanagerdata.PingRequest
 */
export interface PingRequest {
    /**
     * @generated from protobuf field: string payload = 1;
     */
    payload: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.PingResponse
 */
export interface PingResponse {
    /**
     * @generated from protobuf field: string payload = 1;
     */
    payload: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.SleepRequest
 */
export interface SleepRequest {
    /**
     * duration is in nanoseconds
     *
     * @generated from protobuf field: int64 duration = 1;
     */
    duration: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.SleepResponse
 */
export interface SleepResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteHookRequest
 */
export interface ExecuteHookRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string parameters = 2;
     */
    parameters: string[];
    /**
     * @generated from protobuf field: map<string, string> extra_env = 3;
     */
    extraEnv: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteHookResponse
 */
export interface ExecuteHookResponse {
    /**
     * @generated from protobuf field: int64 exit_status = 1;
     */
    exitStatus: bigint;
    /**
     * @generated from protobuf field: string stdout = 2;
     */
    stdout: string;
    /**
     * @generated from protobuf field: string stderr = 3;
     */
    stderr: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetSchemaRequest
 */
export interface GetSchemaRequest {
    /**
     * @generated from protobuf field: repeated string tables = 1;
     */
    tables: string[];
    /**
     * @generated from protobuf field: bool include_views = 2;
     */
    includeViews: boolean;
    /**
     * @generated from protobuf field: repeated string exclude_tables = 3;
     */
    excludeTables: string[];
    /**
     * TableSchemaOnly specifies whether to limit the results to just table/view
     * schema definition (CREATE TABLE/VIEW statements) and skip column/field information
     *
     * @generated from protobuf field: bool table_schema_only = 4;
     */
    tableSchemaOnly: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetSchemaResponse
 */
export interface GetSchemaResponse {
    /**
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition schema_definition = 1;
     */
    schemaDefinition?: SchemaDefinition;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetPermissionsRequest
 */
export interface GetPermissionsRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.GetPermissionsResponse
 */
export interface GetPermissionsResponse {
    /**
     * @generated from protobuf field: tabletmanagerdata.Permissions permissions = 1;
     */
    permissions?: Permissions;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetGlobalStatusVarsRequest
 */
export interface GetGlobalStatusVarsRequest {
    /**
     * @generated from protobuf field: repeated string variables = 1;
     */
    variables: string[];
}
/**
 * @generated from protobuf message tabletmanagerdata.GetGlobalStatusVarsResponse
 */
export interface GetGlobalStatusVarsResponse {
    /**
     * @generated from protobuf field: map<string, string> status_values = 1;
     */
    statusValues: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message tabletmanagerdata.SetReadOnlyRequest
 */
export interface SetReadOnlyRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.SetReadOnlyResponse
 */
export interface SetReadOnlyResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.SetReadWriteRequest
 */
export interface SetReadWriteRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.SetReadWriteResponse
 */
export interface SetReadWriteResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ChangeTypeRequest
 */
export interface ChangeTypeRequest {
    /**
     * @generated from protobuf field: topodata.TabletType tablet_type = 1;
     */
    tabletType: TabletType;
    /**
     * @generated from protobuf field: bool semiSync = 2;
     */
    semiSync: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ChangeTypeResponse
 */
export interface ChangeTypeResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.RefreshStateRequest
 */
export interface RefreshStateRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.RefreshStateResponse
 */
export interface RefreshStateResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.RunHealthCheckRequest
 */
export interface RunHealthCheckRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.RunHealthCheckResponse
 */
export interface RunHealthCheckResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReloadSchemaRequest
 */
export interface ReloadSchemaRequest {
    /**
     * wait_position allows scheduling a schema reload to occur after a
     * given DDL has replicated to this server, by specifying a replication
     * position to wait for. Leave empty to trigger the reload immediately.
     *
     * @generated from protobuf field: string wait_position = 1;
     */
    waitPosition: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReloadSchemaResponse
 */
export interface ReloadSchemaResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.PreflightSchemaRequest
 */
export interface PreflightSchemaRequest {
    /**
     * @generated from protobuf field: repeated string changes = 1;
     */
    changes: string[];
}
/**
 * @generated from protobuf message tabletmanagerdata.PreflightSchemaResponse
 */
export interface PreflightSchemaResponse {
    /**
     * change_results has for each change the schema before and after it.
     * The number of elements is identical to the length of "changes" in the request.
     *
     * @generated from protobuf field: repeated tabletmanagerdata.SchemaChangeResult change_results = 1;
     */
    changeResults: SchemaChangeResult[];
}
/**
 * @generated from protobuf message tabletmanagerdata.ApplySchemaRequest
 */
export interface ApplySchemaRequest {
    /**
     * @generated from protobuf field: string sql = 1;
     */
    sql: string;
    /**
     * @generated from protobuf field: bool force = 2;
     */
    force: boolean;
    /**
     * @generated from protobuf field: bool allow_replication = 3;
     */
    allowReplication: boolean;
    /**
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition before_schema = 4;
     */
    beforeSchema?: SchemaDefinition;
    /**
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition after_schema = 5;
     */
    afterSchema?: SchemaDefinition;
    /**
     * @generated from protobuf field: string sql_mode = 6;
     */
    sqlMode: string;
    /**
     * BatchSize indicates how many queries to apply together.
     *
     * @generated from protobuf field: int64 batch_size = 7;
     */
    batchSize: bigint;
    /**
     * DisableForeignKeyChecks will result in setting foreign_key_checks to off before applying the schema.
     *
     * @generated from protobuf field: bool disable_foreign_key_checks = 8;
     */
    disableForeignKeyChecks: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ApplySchemaResponse
 */
export interface ApplySchemaResponse {
    /**
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition before_schema = 1;
     */
    beforeSchema?: SchemaDefinition;
    /**
     * @generated from protobuf field: tabletmanagerdata.SchemaDefinition after_schema = 2;
     */
    afterSchema?: SchemaDefinition;
}
/**
 * @generated from protobuf message tabletmanagerdata.LockTablesRequest
 */
export interface LockTablesRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.LockTablesResponse
 */
export interface LockTablesResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.UnlockTablesRequest
 */
export interface UnlockTablesRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.UnlockTablesResponse
 */
export interface UnlockTablesResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteQueryRequest
 */
export interface ExecuteQueryRequest {
    /**
     * @generated from protobuf field: bytes query = 1;
     */
    query: Uint8Array;
    /**
     * @generated from protobuf field: string db_name = 2;
     */
    dbName: string;
    /**
     * @generated from protobuf field: uint64 max_rows = 3;
     */
    maxRows: bigint;
    /**
     * caller_id identifies the caller. This is the effective caller ID,
     * set by the application to further identify the caller.
     *
     * @generated from protobuf field: vtrpc.CallerID caller_id = 4;
     */
    callerId?: CallerID;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteQueryResponse
 */
export interface ExecuteQueryResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteFetchAsDbaRequest
 */
export interface ExecuteFetchAsDbaRequest {
    /**
     * @generated from protobuf field: bytes query = 1;
     */
    query: Uint8Array;
    /**
     * @generated from protobuf field: string db_name = 2;
     */
    dbName: string;
    /**
     * @generated from protobuf field: uint64 max_rows = 3;
     */
    maxRows: bigint;
    /**
     * @generated from protobuf field: bool disable_binlogs = 4;
     */
    disableBinlogs: boolean;
    /**
     * @generated from protobuf field: bool reload_schema = 5;
     */
    reloadSchema: boolean;
    /**
     * @generated from protobuf field: bool disable_foreign_key_checks = 6;
     */
    disableForeignKeyChecks: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteFetchAsDbaResponse
 */
export interface ExecuteFetchAsDbaResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteMultiFetchAsDbaRequest
 */
export interface ExecuteMultiFetchAsDbaRequest {
    /**
     * @generated from protobuf field: bytes sql = 1;
     */
    sql: Uint8Array;
    /**
     * @generated from protobuf field: string db_name = 2;
     */
    dbName: string;
    /**
     * @generated from protobuf field: uint64 max_rows = 3;
     */
    maxRows: bigint;
    /**
     * @generated from protobuf field: bool disable_binlogs = 4;
     */
    disableBinlogs: boolean;
    /**
     * @generated from protobuf field: bool reload_schema = 5;
     */
    reloadSchema: boolean;
    /**
     * @generated from protobuf field: bool disable_foreign_key_checks = 6;
     */
    disableForeignKeyChecks: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteMultiFetchAsDbaResponse
 */
export interface ExecuteMultiFetchAsDbaResponse {
    /**
     * @generated from protobuf field: repeated query.QueryResult results = 1;
     */
    results: QueryResult[];
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteFetchAsAllPrivsRequest
 */
export interface ExecuteFetchAsAllPrivsRequest {
    /**
     * @generated from protobuf field: bytes query = 1;
     */
    query: Uint8Array;
    /**
     * @generated from protobuf field: string db_name = 2;
     */
    dbName: string;
    /**
     * @generated from protobuf field: uint64 max_rows = 3;
     */
    maxRows: bigint;
    /**
     * @generated from protobuf field: bool reload_schema = 4;
     */
    reloadSchema: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteFetchAsAllPrivsResponse
 */
export interface ExecuteFetchAsAllPrivsResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteFetchAsAppRequest
 */
export interface ExecuteFetchAsAppRequest {
    /**
     * @generated from protobuf field: bytes query = 1;
     */
    query: Uint8Array;
    /**
     * @generated from protobuf field: uint64 max_rows = 2;
     */
    maxRows: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.ExecuteFetchAsAppResponse
 */
export interface ExecuteFetchAsAppResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetUnresolvedTransactionsRequest
 */
export interface GetUnresolvedTransactionsRequest {
    /**
     * @generated from protobuf field: int64 abandon_age = 1;
     */
    abandonAge: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetUnresolvedTransactionsResponse
 */
export interface GetUnresolvedTransactionsResponse {
    /**
     * @generated from protobuf field: repeated query.TransactionMetadata transactions = 1;
     */
    transactions: TransactionMetadata[];
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadTransactionRequest
 */
export interface ReadTransactionRequest {
    /**
     * @generated from protobuf field: string dtid = 1;
     */
    dtid: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadTransactionResponse
 */
export interface ReadTransactionResponse {
    /**
     * @generated from protobuf field: query.TransactionMetadata transaction = 1;
     */
    transaction?: TransactionMetadata;
}
/**
 * @generated from protobuf message tabletmanagerdata.ConcludeTransactionRequest
 */
export interface ConcludeTransactionRequest {
    /**
     * @generated from protobuf field: string dtid = 1;
     */
    dtid: string;
    /**
     * @generated from protobuf field: bool mm = 2;
     */
    mm: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ConcludeTransactionResponse
 */
export interface ConcludeTransactionResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.MysqlHostMetricsRequest
 */
export interface MysqlHostMetricsRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.MysqlHostMetricsResponse
 */
export interface MysqlHostMetricsResponse {
    /**
     * @generated from protobuf field: mysqlctl.HostMetricsResponse HostMetrics = 1 [json_name = "HostMetrics"];
     */
    hostMetrics?: HostMetricsResponse;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReplicationStatusRequest
 */
export interface ReplicationStatusRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReplicationStatusResponse
 */
export interface ReplicationStatusResponse {
    /**
     * @generated from protobuf field: replicationdata.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message tabletmanagerdata.PrimaryStatusRequest
 */
export interface PrimaryStatusRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.PrimaryStatusResponse
 */
export interface PrimaryStatusResponse {
    /**
     * @generated from protobuf field: replicationdata.PrimaryStatus status = 1;
     */
    status?: PrimaryStatus;
}
/**
 * @generated from protobuf message tabletmanagerdata.PrimaryPositionRequest
 */
export interface PrimaryPositionRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.PrimaryPositionResponse
 */
export interface PrimaryPositionResponse {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.WaitForPositionRequest
 */
export interface WaitForPositionRequest {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.WaitForPositionResponse
 */
export interface WaitForPositionResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.StopReplicationRequest
 */
export interface StopReplicationRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.StopReplicationResponse
 */
export interface StopReplicationResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.StopReplicationMinimumRequest
 */
export interface StopReplicationMinimumRequest {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
    /**
     * @generated from protobuf field: int64 wait_timeout = 2;
     */
    waitTimeout: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.StopReplicationMinimumResponse
 */
export interface StopReplicationMinimumResponse {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.StartReplicationRequest
 */
export interface StartReplicationRequest {
    /**
     * @generated from protobuf field: bool semiSync = 1;
     */
    semiSync: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.StartReplicationResponse
 */
export interface StartReplicationResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.StartReplicationUntilAfterRequest
 */
export interface StartReplicationUntilAfterRequest {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
    /**
     * @generated from protobuf field: int64 wait_timeout = 2;
     */
    waitTimeout: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.StartReplicationUntilAfterResponse
 */
export interface StartReplicationUntilAfterResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.GetReplicasRequest
 */
export interface GetReplicasRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.GetReplicasResponse
 */
export interface GetReplicasResponse {
    /**
     * @generated from protobuf field: repeated string addrs = 1;
     */
    addrs: string[];
}
/**
 * @generated from protobuf message tabletmanagerdata.ResetReplicationRequest
 */
export interface ResetReplicationRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.ResetReplicationResponse
 */
export interface ResetReplicationResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.VReplicationExecRequest
 */
export interface VReplicationExecRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.VReplicationExecResponse
 */
export interface VReplicationExecResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.VReplicationWaitForPosRequest
 */
export interface VReplicationWaitForPosRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string position = 2;
     */
    position: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.VReplicationWaitForPosResponse
 */
export interface VReplicationWaitForPosResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.InitPrimaryRequest
 */
export interface InitPrimaryRequest {
    /**
     * @generated from protobuf field: bool semiSync = 1;
     */
    semiSync: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.InitPrimaryResponse
 */
export interface InitPrimaryResponse {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.PopulateReparentJournalRequest
 */
export interface PopulateReparentJournalRequest {
    /**
     * @generated from protobuf field: int64 time_created_ns = 1;
     */
    timeCreatedNs: bigint;
    /**
     * @generated from protobuf field: string action_name = 2;
     */
    actionName: string;
    /**
     * @generated from protobuf field: topodata.TabletAlias primary_alias = 3;
     */
    primaryAlias?: TabletAlias;
    /**
     * @generated from protobuf field: string replication_position = 4;
     */
    replicationPosition: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.PopulateReparentJournalResponse
 */
export interface PopulateReparentJournalResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadReparentJournalInfoRequest
 */
export interface ReadReparentJournalInfoRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadReparentJournalInfoResponse
 */
export interface ReadReparentJournalInfoResponse {
    /**
     * @generated from protobuf field: int32 length = 1;
     */
    length: number;
}
/**
 * @generated from protobuf message tabletmanagerdata.InitReplicaRequest
 */
export interface InitReplicaRequest {
    /**
     * @generated from protobuf field: topodata.TabletAlias parent = 1;
     */
    parent?: TabletAlias;
    /**
     * @generated from protobuf field: string replication_position = 2;
     */
    replicationPosition: string;
    /**
     * @generated from protobuf field: int64 time_created_ns = 3;
     */
    timeCreatedNs: bigint;
    /**
     * @generated from protobuf field: bool semiSync = 4;
     */
    semiSync: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.InitReplicaResponse
 */
export interface InitReplicaResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.DemotePrimaryRequest
 */
export interface DemotePrimaryRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.DemotePrimaryResponse
 */
export interface DemotePrimaryResponse {
    /**
     * PrimaryStatus represents the response from calling `SHOW BINARY LOG STATUS` on a primary that has been demoted.
     *
     * @generated from protobuf field: replicationdata.PrimaryStatus primary_status = 2;
     */
    primaryStatus?: PrimaryStatus;
}
/**
 * @generated from protobuf message tabletmanagerdata.UndoDemotePrimaryRequest
 */
export interface UndoDemotePrimaryRequest {
    /**
     * @generated from protobuf field: bool semiSync = 1;
     */
    semiSync: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.UndoDemotePrimaryResponse
 */
export interface UndoDemotePrimaryResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReplicaWasPromotedRequest
 */
export interface ReplicaWasPromotedRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReplicaWasPromotedResponse
 */
export interface ReplicaWasPromotedResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ResetReplicationParametersRequest
 */
export interface ResetReplicationParametersRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.ResetReplicationParametersResponse
 */
export interface ResetReplicationParametersResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.FullStatusRequest
 */
export interface FullStatusRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.FullStatusResponse
 */
export interface FullStatusResponse {
    /**
     * @generated from protobuf field: replicationdata.FullStatus status = 1;
     */
    status?: FullStatus;
}
/**
 * @generated from protobuf message tabletmanagerdata.SetReplicationSourceRequest
 */
export interface SetReplicationSourceRequest {
    /**
     * @generated from protobuf field: topodata.TabletAlias parent = 1;
     */
    parent?: TabletAlias;
    /**
     * @generated from protobuf field: int64 time_created_ns = 2;
     */
    timeCreatedNs: bigint;
    /**
     * @generated from protobuf field: bool force_start_replication = 3;
     */
    forceStartReplication: boolean;
    /**
     * @generated from protobuf field: string wait_position = 4;
     */
    waitPosition: string;
    /**
     * @generated from protobuf field: bool semiSync = 5;
     */
    semiSync: boolean;
    /**
     * @generated from protobuf field: double heartbeat_interval = 6;
     */
    heartbeatInterval: number;
}
/**
 * @generated from protobuf message tabletmanagerdata.SetReplicationSourceResponse
 */
export interface SetReplicationSourceResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.ReplicaWasRestartedRequest
 */
export interface ReplicaWasRestartedRequest {
    /**
     * the parent alias the tablet should have
     *
     * @generated from protobuf field: topodata.TabletAlias parent = 1;
     */
    parent?: TabletAlias;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReplicaWasRestartedResponse
 */
export interface ReplicaWasRestartedResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.StopReplicationAndGetStatusRequest
 */
export interface StopReplicationAndGetStatusRequest {
    /**
     * @generated from protobuf field: replicationdata.StopReplicationMode stop_replication_mode = 1;
     */
    stopReplicationMode: StopReplicationMode;
}
/**
 * @generated from protobuf message tabletmanagerdata.StopReplicationAndGetStatusResponse
 */
export interface StopReplicationAndGetStatusResponse {
    /**
     * Status represents the replication status call right before, and right after telling the replica to stop.
     *
     * @generated from protobuf field: replicationdata.StopReplicationStatus status = 2;
     */
    status?: StopReplicationStatus;
}
/**
 * @generated from protobuf message tabletmanagerdata.PromoteReplicaRequest
 */
export interface PromoteReplicaRequest {
    /**
     * @generated from protobuf field: bool semiSync = 1;
     */
    semiSync: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.PromoteReplicaResponse
 */
export interface PromoteReplicaResponse {
    /**
     * @generated from protobuf field: string position = 1;
     */
    position: string;
}
// Backup / Restore related messages

/**
 * @generated from protobuf message tabletmanagerdata.BackupRequest
 */
export interface BackupRequest {
    /**
     * @generated from protobuf field: int32 concurrency = 1;
     */
    concurrency: number;
    /**
     * @generated from protobuf field: bool allow_primary = 2;
     */
    allowPrimary: boolean;
    /**
     * IncrementalFromPos indicates a position of a previous backup. When this value is non-empty
     * then the backup becomes incremental and applies as of given position.
     *
     * @generated from protobuf field: string incremental_from_pos = 3;
     */
    incrementalFromPos: string;
    /**
     * UpgradeSafe indicates if the backup should be taken with innodb_fast_shutdown=0
     * so that it's a backup that can be used for an upgrade.
     *
     * @generated from protobuf field: bool upgrade_safe = 4;
     */
    upgradeSafe: boolean;
    /**
     * BackupEngine specifies if we want to use a particular backup engine for this backup request
     *
     * @generated from protobuf field: optional string backup_engine = 5;
     */
    backupEngine?: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.BackupResponse
 */
export interface BackupResponse {
    /**
     * @generated from protobuf field: logutil.Event event = 1;
     */
    event?: Event;
}
/**
 * @generated from protobuf message tabletmanagerdata.RestoreFromBackupRequest
 */
export interface RestoreFromBackupRequest {
    /**
     * @generated from protobuf field: vttime.Time backup_time = 1;
     */
    backupTime?: Time;
    /**
     * RestoreToPos indicates a position for a point-in-time recovery. The recovery
     * is expected to utilize one full backup, followed by zero or more incremental backups,
     * that reach the precise desired position
     *
     * @generated from protobuf field: string restore_to_pos = 2;
     */
    restoreToPos: string;
    /**
     * Dry run does not actually performs the restore, but validates the steps and availability of backups
     *
     * @generated from protobuf field: bool dry_run = 3;
     */
    dryRun: boolean;
    /**
     * RestoreToTimestamp, if given, requested an inremental restore up to (and excluding) the given timestamp.
     * RestoreToTimestamp and RestoreToPos are mutually exclusive.
     *
     * @generated from protobuf field: vttime.Time restore_to_timestamp = 4;
     */
    restoreToTimestamp?: Time;
    /**
     * AllowedBackupEngines, if present will filter out any backups taken with engines not included in the list
     *
     * @generated from protobuf field: repeated string allowed_backup_engines = 5;
     */
    allowedBackupEngines: string[];
}
/**
 * @generated from protobuf message tabletmanagerdata.RestoreFromBackupResponse
 */
export interface RestoreFromBackupResponse {
    /**
     * @generated from protobuf field: logutil.Event event = 1;
     */
    event?: Event;
}
// 
// VReplication related messages
// 

/**
 * @generated from protobuf message tabletmanagerdata.CreateVReplicationWorkflowRequest
 */
export interface CreateVReplicationWorkflowRequest {
    /**
     * @generated from protobuf field: string workflow = 1;
     */
    workflow: string;
    /**
     * @generated from protobuf field: repeated binlogdata.BinlogSource binlog_source = 2;
     */
    binlogSource: BinlogSource[];
    /**
     * Optional parameters.
     *
     * @generated from protobuf field: repeated string cells = 3;
     */
    cells: string[];
    /**
     * TabletTypes is the list of tablet types to use when selecting source tablets.
     *
     * @generated from protobuf field: repeated topodata.TabletType tablet_types = 4;
     */
    tabletTypes: TabletType[];
    /**
     * @generated from protobuf field: tabletmanagerdata.TabletSelectionPreference tablet_selection_preference = 5;
     */
    tabletSelectionPreference: TabletSelectionPreference;
    /**
     * @generated from protobuf field: binlogdata.VReplicationWorkflowType workflow_type = 6;
     */
    workflowType: VReplicationWorkflowType;
    /**
     * @generated from protobuf field: binlogdata.VReplicationWorkflowSubType workflow_sub_type = 7;
     */
    workflowSubType: VReplicationWorkflowSubType;
    /**
     * DeferSecondaryKeys specifies if secondary keys should be created in one shot after table
     * copy finishes.
     *
     * @generated from protobuf field: bool defer_secondary_keys = 8;
     */
    deferSecondaryKeys: boolean;
    /**
     * AutoStart specifies if the workflow should be started when created.
     *
     * @generated from protobuf field: bool auto_start = 9;
     */
    autoStart: boolean;
    /**
     * Should the workflow stop after the copy phase.
     *
     * @generated from protobuf field: bool stop_after_copy = 10;
     */
    stopAfterCopy: boolean;
    /**
     * @generated from protobuf field: string options = 11;
     */
    options: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.CreateVReplicationWorkflowResponse
 */
export interface CreateVReplicationWorkflowResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.DeleteVReplicationWorkflowRequest
 */
export interface DeleteVReplicationWorkflowRequest {
    /**
     * @generated from protobuf field: string workflow = 1;
     */
    workflow: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.DeleteVReplicationWorkflowResponse
 */
export interface DeleteVReplicationWorkflowResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.HasVReplicationWorkflowsRequest
 */
export interface HasVReplicationWorkflowsRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.HasVReplicationWorkflowsResponse
 */
export interface HasVReplicationWorkflowsResponse {
    /**
     * @generated from protobuf field: bool has = 1;
     */
    has: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadVReplicationWorkflowsRequest
 */
export interface ReadVReplicationWorkflowsRequest {
    /**
     * @generated from protobuf field: repeated int32 include_ids = 1;
     */
    includeIds: number[];
    /**
     * @generated from protobuf field: repeated string include_workflows = 2;
     */
    includeWorkflows: string[];
    /**
     * @generated from protobuf field: repeated binlogdata.VReplicationWorkflowState include_states = 3;
     */
    includeStates: VReplicationWorkflowState[];
    /**
     * @generated from protobuf field: repeated string exclude_workflows = 4;
     */
    excludeWorkflows: string[];
    /**
     * @generated from protobuf field: repeated binlogdata.VReplicationWorkflowState exclude_states = 5;
     */
    excludeStates: VReplicationWorkflowState[];
    /**
     * @generated from protobuf field: bool exclude_frozen = 6;
     */
    excludeFrozen: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadVReplicationWorkflowsResponse
 */
export interface ReadVReplicationWorkflowsResponse {
    /**
     * @generated from protobuf field: repeated tabletmanagerdata.ReadVReplicationWorkflowResponse workflows = 1;
     */
    workflows: ReadVReplicationWorkflowResponse[];
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadVReplicationWorkflowRequest
 */
export interface ReadVReplicationWorkflowRequest {
    /**
     * @generated from protobuf field: string workflow = 1;
     */
    workflow: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadVReplicationWorkflowResponse
 */
export interface ReadVReplicationWorkflowResponse {
    /**
     * @generated from protobuf field: string workflow = 2;
     */
    workflow: string;
    /**
     * @generated from protobuf field: string cells = 3;
     */
    cells: string;
    /**
     * @generated from protobuf field: repeated topodata.TabletType tablet_types = 4;
     */
    tabletTypes: TabletType[];
    /**
     * @generated from protobuf field: tabletmanagerdata.TabletSelectionPreference tablet_selection_preference = 5;
     */
    tabletSelectionPreference: TabletSelectionPreference;
    /**
     * @generated from protobuf field: string db_name = 6;
     */
    dbName: string;
    /**
     * @generated from protobuf field: string tags = 7;
     */
    tags: string;
    /**
     * @generated from protobuf field: binlogdata.VReplicationWorkflowType workflow_type = 8;
     */
    workflowType: VReplicationWorkflowType;
    /**
     * @generated from protobuf field: binlogdata.VReplicationWorkflowSubType workflow_sub_type = 9;
     */
    workflowSubType: VReplicationWorkflowSubType;
    /**
     * @generated from protobuf field: bool defer_secondary_keys = 10;
     */
    deferSecondaryKeys: boolean;
    /**
     * @generated from protobuf field: repeated tabletmanagerdata.ReadVReplicationWorkflowResponse.Stream streams = 11;
     */
    streams: ReadVReplicationWorkflowResponse_Stream[];
    /**
     * @generated from protobuf field: string options = 12;
     */
    options: string;
    /**
     * @generated from protobuf field: map<string, string> config_overrides = 13;
     */
    configOverrides: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message tabletmanagerdata.ReadVReplicationWorkflowResponse.Stream
 */
export interface ReadVReplicationWorkflowResponse_Stream {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: binlogdata.BinlogSource bls = 2;
     */
    bls?: BinlogSource;
    /**
     * @generated from protobuf field: string pos = 3;
     */
    pos: string;
    /**
     * @generated from protobuf field: string stop_pos = 4;
     */
    stopPos: string;
    /**
     * @generated from protobuf field: int64 max_tps = 5;
     */
    maxTps: bigint;
    /**
     * @generated from protobuf field: int64 max_replication_lag = 6;
     */
    maxReplicationLag: bigint;
    /**
     * @generated from protobuf field: vttime.Time time_updated = 7;
     */
    timeUpdated?: Time;
    /**
     * @generated from protobuf field: vttime.Time transaction_timestamp = 8;
     */
    transactionTimestamp?: Time;
    /**
     * @generated from protobuf field: binlogdata.VReplicationWorkflowState state = 9;
     */
    state: VReplicationWorkflowState;
    /**
     * @generated from protobuf field: string message = 10;
     */
    message: string;
    /**
     * @generated from protobuf field: int64 rows_copied = 11;
     */
    rowsCopied: bigint;
    /**
     * @generated from protobuf field: vttime.Time time_heartbeat = 12;
     */
    timeHeartbeat?: Time;
    /**
     * @generated from protobuf field: vttime.Time time_throttled = 13;
     */
    timeThrottled?: Time;
    /**
     * @generated from protobuf field: string component_throttled = 14;
     */
    componentThrottled: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.ValidateVReplicationPermissionsRequest
 */
export interface ValidateVReplicationPermissionsRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.ValidateVReplicationPermissionsResponse
 */
export interface ValidateVReplicationPermissionsResponse {
    /**
     * The --db_filtered_user on the tablet.
     *
     * @generated from protobuf field: string user = 1;
     */
    user: string;
    /**
     * Does the user have the minimum privileges needed to manage
     * vreplication metadata.
     *
     * @generated from protobuf field: bool ok = 2;
     */
    ok: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.VDiffRequest
 */
export interface VDiffRequest {
    /**
     * @generated from protobuf field: string keyspace = 1;
     */
    keyspace: string;
    /**
     * @generated from protobuf field: string workflow = 2;
     */
    workflow: string;
    /**
     * @generated from protobuf field: string action = 3;
     */
    action: string;
    /**
     * @generated from protobuf field: string action_arg = 4;
     */
    actionArg: string;
    /**
     * @generated from protobuf field: string vdiff_uuid = 5;
     */
    vdiffUuid: string;
    /**
     * @generated from protobuf field: tabletmanagerdata.VDiffOptions options = 6;
     */
    options?: VDiffOptions;
}
/**
 * @generated from protobuf message tabletmanagerdata.VDiffResponse
 */
export interface VDiffResponse {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: query.QueryResult output = 2;
     */
    output?: QueryResult;
    /**
     * @generated from protobuf field: string vdiff_uuid = 3;
     */
    vdiffUuid: string;
}
/**
 * options that influence the tablet selected by the picker for streaming data from
 *
 * @generated from protobuf message tabletmanagerdata.VDiffPickerOptions
 */
export interface VDiffPickerOptions {
    /**
     * @generated from protobuf field: string tablet_types = 1;
     */
    tabletTypes: string;
    /**
     * @generated from protobuf field: string source_cell = 2;
     */
    sourceCell: string;
    /**
     * @generated from protobuf field: string target_cell = 3;
     */
    targetCell: string;
}
/**
 * options that only influence how vdiff differences are reported
 *
 * @generated from protobuf message tabletmanagerdata.VDiffReportOptions
 */
export interface VDiffReportOptions {
    /**
     * @generated from protobuf field: bool only_pks = 1;
     */
    onlyPks: boolean;
    /**
     * @generated from protobuf field: bool debug_query = 2;
     */
    debugQuery: boolean;
    /**
     * @generated from protobuf field: string format = 3;
     */
    format: string;
    /**
     * @generated from protobuf field: int64 max_sample_rows = 4;
     */
    maxSampleRows: bigint;
    /**
     * @generated from protobuf field: int64 row_diff_column_truncate_at = 5;
     */
    rowDiffColumnTruncateAt: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.VDiffCoreOptions
 */
export interface VDiffCoreOptions {
    /**
     * @generated from protobuf field: string tables = 1;
     */
    tables: string;
    /**
     * @generated from protobuf field: bool auto_retry = 2;
     */
    autoRetry: boolean;
    /**
     * @generated from protobuf field: int64 max_rows = 3;
     */
    maxRows: bigint;
    /**
     * @generated from protobuf field: bool checksum = 4;
     */
    checksum: boolean;
    /**
     * @generated from protobuf field: int64 sample_pct = 5;
     */
    samplePct: bigint;
    /**
     * @generated from protobuf field: int64 timeout_seconds = 6;
     */
    timeoutSeconds: bigint;
    /**
     * @generated from protobuf field: int64 max_extra_rows_to_compare = 7;
     */
    maxExtraRowsToCompare: bigint;
    /**
     * @generated from protobuf field: bool update_table_stats = 8;
     */
    updateTableStats: boolean;
    /**
     * @generated from protobuf field: int64 max_diff_seconds = 9;
     */
    maxDiffSeconds: bigint;
    /**
     * @generated from protobuf field: optional bool auto_start = 10;
     */
    autoStart?: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.VDiffOptions
 */
export interface VDiffOptions {
    /**
     * @generated from protobuf field: tabletmanagerdata.VDiffPickerOptions picker_options = 1;
     */
    pickerOptions?: VDiffPickerOptions;
    /**
     * @generated from protobuf field: tabletmanagerdata.VDiffCoreOptions core_options = 2;
     */
    coreOptions?: VDiffCoreOptions;
    /**
     * @generated from protobuf field: tabletmanagerdata.VDiffReportOptions report_options = 3;
     */
    reportOptions?: VDiffReportOptions;
}
/**
 * UpdateVReplicationWorkflowRequest is used to update an existing VReplication
 * workflow. Note that the following fields MUST have an explicit value provided
 * if you do NOT wish to update the existing value to the given type's ZeroValue:
 * cells, tablet_types, on_ddl, and state.
 * TODO: leverage the optional modifier for these fields rather than using SimulatedNull
 * values: https://github.com/vitessio/vitess/issues/15627
 *
 * @generated from protobuf message tabletmanagerdata.UpdateVReplicationWorkflowRequest
 */
export interface UpdateVReplicationWorkflowRequest {
    /**
     * @generated from protobuf field: string workflow = 1;
     */
    workflow: string;
    /**
     * @generated from protobuf field: repeated string cells = 2;
     */
    cells: string[];
    /**
     * @generated from protobuf field: repeated topodata.TabletType tablet_types = 3;
     */
    tabletTypes: TabletType[];
    /**
     * @generated from protobuf field: optional tabletmanagerdata.TabletSelectionPreference tablet_selection_preference = 4;
     */
    tabletSelectionPreference?: TabletSelectionPreference;
    /**
     * @generated from protobuf field: optional binlogdata.OnDDLAction on_ddl = 5;
     */
    onDdl?: OnDDLAction;
    /**
     * @generated from protobuf field: optional binlogdata.VReplicationWorkflowState state = 6;
     */
    state?: VReplicationWorkflowState;
    /**
     * @generated from protobuf field: map<string, string> config_overrides = 8;
     */
    configOverrides: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message tabletmanagerdata.UpdateVReplicationWorkflowResponse
 */
export interface UpdateVReplicationWorkflowResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * UpdateVReplicationWorkflowsRequest is used to update multiple existing VReplication
 * workflows. Note that the following fields MUST have an explicit value provided
 * if you do NOT wish to update the existing values to the given type's ZeroValue:
 * state, message, and stop_position.
 * TODO: leverage the optional modifier for these fields rather than using SimulatedNull
 * values: https://github.com/vitessio/vitess/issues/15627
 *
 * @generated from protobuf message tabletmanagerdata.UpdateVReplicationWorkflowsRequest
 */
export interface UpdateVReplicationWorkflowsRequest {
    /**
     * @generated from protobuf field: bool all_workflows = 1;
     */
    allWorkflows: boolean;
    /**
     * @generated from protobuf field: repeated string include_workflows = 2;
     */
    includeWorkflows: string[];
    /**
     * @generated from protobuf field: repeated string exclude_workflows = 3;
     */
    excludeWorkflows: string[];
    /**
     * @generated from protobuf field: optional binlogdata.VReplicationWorkflowState state = 4;
     */
    state?: VReplicationWorkflowState;
    /**
     * @generated from protobuf field: optional string message = 5;
     */
    message?: string;
    /**
     * @generated from protobuf field: optional string stop_position = 6;
     */
    stopPosition?: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.UpdateVReplicationWorkflowsResponse
 */
export interface UpdateVReplicationWorkflowsResponse {
    /**
     * @generated from protobuf field: query.QueryResult result = 1;
     */
    result?: QueryResult;
}
/**
 * @generated from protobuf message tabletmanagerdata.ResetSequencesRequest
 */
export interface ResetSequencesRequest {
    /**
     * @generated from protobuf field: repeated string tables = 1;
     */
    tables: string[];
}
/**
 * @generated from protobuf message tabletmanagerdata.ResetSequencesResponse
 */
export interface ResetSequencesResponse {
}
/**
 * @generated from protobuf message tabletmanagerdata.CheckThrottlerRequest
 */
export interface CheckThrottlerRequest {
    /**
     * @generated from protobuf field: string app_name = 1;
     */
    appName: string;
    /**
     * @generated from protobuf field: string scope = 2;
     */
    scope: string;
    /**
     * SkipRequestHeartbeats ensures this check does not renew heartbeat lease
     *
     * @generated from protobuf field: bool skip_request_heartbeats = 3;
     */
    skipRequestHeartbeats: boolean;
    /**
     * OKIfNotExists asks the throttler to return OK even if the metric does not exist
     *
     * @generated from protobuf field: bool ok_if_not_exists = 4;
     */
    okIfNotExists: boolean;
    /**
     * MultiMetricsEnabled is always set to "true" and is how a multi-metrics enabled replica
     * throttler knows its being probed by a multi-metrics enabled primary vttablet.
     *
     * @generated from protobuf field: bool multi_metrics_enabled = 5;
     */
    multiMetricsEnabled: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.CheckThrottlerResponse
 */
export interface CheckThrottlerResponse {
    /**
     * StatusCode is HTTP compliant response code (e.g. 200 for OK)
     *
     * @generated from protobuf field: int32 status_code = 1;
     */
    statusCode: number;
    /**
     * Value is the metric value collected by the tablet
     *
     * @generated from protobuf field: double value = 2;
     */
    value: number;
    /**
     * Threshold is the throttling threshold the table was comparing the value with
     *
     * @generated from protobuf field: double threshold = 3;
     */
    threshold: number;
    /**
     * Error indicates an error retrieving the value
     *
     * @generated from protobuf field: string error = 4;
     */
    error: string;
    /**
     * Message
     *
     * @generated from protobuf field: string message = 5;
     */
    message: string;
    /**
     * RecentlyChecked indicates that the tablet has been hit with a user-facing check, which can then imply
     * that heartbeats lease should be renwed.
     *
     * @generated from protobuf field: bool recently_checked = 6;
     */
    recentlyChecked: boolean;
    /**
     * Metrics is a map (metric name -> metric value/error) so that the client has as much
     * information as possible about all the checked metrics.
     *
     * @generated from protobuf field: map<string, tabletmanagerdata.CheckThrottlerResponse.Metric> metrics = 7;
     */
    metrics: {
        [key: string]: CheckThrottlerResponse_Metric;
    };
    /**
     * AppName is the name of app that was matched by the throttler
     *
     * @generated from protobuf field: string app_name = 8;
     */
    appName: string;
    /**
     * Summary is a human readable analysis of the result
     *
     * @generated from protobuf field: string summary = 9;
     */
    summary: string;
    /**
     * ResponseCode is the enum representation of the response
     *
     * @generated from protobuf field: tabletmanagerdata.CheckThrottlerResponseCode response_code = 10;
     */
    responseCode: CheckThrottlerResponseCode;
}
/**
 * @generated from protobuf message tabletmanagerdata.CheckThrottlerResponse.Metric
 */
export interface CheckThrottlerResponse_Metric {
    /**
     * Name of the metric
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * StatusCode is HTTP compliant response code (e.g. 200 for OK)
     *
     * @generated from protobuf field: int32 status_code = 2;
     */
    statusCode: number;
    /**
     * Value is the metric value collected by the tablet
     *
     * @generated from protobuf field: double value = 3;
     */
    value: number;
    /**
     * Threshold is the throttling threshold the table was comparing the value with
     *
     * @generated from protobuf field: double threshold = 4;
     */
    threshold: number;
    /**
     * Error indicates an error retrieving the value
     *
     * @generated from protobuf field: string error = 5;
     */
    error: string;
    /**
     * Message
     *
     * @generated from protobuf field: string message = 6;
     */
    message: string;
    /**
     * Scope used in this check
     *
     * @generated from protobuf field: string scope = 7;
     */
    scope: string;
    /**
     * ResponseCode is the enum representation of the response
     *
     * @generated from protobuf field: tabletmanagerdata.CheckThrottlerResponseCode response_code = 8;
     */
    responseCode: CheckThrottlerResponseCode;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetThrottlerStatusRequest
 */
export interface GetThrottlerStatusRequest {
}
/**
 * @generated from protobuf message tabletmanagerdata.GetThrottlerStatusResponse
 */
export interface GetThrottlerStatusResponse {
    /**
     * TabletAlias of probed tablet
     *
     * @generated from protobuf field: string tablet_alias = 1;
     */
    tabletAlias: string;
    /**
     * @generated from protobuf field: string keyspace = 2;
     */
    keyspace: string;
    /**
     * @generated from protobuf field: string shard = 3;
     */
    shard: string;
    /**
     * IsLeader indicates if the tablet is the leader of the shard, ie. the primary
     *
     * @generated from protobuf field: bool is_leader = 4;
     */
    isLeader: boolean;
    /**
     * IsOpen per stateManager
     *
     * @generated from protobuf field: bool is_open = 5;
     */
    isOpen: boolean;
    /**
     * IsEnabled per throttler configuration
     *
     * @generated from protobuf field: bool is_enabled = 6;
     */
    isEnabled: boolean;
    /**
     * IsDormant: whether the throttler is dormant, ie has not received any checks in a while
     * and goes into low-frequency probing mode.
     *
     * @generated from protobuf field: bool is_dormant = 7;
     */
    isDormant: boolean;
    /**
     * LagMetricQuery is the query used to check the lag metric, a constant used by the throttler.
     *
     * @generated from protobuf field: string lag_metric_query = 8;
     */
    lagMetricQuery: string;
    /**
     * CustomMetricQuery is the query used to check the custom metric, supplied by the user.
     *
     * @generated from protobuf field: string custom_metric_query = 9;
     */
    customMetricQuery: string;
    /**
     * DefaultThreshold is the threshold used by the throttler for the default metric (lag or custom in single-metric throttlers)
     *
     * @generated from protobuf field: double default_threshold = 10;
     */
    defaultThreshold: number;
    /**
     * MetricNameUsedAsDefault is the name of the metric used as the default metric: "lag" or "custom", for backwards compatibility
     * with single-metric throttlers
     *
     * @generated from protobuf field: string metric_name_used_as_default = 11;
     */
    metricNameUsedAsDefault: string;
    /**
     * AggregatedMetrics is a map of metric names to their values/errors
     * Names are, for example, "self", "self/lag", "shard/lag", "shard/loadavg", etc.
     *
     * @generated from protobuf field: map<string, tabletmanagerdata.GetThrottlerStatusResponse.MetricResult> aggregated_metrics = 12;
     */
    aggregatedMetrics: {
        [key: string]: GetThrottlerStatusResponse_MetricResult;
    };
    /**
     * MetricThresholds is a map of metric names to their thresholds.
     *
     * @generated from protobuf field: map<string, double> metric_thresholds = 13;
     */
    metricThresholds: {
        [key: string]: number;
    };
    /**
     * MetricsHealth is a map of metric names to their health status.
     *
     * @generated from protobuf field: map<string, tabletmanagerdata.GetThrottlerStatusResponse.MetricHealth> metrics_health = 14;
     */
    metricsHealth: {
        [key: string]: GetThrottlerStatusResponse_MetricHealth;
    };
    /**
     * ThrottledApps is a map of app names to their throttling rules
     *
     * @generated from protobuf field: map<string, topodata.ThrottledAppRule> throttled_apps = 15;
     */
    throttledApps: {
        [key: string]: ThrottledAppRule;
    };
    /**
     * AppCheckedMetrics is a map of app names to their assigned metrics
     *
     * @generated from protobuf field: map<string, string> app_checked_metrics = 16;
     */
    appCheckedMetrics: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: bool recently_checked = 17;
     */
    recentlyChecked: boolean;
    /**
     * RecentApps is a map of app names to their recent check status
     *
     * @generated from protobuf field: map<string, tabletmanagerdata.GetThrottlerStatusResponse.RecentApp> recent_apps = 18;
     */
    recentApps: {
        [key: string]: GetThrottlerStatusResponse_RecentApp;
    };
}
/**
 * @generated from protobuf message tabletmanagerdata.GetThrottlerStatusResponse.MetricResult
 */
export interface GetThrottlerStatusResponse_MetricResult {
    /**
     * @generated from protobuf field: double value = 1;
     */
    value: number;
    /**
     * @generated from protobuf field: string error = 2;
     */
    error: string;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetThrottlerStatusResponse.MetricHealth
 */
export interface GetThrottlerStatusResponse_MetricHealth {
    /**
     * @generated from protobuf field: vttime.Time last_healthy_at = 1;
     */
    lastHealthyAt?: Time;
    /**
     * @generated from protobuf field: int64 seconds_since_last_healthy = 2;
     */
    secondsSinceLastHealthy: bigint;
}
/**
 * @generated from protobuf message tabletmanagerdata.GetThrottlerStatusResponse.RecentApp
 */
export interface GetThrottlerStatusResponse_RecentApp {
    /**
     * @generated from protobuf field: vttime.Time checked_at = 1;
     */
    checkedAt?: Time;
    /**
     * @generated from protobuf field: int32 status_code = 2;
     */
    statusCode: number;
    /**
     * ResponseCode is the enum representation of the response
     *
     * @generated from protobuf field: tabletmanagerdata.CheckThrottlerResponseCode response_code = 3;
     */
    responseCode: CheckThrottlerResponseCode;
}
/**
 * @generated from protobuf message tabletmanagerdata.ChangeTagsRequest
 */
export interface ChangeTagsRequest {
    /**
     * @generated from protobuf field: map<string, string> tags = 1;
     */
    tags: {
        [key: string]: string;
    };
    /**
     * @generated from protobuf field: bool replace = 2;
     */
    replace: boolean;
}
/**
 * @generated from protobuf message tabletmanagerdata.ChangeTagsResponse
 */
export interface ChangeTagsResponse {
    /**
     * @generated from protobuf field: map<string, string> tags = 1;
     */
    tags: {
        [key: string]: string;
    };
}
// 
// Data structures
// 

/**
 * This structure allows us to manage tablet selection preferences
 * which are eventually passed to a TabletPicker.
 *
 * @generated from protobuf enum tabletmanagerdata.TabletSelectionPreference
 */
export enum TabletSelectionPreference {
    /**
     * @generated from protobuf enum value: ANY = 0;
     */
    ANY = 0,
    /**
     * @generated from protobuf enum value: INORDER = 1;
     */
    INORDER = 1,
    /**
     * Don't change any existing value
     *
     * @generated from protobuf enum value: UNKNOWN = 3;
     */
    UNKNOWN = 3
}
/**
 * @generated from protobuf enum tabletmanagerdata.CheckThrottlerResponseCode
 */
export enum CheckThrottlerResponseCode {
    /**
     * @generated from protobuf enum value: UNDEFINED = 0;
     */
    UNDEFINED = 0,
    /**
     * @generated from protobuf enum value: OK = 1;
     */
    OK = 1,
    /**
     * @generated from protobuf enum value: THRESHOLD_EXCEEDED = 2;
     */
    THRESHOLD_EXCEEDED = 2,
    /**
     * @generated from protobuf enum value: APP_DENIED = 3;
     */
    APP_DENIED = 3,
    /**
     * @generated from protobuf enum value: UNKNOWN_METRIC = 4;
     */
    UNKNOWN_METRIC = 4,
    /**
     * @generated from protobuf enum value: INTERNAL_ERROR = 5;
     */
    INTERNAL_ERROR = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class TableDefinition$Type extends MessageType<TableDefinition> {
    constructor() {
        super("tabletmanagerdata.TableDefinition", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "columns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "primary_key_columns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "data_length", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "row_count", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Field }
        ]);
    }
    create(value?: PartialMessage<TableDefinition>): TableDefinition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.schema = "";
        message.columns = [];
        message.primaryKeyColumns = [];
        message.type = "";
        message.dataLength = 0n;
        message.rowCount = 0n;
        message.fields = [];
        if (value !== undefined)
            reflectionMergePartial<TableDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TableDefinition): TableDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string schema */ 2:
                    message.schema = reader.string();
                    break;
                case /* repeated string columns */ 3:
                    message.columns.push(reader.string());
                    break;
                case /* repeated string primary_key_columns */ 4:
                    message.primaryKeyColumns.push(reader.string());
                    break;
                case /* string type */ 5:
                    message.type = reader.string();
                    break;
                case /* uint64 data_length */ 6:
                    message.dataLength = reader.uint64().toBigInt();
                    break;
                case /* uint64 row_count */ 7:
                    message.rowCount = reader.uint64().toBigInt();
                    break;
                case /* repeated query.Field fields */ 8:
                    message.fields.push(Field.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TableDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string schema = 2; */
        if (message.schema !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schema);
        /* repeated string columns = 3; */
        for (let i = 0; i < message.columns.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.columns[i]);
        /* repeated string primary_key_columns = 4; */
        for (let i = 0; i < message.primaryKeyColumns.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.primaryKeyColumns[i]);
        /* string type = 5; */
        if (message.type !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.type);
        /* uint64 data_length = 6; */
        if (message.dataLength !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.dataLength);
        /* uint64 row_count = 7; */
        if (message.rowCount !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.rowCount);
        /* repeated query.Field fields = 8; */
        for (let i = 0; i < message.fields.length; i++)
            Field.internalBinaryWrite(message.fields[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.TableDefinition
 */
export const TableDefinition = new TableDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaDefinition$Type extends MessageType<SchemaDefinition> {
    constructor() {
        super("tabletmanagerdata.SchemaDefinition", [
            { no: 1, name: "database_schema", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "table_definitions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TableDefinition }
        ]);
    }
    create(value?: PartialMessage<SchemaDefinition>): SchemaDefinition {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.databaseSchema = "";
        message.tableDefinitions = [];
        if (value !== undefined)
            reflectionMergePartial<SchemaDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaDefinition): SchemaDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string database_schema */ 1:
                    message.databaseSchema = reader.string();
                    break;
                case /* repeated tabletmanagerdata.TableDefinition table_definitions */ 2:
                    message.tableDefinitions.push(TableDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string database_schema = 1; */
        if (message.databaseSchema !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.databaseSchema);
        /* repeated tabletmanagerdata.TableDefinition table_definitions = 2; */
        for (let i = 0; i < message.tableDefinitions.length; i++)
            TableDefinition.internalBinaryWrite(message.tableDefinitions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SchemaDefinition
 */
export const SchemaDefinition = new SchemaDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaChangeResult$Type extends MessageType<SchemaChangeResult> {
    constructor() {
        super("tabletmanagerdata.SchemaChangeResult", [
            { no: 1, name: "before_schema", kind: "message", T: () => SchemaDefinition },
            { no: 2, name: "after_schema", kind: "message", T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<SchemaChangeResult>): SchemaChangeResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SchemaChangeResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaChangeResult): SchemaChangeResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tabletmanagerdata.SchemaDefinition before_schema */ 1:
                    message.beforeSchema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.beforeSchema);
                    break;
                case /* tabletmanagerdata.SchemaDefinition after_schema */ 2:
                    message.afterSchema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.afterSchema);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaChangeResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tabletmanagerdata.SchemaDefinition before_schema = 1; */
        if (message.beforeSchema)
            SchemaDefinition.internalBinaryWrite(message.beforeSchema, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tabletmanagerdata.SchemaDefinition after_schema = 2; */
        if (message.afterSchema)
            SchemaDefinition.internalBinaryWrite(message.afterSchema, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SchemaChangeResult
 */
export const SchemaChangeResult = new SchemaChangeResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserPermission$Type extends MessageType<UserPermission> {
    constructor() {
        super("tabletmanagerdata.UserPermission", [
            { no: 1, name: "host", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "password_checksum", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "privileges", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<UserPermission>): UserPermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.host = "";
        message.user = "";
        message.passwordChecksum = 0n;
        message.privileges = {};
        if (value !== undefined)
            reflectionMergePartial<UserPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserPermission): UserPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host */ 1:
                    message.host = reader.string();
                    break;
                case /* string user */ 2:
                    message.user = reader.string();
                    break;
                case /* uint64 password_checksum */ 3:
                    message.passwordChecksum = reader.uint64().toBigInt();
                    break;
                case /* map<string, string> privileges */ 4:
                    this.binaryReadMap4(message.privileges, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: UserPermission["privileges"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UserPermission["privileges"] | undefined, val: UserPermission["privileges"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.UserPermission.privileges");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: UserPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host = 1; */
        if (message.host !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.host);
        /* string user = 2; */
        if (message.user !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.user);
        /* uint64 password_checksum = 3; */
        if (message.passwordChecksum !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.passwordChecksum);
        /* map<string, string> privileges = 4; */
        for (let k of globalThis.Object.keys(message.privileges))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.privileges[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UserPermission
 */
export const UserPermission = new UserPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DbPermission$Type extends MessageType<DbPermission> {
    constructor() {
        super("tabletmanagerdata.DbPermission", [
            { no: 1, name: "host", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "db", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "privileges", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<DbPermission>): DbPermission {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.host = "";
        message.db = "";
        message.user = "";
        message.privileges = {};
        if (value !== undefined)
            reflectionMergePartial<DbPermission>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DbPermission): DbPermission {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string host */ 1:
                    message.host = reader.string();
                    break;
                case /* string db */ 2:
                    message.db = reader.string();
                    break;
                case /* string user */ 3:
                    message.user = reader.string();
                    break;
                case /* map<string, string> privileges */ 4:
                    this.binaryReadMap4(message.privileges, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: DbPermission["privileges"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DbPermission["privileges"] | undefined, val: DbPermission["privileges"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.DbPermission.privileges");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: DbPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string host = 1; */
        if (message.host !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.host);
        /* string db = 2; */
        if (message.db !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.db);
        /* string user = 3; */
        if (message.user !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.user);
        /* map<string, string> privileges = 4; */
        for (let k of globalThis.Object.keys(message.privileges))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.privileges[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.DbPermission
 */
export const DbPermission = new DbPermission$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Permissions$Type extends MessageType<Permissions> {
    constructor() {
        super("tabletmanagerdata.Permissions", [
            { no: 1, name: "user_permissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UserPermission },
            { no: 2, name: "db_permissions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DbPermission }
        ]);
    }
    create(value?: PartialMessage<Permissions>): Permissions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userPermissions = [];
        message.dbPermissions = [];
        if (value !== undefined)
            reflectionMergePartial<Permissions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Permissions): Permissions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tabletmanagerdata.UserPermission user_permissions */ 1:
                    message.userPermissions.push(UserPermission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated tabletmanagerdata.DbPermission db_permissions */ 2:
                    message.dbPermissions.push(DbPermission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Permissions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tabletmanagerdata.UserPermission user_permissions = 1; */
        for (let i = 0; i < message.userPermissions.length; i++)
            UserPermission.internalBinaryWrite(message.userPermissions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated tabletmanagerdata.DbPermission db_permissions = 2; */
        for (let i = 0; i < message.dbPermissions.length; i++)
            DbPermission.internalBinaryWrite(message.dbPermissions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.Permissions
 */
export const Permissions = new Permissions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRequest$Type extends MessageType<PingRequest> {
    constructor() {
        super("tabletmanagerdata.PingRequest", [
            { no: 1, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingRequest>): PingRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = "";
        if (value !== undefined)
            reflectionMergePartial<PingRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRequest): PingRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payload */ 1:
                    message.payload = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payload = 1; */
        if (message.payload !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PingRequest
 */
export const PingRequest = new PingRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingResponse$Type extends MessageType<PingResponse> {
    constructor() {
        super("tabletmanagerdata.PingResponse", [
            { no: 1, name: "payload", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PingResponse>): PingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = "";
        if (value !== undefined)
            reflectionMergePartial<PingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingResponse): PingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string payload */ 1:
                    message.payload = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string payload = 1; */
        if (message.payload !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PingResponse
 */
export const PingResponse = new PingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SleepRequest$Type extends MessageType<SleepRequest> {
    constructor() {
        super("tabletmanagerdata.SleepRequest", [
            { no: 1, name: "duration", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SleepRequest>): SleepRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.duration = 0n;
        if (value !== undefined)
            reflectionMergePartial<SleepRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SleepRequest): SleepRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 duration */ 1:
                    message.duration = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SleepRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 duration = 1; */
        if (message.duration !== 0n)
            writer.tag(1, WireType.Varint).int64(message.duration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SleepRequest
 */
export const SleepRequest = new SleepRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SleepResponse$Type extends MessageType<SleepResponse> {
    constructor() {
        super("tabletmanagerdata.SleepResponse", []);
    }
    create(value?: PartialMessage<SleepResponse>): SleepResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SleepResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SleepResponse): SleepResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SleepResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SleepResponse
 */
export const SleepResponse = new SleepResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteHookRequest$Type extends MessageType<ExecuteHookRequest> {
    constructor() {
        super("tabletmanagerdata.ExecuteHookRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "parameters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extra_env", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ExecuteHookRequest>): ExecuteHookRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.parameters = [];
        message.extraEnv = {};
        if (value !== undefined)
            reflectionMergePartial<ExecuteHookRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteHookRequest): ExecuteHookRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated string parameters */ 2:
                    message.parameters.push(reader.string());
                    break;
                case /* map<string, string> extra_env */ 3:
                    this.binaryReadMap3(message.extraEnv, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: ExecuteHookRequest["extraEnv"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ExecuteHookRequest["extraEnv"] | undefined, val: ExecuteHookRequest["extraEnv"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.ExecuteHookRequest.extra_env");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ExecuteHookRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated string parameters = 2; */
        for (let i = 0; i < message.parameters.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.parameters[i]);
        /* map<string, string> extra_env = 3; */
        for (let k of globalThis.Object.keys(message.extraEnv))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.extraEnv[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteHookRequest
 */
export const ExecuteHookRequest = new ExecuteHookRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteHookResponse$Type extends MessageType<ExecuteHookResponse> {
    constructor() {
        super("tabletmanagerdata.ExecuteHookResponse", [
            { no: 1, name: "exit_status", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "stdout", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "stderr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteHookResponse>): ExecuteHookResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exitStatus = 0n;
        message.stdout = "";
        message.stderr = "";
        if (value !== undefined)
            reflectionMergePartial<ExecuteHookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteHookResponse): ExecuteHookResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 exit_status */ 1:
                    message.exitStatus = reader.int64().toBigInt();
                    break;
                case /* string stdout */ 2:
                    message.stdout = reader.string();
                    break;
                case /* string stderr */ 3:
                    message.stderr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteHookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 exit_status = 1; */
        if (message.exitStatus !== 0n)
            writer.tag(1, WireType.Varint).int64(message.exitStatus);
        /* string stdout = 2; */
        if (message.stdout !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.stdout);
        /* string stderr = 3; */
        if (message.stderr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.stderr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteHookResponse
 */
export const ExecuteHookResponse = new ExecuteHookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSchemaRequest$Type extends MessageType<GetSchemaRequest> {
    constructor() {
        super("tabletmanagerdata.GetSchemaRequest", [
            { no: 1, name: "tables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "include_views", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "exclude_tables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "table_schema_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetSchemaRequest>): GetSchemaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tables = [];
        message.includeViews = false;
        message.excludeTables = [];
        message.tableSchemaOnly = false;
        if (value !== undefined)
            reflectionMergePartial<GetSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSchemaRequest): GetSchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string tables */ 1:
                    message.tables.push(reader.string());
                    break;
                case /* bool include_views */ 2:
                    message.includeViews = reader.bool();
                    break;
                case /* repeated string exclude_tables */ 3:
                    message.excludeTables.push(reader.string());
                    break;
                case /* bool table_schema_only */ 4:
                    message.tableSchemaOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string tables = 1; */
        for (let i = 0; i < message.tables.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tables[i]);
        /* bool include_views = 2; */
        if (message.includeViews !== false)
            writer.tag(2, WireType.Varint).bool(message.includeViews);
        /* repeated string exclude_tables = 3; */
        for (let i = 0; i < message.excludeTables.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.excludeTables[i]);
        /* bool table_schema_only = 4; */
        if (message.tableSchemaOnly !== false)
            writer.tag(4, WireType.Varint).bool(message.tableSchemaOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetSchemaRequest
 */
export const GetSchemaRequest = new GetSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSchemaResponse$Type extends MessageType<GetSchemaResponse> {
    constructor() {
        super("tabletmanagerdata.GetSchemaResponse", [
            { no: 1, name: "schema_definition", kind: "message", T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<GetSchemaResponse>): GetSchemaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSchemaResponse): GetSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tabletmanagerdata.SchemaDefinition schema_definition */ 1:
                    message.schemaDefinition = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.schemaDefinition);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tabletmanagerdata.SchemaDefinition schema_definition = 1; */
        if (message.schemaDefinition)
            SchemaDefinition.internalBinaryWrite(message.schemaDefinition, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetSchemaResponse
 */
export const GetSchemaResponse = new GetSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPermissionsRequest$Type extends MessageType<GetPermissionsRequest> {
    constructor() {
        super("tabletmanagerdata.GetPermissionsRequest", []);
    }
    create(value?: PartialMessage<GetPermissionsRequest>): GetPermissionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPermissionsRequest): GetPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetPermissionsRequest
 */
export const GetPermissionsRequest = new GetPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPermissionsResponse$Type extends MessageType<GetPermissionsResponse> {
    constructor() {
        super("tabletmanagerdata.GetPermissionsResponse", [
            { no: 1, name: "permissions", kind: "message", T: () => Permissions }
        ]);
    }
    create(value?: PartialMessage<GetPermissionsResponse>): GetPermissionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPermissionsResponse): GetPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tabletmanagerdata.Permissions permissions */ 1:
                    message.permissions = Permissions.internalBinaryRead(reader, reader.uint32(), options, message.permissions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tabletmanagerdata.Permissions permissions = 1; */
        if (message.permissions)
            Permissions.internalBinaryWrite(message.permissions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetPermissionsResponse
 */
export const GetPermissionsResponse = new GetPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGlobalStatusVarsRequest$Type extends MessageType<GetGlobalStatusVarsRequest> {
    constructor() {
        super("tabletmanagerdata.GetGlobalStatusVarsRequest", [
            { no: 1, name: "variables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGlobalStatusVarsRequest>): GetGlobalStatusVarsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.variables = [];
        if (value !== undefined)
            reflectionMergePartial<GetGlobalStatusVarsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGlobalStatusVarsRequest): GetGlobalStatusVarsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string variables */ 1:
                    message.variables.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGlobalStatusVarsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string variables = 1; */
        for (let i = 0; i < message.variables.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.variables[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetGlobalStatusVarsRequest
 */
export const GetGlobalStatusVarsRequest = new GetGlobalStatusVarsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGlobalStatusVarsResponse$Type extends MessageType<GetGlobalStatusVarsResponse> {
    constructor() {
        super("tabletmanagerdata.GetGlobalStatusVarsResponse", [
            { no: 1, name: "status_values", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<GetGlobalStatusVarsResponse>): GetGlobalStatusVarsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statusValues = {};
        if (value !== undefined)
            reflectionMergePartial<GetGlobalStatusVarsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGlobalStatusVarsResponse): GetGlobalStatusVarsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> status_values */ 1:
                    this.binaryReadMap1(message.statusValues, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GetGlobalStatusVarsResponse["statusValues"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetGlobalStatusVarsResponse["statusValues"] | undefined, val: GetGlobalStatusVarsResponse["statusValues"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetGlobalStatusVarsResponse.status_values");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: GetGlobalStatusVarsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> status_values = 1; */
        for (let k of globalThis.Object.keys(message.statusValues))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.statusValues[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetGlobalStatusVarsResponse
 */
export const GetGlobalStatusVarsResponse = new GetGlobalStatusVarsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReadOnlyRequest$Type extends MessageType<SetReadOnlyRequest> {
    constructor() {
        super("tabletmanagerdata.SetReadOnlyRequest", []);
    }
    create(value?: PartialMessage<SetReadOnlyRequest>): SetReadOnlyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetReadOnlyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReadOnlyRequest): SetReadOnlyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReadOnlyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SetReadOnlyRequest
 */
export const SetReadOnlyRequest = new SetReadOnlyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReadOnlyResponse$Type extends MessageType<SetReadOnlyResponse> {
    constructor() {
        super("tabletmanagerdata.SetReadOnlyResponse", []);
    }
    create(value?: PartialMessage<SetReadOnlyResponse>): SetReadOnlyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetReadOnlyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReadOnlyResponse): SetReadOnlyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReadOnlyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SetReadOnlyResponse
 */
export const SetReadOnlyResponse = new SetReadOnlyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReadWriteRequest$Type extends MessageType<SetReadWriteRequest> {
    constructor() {
        super("tabletmanagerdata.SetReadWriteRequest", []);
    }
    create(value?: PartialMessage<SetReadWriteRequest>): SetReadWriteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetReadWriteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReadWriteRequest): SetReadWriteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReadWriteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SetReadWriteRequest
 */
export const SetReadWriteRequest = new SetReadWriteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReadWriteResponse$Type extends MessageType<SetReadWriteResponse> {
    constructor() {
        super("tabletmanagerdata.SetReadWriteResponse", []);
    }
    create(value?: PartialMessage<SetReadWriteResponse>): SetReadWriteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetReadWriteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReadWriteResponse): SetReadWriteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReadWriteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SetReadWriteResponse
 */
export const SetReadWriteResponse = new SetReadWriteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeTypeRequest$Type extends MessageType<ChangeTypeRequest> {
    constructor() {
        super("tabletmanagerdata.ChangeTypeRequest", [
            { no: 1, name: "tablet_type", kind: "enum", T: () => ["topodata.TabletType", TabletType] },
            { no: 2, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeTypeRequest>): ChangeTypeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tabletType = 0;
        message.semiSync = false;
        if (value !== undefined)
            reflectionMergePartial<ChangeTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeTypeRequest): ChangeTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* topodata.TabletType tablet_type */ 1:
                    message.tabletType = reader.int32();
                    break;
                case /* bool semiSync */ 2:
                    message.semiSync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* topodata.TabletType tablet_type = 1; */
        if (message.tabletType !== 0)
            writer.tag(1, WireType.Varint).int32(message.tabletType);
        /* bool semiSync = 2; */
        if (message.semiSync !== false)
            writer.tag(2, WireType.Varint).bool(message.semiSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ChangeTypeRequest
 */
export const ChangeTypeRequest = new ChangeTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeTypeResponse$Type extends MessageType<ChangeTypeResponse> {
    constructor() {
        super("tabletmanagerdata.ChangeTypeResponse", []);
    }
    create(value?: PartialMessage<ChangeTypeResponse>): ChangeTypeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangeTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeTypeResponse): ChangeTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ChangeTypeResponse
 */
export const ChangeTypeResponse = new ChangeTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshStateRequest$Type extends MessageType<RefreshStateRequest> {
    constructor() {
        super("tabletmanagerdata.RefreshStateRequest", []);
    }
    create(value?: PartialMessage<RefreshStateRequest>): RefreshStateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RefreshStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshStateRequest): RefreshStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.RefreshStateRequest
 */
export const RefreshStateRequest = new RefreshStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshStateResponse$Type extends MessageType<RefreshStateResponse> {
    constructor() {
        super("tabletmanagerdata.RefreshStateResponse", []);
    }
    create(value?: PartialMessage<RefreshStateResponse>): RefreshStateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RefreshStateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RefreshStateResponse): RefreshStateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RefreshStateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.RefreshStateResponse
 */
export const RefreshStateResponse = new RefreshStateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunHealthCheckRequest$Type extends MessageType<RunHealthCheckRequest> {
    constructor() {
        super("tabletmanagerdata.RunHealthCheckRequest", []);
    }
    create(value?: PartialMessage<RunHealthCheckRequest>): RunHealthCheckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RunHealthCheckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunHealthCheckRequest): RunHealthCheckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunHealthCheckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.RunHealthCheckRequest
 */
export const RunHealthCheckRequest = new RunHealthCheckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunHealthCheckResponse$Type extends MessageType<RunHealthCheckResponse> {
    constructor() {
        super("tabletmanagerdata.RunHealthCheckResponse", []);
    }
    create(value?: PartialMessage<RunHealthCheckResponse>): RunHealthCheckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RunHealthCheckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunHealthCheckResponse): RunHealthCheckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunHealthCheckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.RunHealthCheckResponse
 */
export const RunHealthCheckResponse = new RunHealthCheckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReloadSchemaRequest$Type extends MessageType<ReloadSchemaRequest> {
    constructor() {
        super("tabletmanagerdata.ReloadSchemaRequest", [
            { no: 1, name: "wait_position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReloadSchemaRequest>): ReloadSchemaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.waitPosition = "";
        if (value !== undefined)
            reflectionMergePartial<ReloadSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReloadSchemaRequest): ReloadSchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string wait_position */ 1:
                    message.waitPosition = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReloadSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string wait_position = 1; */
        if (message.waitPosition !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.waitPosition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReloadSchemaRequest
 */
export const ReloadSchemaRequest = new ReloadSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReloadSchemaResponse$Type extends MessageType<ReloadSchemaResponse> {
    constructor() {
        super("tabletmanagerdata.ReloadSchemaResponse", []);
    }
    create(value?: PartialMessage<ReloadSchemaResponse>): ReloadSchemaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReloadSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReloadSchemaResponse): ReloadSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReloadSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReloadSchemaResponse
 */
export const ReloadSchemaResponse = new ReloadSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreflightSchemaRequest$Type extends MessageType<PreflightSchemaRequest> {
    constructor() {
        super("tabletmanagerdata.PreflightSchemaRequest", [
            { no: 1, name: "changes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PreflightSchemaRequest>): PreflightSchemaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.changes = [];
        if (value !== undefined)
            reflectionMergePartial<PreflightSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreflightSchemaRequest): PreflightSchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string changes */ 1:
                    message.changes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreflightSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string changes = 1; */
        for (let i = 0; i < message.changes.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.changes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PreflightSchemaRequest
 */
export const PreflightSchemaRequest = new PreflightSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PreflightSchemaResponse$Type extends MessageType<PreflightSchemaResponse> {
    constructor() {
        super("tabletmanagerdata.PreflightSchemaResponse", [
            { no: 1, name: "change_results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaChangeResult }
        ]);
    }
    create(value?: PartialMessage<PreflightSchemaResponse>): PreflightSchemaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.changeResults = [];
        if (value !== undefined)
            reflectionMergePartial<PreflightSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PreflightSchemaResponse): PreflightSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tabletmanagerdata.SchemaChangeResult change_results */ 1:
                    message.changeResults.push(SchemaChangeResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PreflightSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tabletmanagerdata.SchemaChangeResult change_results = 1; */
        for (let i = 0; i < message.changeResults.length; i++)
            SchemaChangeResult.internalBinaryWrite(message.changeResults[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PreflightSchemaResponse
 */
export const PreflightSchemaResponse = new PreflightSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplySchemaRequest$Type extends MessageType<ApplySchemaRequest> {
    constructor() {
        super("tabletmanagerdata.ApplySchemaRequest", [
            { no: 1, name: "sql", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "force", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "allow_replication", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "before_schema", kind: "message", T: () => SchemaDefinition },
            { no: 5, name: "after_schema", kind: "message", T: () => SchemaDefinition },
            { no: 6, name: "sql_mode", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "batch_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "disable_foreign_key_checks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ApplySchemaRequest>): ApplySchemaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sql = "";
        message.force = false;
        message.allowReplication = false;
        message.sqlMode = "";
        message.batchSize = 0n;
        message.disableForeignKeyChecks = false;
        if (value !== undefined)
            reflectionMergePartial<ApplySchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplySchemaRequest): ApplySchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sql */ 1:
                    message.sql = reader.string();
                    break;
                case /* bool force */ 2:
                    message.force = reader.bool();
                    break;
                case /* bool allow_replication */ 3:
                    message.allowReplication = reader.bool();
                    break;
                case /* tabletmanagerdata.SchemaDefinition before_schema */ 4:
                    message.beforeSchema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.beforeSchema);
                    break;
                case /* tabletmanagerdata.SchemaDefinition after_schema */ 5:
                    message.afterSchema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.afterSchema);
                    break;
                case /* string sql_mode */ 6:
                    message.sqlMode = reader.string();
                    break;
                case /* int64 batch_size */ 7:
                    message.batchSize = reader.int64().toBigInt();
                    break;
                case /* bool disable_foreign_key_checks */ 8:
                    message.disableForeignKeyChecks = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplySchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sql = 1; */
        if (message.sql !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sql);
        /* bool force = 2; */
        if (message.force !== false)
            writer.tag(2, WireType.Varint).bool(message.force);
        /* bool allow_replication = 3; */
        if (message.allowReplication !== false)
            writer.tag(3, WireType.Varint).bool(message.allowReplication);
        /* tabletmanagerdata.SchemaDefinition before_schema = 4; */
        if (message.beforeSchema)
            SchemaDefinition.internalBinaryWrite(message.beforeSchema, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* tabletmanagerdata.SchemaDefinition after_schema = 5; */
        if (message.afterSchema)
            SchemaDefinition.internalBinaryWrite(message.afterSchema, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string sql_mode = 6; */
        if (message.sqlMode !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.sqlMode);
        /* int64 batch_size = 7; */
        if (message.batchSize !== 0n)
            writer.tag(7, WireType.Varint).int64(message.batchSize);
        /* bool disable_foreign_key_checks = 8; */
        if (message.disableForeignKeyChecks !== false)
            writer.tag(8, WireType.Varint).bool(message.disableForeignKeyChecks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ApplySchemaRequest
 */
export const ApplySchemaRequest = new ApplySchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplySchemaResponse$Type extends MessageType<ApplySchemaResponse> {
    constructor() {
        super("tabletmanagerdata.ApplySchemaResponse", [
            { no: 1, name: "before_schema", kind: "message", T: () => SchemaDefinition },
            { no: 2, name: "after_schema", kind: "message", T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<ApplySchemaResponse>): ApplySchemaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ApplySchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplySchemaResponse): ApplySchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tabletmanagerdata.SchemaDefinition before_schema */ 1:
                    message.beforeSchema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.beforeSchema);
                    break;
                case /* tabletmanagerdata.SchemaDefinition after_schema */ 2:
                    message.afterSchema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.afterSchema);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplySchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tabletmanagerdata.SchemaDefinition before_schema = 1; */
        if (message.beforeSchema)
            SchemaDefinition.internalBinaryWrite(message.beforeSchema, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tabletmanagerdata.SchemaDefinition after_schema = 2; */
        if (message.afterSchema)
            SchemaDefinition.internalBinaryWrite(message.afterSchema, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ApplySchemaResponse
 */
export const ApplySchemaResponse = new ApplySchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockTablesRequest$Type extends MessageType<LockTablesRequest> {
    constructor() {
        super("tabletmanagerdata.LockTablesRequest", []);
    }
    create(value?: PartialMessage<LockTablesRequest>): LockTablesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LockTablesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockTablesRequest): LockTablesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LockTablesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.LockTablesRequest
 */
export const LockTablesRequest = new LockTablesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockTablesResponse$Type extends MessageType<LockTablesResponse> {
    constructor() {
        super("tabletmanagerdata.LockTablesResponse", []);
    }
    create(value?: PartialMessage<LockTablesResponse>): LockTablesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LockTablesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockTablesResponse): LockTablesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LockTablesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.LockTablesResponse
 */
export const LockTablesResponse = new LockTablesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockTablesRequest$Type extends MessageType<UnlockTablesRequest> {
    constructor() {
        super("tabletmanagerdata.UnlockTablesRequest", []);
    }
    create(value?: PartialMessage<UnlockTablesRequest>): UnlockTablesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UnlockTablesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockTablesRequest): UnlockTablesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlockTablesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UnlockTablesRequest
 */
export const UnlockTablesRequest = new UnlockTablesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockTablesResponse$Type extends MessageType<UnlockTablesResponse> {
    constructor() {
        super("tabletmanagerdata.UnlockTablesResponse", []);
    }
    create(value?: PartialMessage<UnlockTablesResponse>): UnlockTablesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UnlockTablesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockTablesResponse): UnlockTablesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlockTablesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UnlockTablesResponse
 */
export const UnlockTablesResponse = new UnlockTablesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteQueryRequest$Type extends MessageType<ExecuteQueryRequest> {
    constructor() {
        super("tabletmanagerdata.ExecuteQueryRequest", [
            { no: 1, name: "query", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "db_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "max_rows", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "caller_id", kind: "message", T: () => CallerID }
        ]);
    }
    create(value?: PartialMessage<ExecuteQueryRequest>): ExecuteQueryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = new Uint8Array(0);
        message.dbName = "";
        message.maxRows = 0n;
        if (value !== undefined)
            reflectionMergePartial<ExecuteQueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteQueryRequest): ExecuteQueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes query */ 1:
                    message.query = reader.bytes();
                    break;
                case /* string db_name */ 2:
                    message.dbName = reader.string();
                    break;
                case /* uint64 max_rows */ 3:
                    message.maxRows = reader.uint64().toBigInt();
                    break;
                case /* vtrpc.CallerID caller_id */ 4:
                    message.callerId = CallerID.internalBinaryRead(reader, reader.uint32(), options, message.callerId);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteQueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes query = 1; */
        if (message.query.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.query);
        /* string db_name = 2; */
        if (message.dbName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbName);
        /* uint64 max_rows = 3; */
        if (message.maxRows !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.maxRows);
        /* vtrpc.CallerID caller_id = 4; */
        if (message.callerId)
            CallerID.internalBinaryWrite(message.callerId, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteQueryRequest
 */
export const ExecuteQueryRequest = new ExecuteQueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteQueryResponse$Type extends MessageType<ExecuteQueryResponse> {
    constructor() {
        super("tabletmanagerdata.ExecuteQueryResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<ExecuteQueryResponse>): ExecuteQueryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteQueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteQueryResponse): ExecuteQueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteQueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteQueryResponse
 */
export const ExecuteQueryResponse = new ExecuteQueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFetchAsDbaRequest$Type extends MessageType<ExecuteFetchAsDbaRequest> {
    constructor() {
        super("tabletmanagerdata.ExecuteFetchAsDbaRequest", [
            { no: 1, name: "query", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "db_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "max_rows", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "disable_binlogs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "reload_schema", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "disable_foreign_key_checks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteFetchAsDbaRequest>): ExecuteFetchAsDbaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = new Uint8Array(0);
        message.dbName = "";
        message.maxRows = 0n;
        message.disableBinlogs = false;
        message.reloadSchema = false;
        message.disableForeignKeyChecks = false;
        if (value !== undefined)
            reflectionMergePartial<ExecuteFetchAsDbaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFetchAsDbaRequest): ExecuteFetchAsDbaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes query */ 1:
                    message.query = reader.bytes();
                    break;
                case /* string db_name */ 2:
                    message.dbName = reader.string();
                    break;
                case /* uint64 max_rows */ 3:
                    message.maxRows = reader.uint64().toBigInt();
                    break;
                case /* bool disable_binlogs */ 4:
                    message.disableBinlogs = reader.bool();
                    break;
                case /* bool reload_schema */ 5:
                    message.reloadSchema = reader.bool();
                    break;
                case /* bool disable_foreign_key_checks */ 6:
                    message.disableForeignKeyChecks = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFetchAsDbaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes query = 1; */
        if (message.query.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.query);
        /* string db_name = 2; */
        if (message.dbName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbName);
        /* uint64 max_rows = 3; */
        if (message.maxRows !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.maxRows);
        /* bool disable_binlogs = 4; */
        if (message.disableBinlogs !== false)
            writer.tag(4, WireType.Varint).bool(message.disableBinlogs);
        /* bool reload_schema = 5; */
        if (message.reloadSchema !== false)
            writer.tag(5, WireType.Varint).bool(message.reloadSchema);
        /* bool disable_foreign_key_checks = 6; */
        if (message.disableForeignKeyChecks !== false)
            writer.tag(6, WireType.Varint).bool(message.disableForeignKeyChecks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteFetchAsDbaRequest
 */
export const ExecuteFetchAsDbaRequest = new ExecuteFetchAsDbaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFetchAsDbaResponse$Type extends MessageType<ExecuteFetchAsDbaResponse> {
    constructor() {
        super("tabletmanagerdata.ExecuteFetchAsDbaResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<ExecuteFetchAsDbaResponse>): ExecuteFetchAsDbaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteFetchAsDbaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFetchAsDbaResponse): ExecuteFetchAsDbaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFetchAsDbaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteFetchAsDbaResponse
 */
export const ExecuteFetchAsDbaResponse = new ExecuteFetchAsDbaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteMultiFetchAsDbaRequest$Type extends MessageType<ExecuteMultiFetchAsDbaRequest> {
    constructor() {
        super("tabletmanagerdata.ExecuteMultiFetchAsDbaRequest", [
            { no: 1, name: "sql", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "db_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "max_rows", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "disable_binlogs", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "reload_schema", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "disable_foreign_key_checks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteMultiFetchAsDbaRequest>): ExecuteMultiFetchAsDbaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sql = new Uint8Array(0);
        message.dbName = "";
        message.maxRows = 0n;
        message.disableBinlogs = false;
        message.reloadSchema = false;
        message.disableForeignKeyChecks = false;
        if (value !== undefined)
            reflectionMergePartial<ExecuteMultiFetchAsDbaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteMultiFetchAsDbaRequest): ExecuteMultiFetchAsDbaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes sql */ 1:
                    message.sql = reader.bytes();
                    break;
                case /* string db_name */ 2:
                    message.dbName = reader.string();
                    break;
                case /* uint64 max_rows */ 3:
                    message.maxRows = reader.uint64().toBigInt();
                    break;
                case /* bool disable_binlogs */ 4:
                    message.disableBinlogs = reader.bool();
                    break;
                case /* bool reload_schema */ 5:
                    message.reloadSchema = reader.bool();
                    break;
                case /* bool disable_foreign_key_checks */ 6:
                    message.disableForeignKeyChecks = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteMultiFetchAsDbaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes sql = 1; */
        if (message.sql.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sql);
        /* string db_name = 2; */
        if (message.dbName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbName);
        /* uint64 max_rows = 3; */
        if (message.maxRows !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.maxRows);
        /* bool disable_binlogs = 4; */
        if (message.disableBinlogs !== false)
            writer.tag(4, WireType.Varint).bool(message.disableBinlogs);
        /* bool reload_schema = 5; */
        if (message.reloadSchema !== false)
            writer.tag(5, WireType.Varint).bool(message.reloadSchema);
        /* bool disable_foreign_key_checks = 6; */
        if (message.disableForeignKeyChecks !== false)
            writer.tag(6, WireType.Varint).bool(message.disableForeignKeyChecks);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteMultiFetchAsDbaRequest
 */
export const ExecuteMultiFetchAsDbaRequest = new ExecuteMultiFetchAsDbaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteMultiFetchAsDbaResponse$Type extends MessageType<ExecuteMultiFetchAsDbaResponse> {
    constructor() {
        super("tabletmanagerdata.ExecuteMultiFetchAsDbaResponse", [
            { no: 1, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<ExecuteMultiFetchAsDbaResponse>): ExecuteMultiFetchAsDbaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.results = [];
        if (value !== undefined)
            reflectionMergePartial<ExecuteMultiFetchAsDbaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteMultiFetchAsDbaResponse): ExecuteMultiFetchAsDbaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated query.QueryResult results */ 1:
                    message.results.push(QueryResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteMultiFetchAsDbaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated query.QueryResult results = 1; */
        for (let i = 0; i < message.results.length; i++)
            QueryResult.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteMultiFetchAsDbaResponse
 */
export const ExecuteMultiFetchAsDbaResponse = new ExecuteMultiFetchAsDbaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFetchAsAllPrivsRequest$Type extends MessageType<ExecuteFetchAsAllPrivsRequest> {
    constructor() {
        super("tabletmanagerdata.ExecuteFetchAsAllPrivsRequest", [
            { no: 1, name: "query", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "db_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "max_rows", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "reload_schema", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteFetchAsAllPrivsRequest>): ExecuteFetchAsAllPrivsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = new Uint8Array(0);
        message.dbName = "";
        message.maxRows = 0n;
        message.reloadSchema = false;
        if (value !== undefined)
            reflectionMergePartial<ExecuteFetchAsAllPrivsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFetchAsAllPrivsRequest): ExecuteFetchAsAllPrivsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes query */ 1:
                    message.query = reader.bytes();
                    break;
                case /* string db_name */ 2:
                    message.dbName = reader.string();
                    break;
                case /* uint64 max_rows */ 3:
                    message.maxRows = reader.uint64().toBigInt();
                    break;
                case /* bool reload_schema */ 4:
                    message.reloadSchema = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFetchAsAllPrivsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes query = 1; */
        if (message.query.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.query);
        /* string db_name = 2; */
        if (message.dbName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.dbName);
        /* uint64 max_rows = 3; */
        if (message.maxRows !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.maxRows);
        /* bool reload_schema = 4; */
        if (message.reloadSchema !== false)
            writer.tag(4, WireType.Varint).bool(message.reloadSchema);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteFetchAsAllPrivsRequest
 */
export const ExecuteFetchAsAllPrivsRequest = new ExecuteFetchAsAllPrivsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFetchAsAllPrivsResponse$Type extends MessageType<ExecuteFetchAsAllPrivsResponse> {
    constructor() {
        super("tabletmanagerdata.ExecuteFetchAsAllPrivsResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<ExecuteFetchAsAllPrivsResponse>): ExecuteFetchAsAllPrivsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteFetchAsAllPrivsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFetchAsAllPrivsResponse): ExecuteFetchAsAllPrivsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFetchAsAllPrivsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteFetchAsAllPrivsResponse
 */
export const ExecuteFetchAsAllPrivsResponse = new ExecuteFetchAsAllPrivsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFetchAsAppRequest$Type extends MessageType<ExecuteFetchAsAppRequest> {
    constructor() {
        super("tabletmanagerdata.ExecuteFetchAsAppRequest", [
            { no: 1, name: "query", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "max_rows", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ExecuteFetchAsAppRequest>): ExecuteFetchAsAppRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = new Uint8Array(0);
        message.maxRows = 0n;
        if (value !== undefined)
            reflectionMergePartial<ExecuteFetchAsAppRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFetchAsAppRequest): ExecuteFetchAsAppRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes query */ 1:
                    message.query = reader.bytes();
                    break;
                case /* uint64 max_rows */ 2:
                    message.maxRows = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFetchAsAppRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes query = 1; */
        if (message.query.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.query);
        /* uint64 max_rows = 2; */
        if (message.maxRows !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.maxRows);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteFetchAsAppRequest
 */
export const ExecuteFetchAsAppRequest = new ExecuteFetchAsAppRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFetchAsAppResponse$Type extends MessageType<ExecuteFetchAsAppResponse> {
    constructor() {
        super("tabletmanagerdata.ExecuteFetchAsAppResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<ExecuteFetchAsAppResponse>): ExecuteFetchAsAppResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteFetchAsAppResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFetchAsAppResponse): ExecuteFetchAsAppResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFetchAsAppResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ExecuteFetchAsAppResponse
 */
export const ExecuteFetchAsAppResponse = new ExecuteFetchAsAppResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUnresolvedTransactionsRequest$Type extends MessageType<GetUnresolvedTransactionsRequest> {
    constructor() {
        super("tabletmanagerdata.GetUnresolvedTransactionsRequest", [
            { no: 1, name: "abandon_age", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetUnresolvedTransactionsRequest>): GetUnresolvedTransactionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.abandonAge = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetUnresolvedTransactionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUnresolvedTransactionsRequest): GetUnresolvedTransactionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 abandon_age */ 1:
                    message.abandonAge = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUnresolvedTransactionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 abandon_age = 1; */
        if (message.abandonAge !== 0n)
            writer.tag(1, WireType.Varint).int64(message.abandonAge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetUnresolvedTransactionsRequest
 */
export const GetUnresolvedTransactionsRequest = new GetUnresolvedTransactionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUnresolvedTransactionsResponse$Type extends MessageType<GetUnresolvedTransactionsResponse> {
    constructor() {
        super("tabletmanagerdata.GetUnresolvedTransactionsResponse", [
            { no: 1, name: "transactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => TransactionMetadata }
        ]);
    }
    create(value?: PartialMessage<GetUnresolvedTransactionsResponse>): GetUnresolvedTransactionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transactions = [];
        if (value !== undefined)
            reflectionMergePartial<GetUnresolvedTransactionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUnresolvedTransactionsResponse): GetUnresolvedTransactionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated query.TransactionMetadata transactions */ 1:
                    message.transactions.push(TransactionMetadata.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUnresolvedTransactionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated query.TransactionMetadata transactions = 1; */
        for (let i = 0; i < message.transactions.length; i++)
            TransactionMetadata.internalBinaryWrite(message.transactions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetUnresolvedTransactionsResponse
 */
export const GetUnresolvedTransactionsResponse = new GetUnresolvedTransactionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadTransactionRequest$Type extends MessageType<ReadTransactionRequest> {
    constructor() {
        super("tabletmanagerdata.ReadTransactionRequest", [
            { no: 1, name: "dtid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReadTransactionRequest>): ReadTransactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dtid = "";
        if (value !== undefined)
            reflectionMergePartial<ReadTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadTransactionRequest): ReadTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dtid */ 1:
                    message.dtid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dtid = 1; */
        if (message.dtid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dtid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadTransactionRequest
 */
export const ReadTransactionRequest = new ReadTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadTransactionResponse$Type extends MessageType<ReadTransactionResponse> {
    constructor() {
        super("tabletmanagerdata.ReadTransactionResponse", [
            { no: 1, name: "transaction", kind: "message", T: () => TransactionMetadata }
        ]);
    }
    create(value?: PartialMessage<ReadTransactionResponse>): ReadTransactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReadTransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadTransactionResponse): ReadTransactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.TransactionMetadata transaction */ 1:
                    message.transaction = TransactionMetadata.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.TransactionMetadata transaction = 1; */
        if (message.transaction)
            TransactionMetadata.internalBinaryWrite(message.transaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadTransactionResponse
 */
export const ReadTransactionResponse = new ReadTransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConcludeTransactionRequest$Type extends MessageType<ConcludeTransactionRequest> {
    constructor() {
        super("tabletmanagerdata.ConcludeTransactionRequest", [
            { no: 1, name: "dtid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mm", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ConcludeTransactionRequest>): ConcludeTransactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dtid = "";
        message.mm = false;
        if (value !== undefined)
            reflectionMergePartial<ConcludeTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConcludeTransactionRequest): ConcludeTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string dtid */ 1:
                    message.dtid = reader.string();
                    break;
                case /* bool mm */ 2:
                    message.mm = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConcludeTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string dtid = 1; */
        if (message.dtid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dtid);
        /* bool mm = 2; */
        if (message.mm !== false)
            writer.tag(2, WireType.Varint).bool(message.mm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ConcludeTransactionRequest
 */
export const ConcludeTransactionRequest = new ConcludeTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConcludeTransactionResponse$Type extends MessageType<ConcludeTransactionResponse> {
    constructor() {
        super("tabletmanagerdata.ConcludeTransactionResponse", []);
    }
    create(value?: PartialMessage<ConcludeTransactionResponse>): ConcludeTransactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ConcludeTransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConcludeTransactionResponse): ConcludeTransactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConcludeTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ConcludeTransactionResponse
 */
export const ConcludeTransactionResponse = new ConcludeTransactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MysqlHostMetricsRequest$Type extends MessageType<MysqlHostMetricsRequest> {
    constructor() {
        super("tabletmanagerdata.MysqlHostMetricsRequest", []);
    }
    create(value?: PartialMessage<MysqlHostMetricsRequest>): MysqlHostMetricsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MysqlHostMetricsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MysqlHostMetricsRequest): MysqlHostMetricsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MysqlHostMetricsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.MysqlHostMetricsRequest
 */
export const MysqlHostMetricsRequest = new MysqlHostMetricsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MysqlHostMetricsResponse$Type extends MessageType<MysqlHostMetricsResponse> {
    constructor() {
        super("tabletmanagerdata.MysqlHostMetricsResponse", [
            { no: 1, name: "HostMetrics", kind: "message", jsonName: "HostMetrics", T: () => HostMetricsResponse }
        ]);
    }
    create(value?: PartialMessage<MysqlHostMetricsResponse>): MysqlHostMetricsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MysqlHostMetricsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MysqlHostMetricsResponse): MysqlHostMetricsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mysqlctl.HostMetricsResponse HostMetrics = 1 [json_name = "HostMetrics"];*/ 1:
                    message.hostMetrics = HostMetricsResponse.internalBinaryRead(reader, reader.uint32(), options, message.hostMetrics);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MysqlHostMetricsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mysqlctl.HostMetricsResponse HostMetrics = 1 [json_name = "HostMetrics"]; */
        if (message.hostMetrics)
            HostMetricsResponse.internalBinaryWrite(message.hostMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.MysqlHostMetricsResponse
 */
export const MysqlHostMetricsResponse = new MysqlHostMetricsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplicationStatusRequest$Type extends MessageType<ReplicationStatusRequest> {
    constructor() {
        super("tabletmanagerdata.ReplicationStatusRequest", []);
    }
    create(value?: PartialMessage<ReplicationStatusRequest>): ReplicationStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReplicationStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplicationStatusRequest): ReplicationStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplicationStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReplicationStatusRequest
 */
export const ReplicationStatusRequest = new ReplicationStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplicationStatusResponse$Type extends MessageType<ReplicationStatusResponse> {
    constructor() {
        super("tabletmanagerdata.ReplicationStatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<ReplicationStatusResponse>): ReplicationStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReplicationStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplicationStatusResponse): ReplicationStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* replicationdata.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplicationStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* replicationdata.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReplicationStatusResponse
 */
export const ReplicationStatusResponse = new ReplicationStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrimaryStatusRequest$Type extends MessageType<PrimaryStatusRequest> {
    constructor() {
        super("tabletmanagerdata.PrimaryStatusRequest", []);
    }
    create(value?: PartialMessage<PrimaryStatusRequest>): PrimaryStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PrimaryStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimaryStatusRequest): PrimaryStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrimaryStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PrimaryStatusRequest
 */
export const PrimaryStatusRequest = new PrimaryStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrimaryStatusResponse$Type extends MessageType<PrimaryStatusResponse> {
    constructor() {
        super("tabletmanagerdata.PrimaryStatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => PrimaryStatus }
        ]);
    }
    create(value?: PartialMessage<PrimaryStatusResponse>): PrimaryStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PrimaryStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimaryStatusResponse): PrimaryStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* replicationdata.PrimaryStatus status */ 1:
                    message.status = PrimaryStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrimaryStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* replicationdata.PrimaryStatus status = 1; */
        if (message.status)
            PrimaryStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PrimaryStatusResponse
 */
export const PrimaryStatusResponse = new PrimaryStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrimaryPositionRequest$Type extends MessageType<PrimaryPositionRequest> {
    constructor() {
        super("tabletmanagerdata.PrimaryPositionRequest", []);
    }
    create(value?: PartialMessage<PrimaryPositionRequest>): PrimaryPositionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PrimaryPositionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimaryPositionRequest): PrimaryPositionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrimaryPositionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PrimaryPositionRequest
 */
export const PrimaryPositionRequest = new PrimaryPositionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrimaryPositionResponse$Type extends MessageType<PrimaryPositionResponse> {
    constructor() {
        super("tabletmanagerdata.PrimaryPositionResponse", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PrimaryPositionResponse>): PrimaryPositionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<PrimaryPositionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrimaryPositionResponse): PrimaryPositionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrimaryPositionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PrimaryPositionResponse
 */
export const PrimaryPositionResponse = new PrimaryPositionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaitForPositionRequest$Type extends MessageType<WaitForPositionRequest> {
    constructor() {
        super("tabletmanagerdata.WaitForPositionRequest", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WaitForPositionRequest>): WaitForPositionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<WaitForPositionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WaitForPositionRequest): WaitForPositionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WaitForPositionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.WaitForPositionRequest
 */
export const WaitForPositionRequest = new WaitForPositionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaitForPositionResponse$Type extends MessageType<WaitForPositionResponse> {
    constructor() {
        super("tabletmanagerdata.WaitForPositionResponse", []);
    }
    create(value?: PartialMessage<WaitForPositionResponse>): WaitForPositionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<WaitForPositionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WaitForPositionResponse): WaitForPositionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WaitForPositionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.WaitForPositionResponse
 */
export const WaitForPositionResponse = new WaitForPositionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReplicationRequest$Type extends MessageType<StopReplicationRequest> {
    constructor() {
        super("tabletmanagerdata.StopReplicationRequest", []);
    }
    create(value?: PartialMessage<StopReplicationRequest>): StopReplicationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopReplicationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReplicationRequest): StopReplicationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReplicationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StopReplicationRequest
 */
export const StopReplicationRequest = new StopReplicationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReplicationResponse$Type extends MessageType<StopReplicationResponse> {
    constructor() {
        super("tabletmanagerdata.StopReplicationResponse", []);
    }
    create(value?: PartialMessage<StopReplicationResponse>): StopReplicationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopReplicationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReplicationResponse): StopReplicationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReplicationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StopReplicationResponse
 */
export const StopReplicationResponse = new StopReplicationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReplicationMinimumRequest$Type extends MessageType<StopReplicationMinimumRequest> {
    constructor() {
        super("tabletmanagerdata.StopReplicationMinimumRequest", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wait_timeout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StopReplicationMinimumRequest>): StopReplicationMinimumRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        message.waitTimeout = 0n;
        if (value !== undefined)
            reflectionMergePartial<StopReplicationMinimumRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReplicationMinimumRequest): StopReplicationMinimumRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                case /* int64 wait_timeout */ 2:
                    message.waitTimeout = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReplicationMinimumRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        /* int64 wait_timeout = 2; */
        if (message.waitTimeout !== 0n)
            writer.tag(2, WireType.Varint).int64(message.waitTimeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StopReplicationMinimumRequest
 */
export const StopReplicationMinimumRequest = new StopReplicationMinimumRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReplicationMinimumResponse$Type extends MessageType<StopReplicationMinimumResponse> {
    constructor() {
        super("tabletmanagerdata.StopReplicationMinimumResponse", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StopReplicationMinimumResponse>): StopReplicationMinimumResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<StopReplicationMinimumResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReplicationMinimumResponse): StopReplicationMinimumResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReplicationMinimumResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StopReplicationMinimumResponse
 */
export const StopReplicationMinimumResponse = new StopReplicationMinimumResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartReplicationRequest$Type extends MessageType<StartReplicationRequest> {
    constructor() {
        super("tabletmanagerdata.StartReplicationRequest", [
            { no: 1, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StartReplicationRequest>): StartReplicationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.semiSync = false;
        if (value !== undefined)
            reflectionMergePartial<StartReplicationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartReplicationRequest): StartReplicationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool semiSync */ 1:
                    message.semiSync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartReplicationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool semiSync = 1; */
        if (message.semiSync !== false)
            writer.tag(1, WireType.Varint).bool(message.semiSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StartReplicationRequest
 */
export const StartReplicationRequest = new StartReplicationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartReplicationResponse$Type extends MessageType<StartReplicationResponse> {
    constructor() {
        super("tabletmanagerdata.StartReplicationResponse", []);
    }
    create(value?: PartialMessage<StartReplicationResponse>): StartReplicationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartReplicationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartReplicationResponse): StartReplicationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartReplicationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StartReplicationResponse
 */
export const StartReplicationResponse = new StartReplicationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartReplicationUntilAfterRequest$Type extends MessageType<StartReplicationUntilAfterRequest> {
    constructor() {
        super("tabletmanagerdata.StartReplicationUntilAfterRequest", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "wait_timeout", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StartReplicationUntilAfterRequest>): StartReplicationUntilAfterRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        message.waitTimeout = 0n;
        if (value !== undefined)
            reflectionMergePartial<StartReplicationUntilAfterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartReplicationUntilAfterRequest): StartReplicationUntilAfterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                case /* int64 wait_timeout */ 2:
                    message.waitTimeout = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartReplicationUntilAfterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        /* int64 wait_timeout = 2; */
        if (message.waitTimeout !== 0n)
            writer.tag(2, WireType.Varint).int64(message.waitTimeout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StartReplicationUntilAfterRequest
 */
export const StartReplicationUntilAfterRequest = new StartReplicationUntilAfterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartReplicationUntilAfterResponse$Type extends MessageType<StartReplicationUntilAfterResponse> {
    constructor() {
        super("tabletmanagerdata.StartReplicationUntilAfterResponse", []);
    }
    create(value?: PartialMessage<StartReplicationUntilAfterResponse>): StartReplicationUntilAfterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StartReplicationUntilAfterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartReplicationUntilAfterResponse): StartReplicationUntilAfterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartReplicationUntilAfterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StartReplicationUntilAfterResponse
 */
export const StartReplicationUntilAfterResponse = new StartReplicationUntilAfterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReplicasRequest$Type extends MessageType<GetReplicasRequest> {
    constructor() {
        super("tabletmanagerdata.GetReplicasRequest", []);
    }
    create(value?: PartialMessage<GetReplicasRequest>): GetReplicasRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetReplicasRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReplicasRequest): GetReplicasRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetReplicasRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetReplicasRequest
 */
export const GetReplicasRequest = new GetReplicasRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetReplicasResponse$Type extends MessageType<GetReplicasResponse> {
    constructor() {
        super("tabletmanagerdata.GetReplicasResponse", [
            { no: 1, name: "addrs", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetReplicasResponse>): GetReplicasResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.addrs = [];
        if (value !== undefined)
            reflectionMergePartial<GetReplicasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetReplicasResponse): GetReplicasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string addrs */ 1:
                    message.addrs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetReplicasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string addrs = 1; */
        for (let i = 0; i < message.addrs.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.addrs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetReplicasResponse
 */
export const GetReplicasResponse = new GetReplicasResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetReplicationRequest$Type extends MessageType<ResetReplicationRequest> {
    constructor() {
        super("tabletmanagerdata.ResetReplicationRequest", []);
    }
    create(value?: PartialMessage<ResetReplicationRequest>): ResetReplicationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetReplicationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetReplicationRequest): ResetReplicationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetReplicationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ResetReplicationRequest
 */
export const ResetReplicationRequest = new ResetReplicationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetReplicationResponse$Type extends MessageType<ResetReplicationResponse> {
    constructor() {
        super("tabletmanagerdata.ResetReplicationResponse", []);
    }
    create(value?: PartialMessage<ResetReplicationResponse>): ResetReplicationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetReplicationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetReplicationResponse): ResetReplicationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetReplicationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ResetReplicationResponse
 */
export const ResetReplicationResponse = new ResetReplicationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VReplicationExecRequest$Type extends MessageType<VReplicationExecRequest> {
    constructor() {
        super("tabletmanagerdata.VReplicationExecRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VReplicationExecRequest>): VReplicationExecRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        if (value !== undefined)
            reflectionMergePartial<VReplicationExecRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VReplicationExecRequest): VReplicationExecRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VReplicationExecRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VReplicationExecRequest
 */
export const VReplicationExecRequest = new VReplicationExecRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VReplicationExecResponse$Type extends MessageType<VReplicationExecResponse> {
    constructor() {
        super("tabletmanagerdata.VReplicationExecResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<VReplicationExecResponse>): VReplicationExecResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VReplicationExecResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VReplicationExecResponse): VReplicationExecResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VReplicationExecResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VReplicationExecResponse
 */
export const VReplicationExecResponse = new VReplicationExecResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VReplicationWaitForPosRequest$Type extends MessageType<VReplicationWaitForPosRequest> {
    constructor() {
        super("tabletmanagerdata.VReplicationWaitForPosRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VReplicationWaitForPosRequest>): VReplicationWaitForPosRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<VReplicationWaitForPosRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VReplicationWaitForPosRequest): VReplicationWaitForPosRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string position */ 2:
                    message.position = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VReplicationWaitForPosRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string position = 2; */
        if (message.position !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VReplicationWaitForPosRequest
 */
export const VReplicationWaitForPosRequest = new VReplicationWaitForPosRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VReplicationWaitForPosResponse$Type extends MessageType<VReplicationWaitForPosResponse> {
    constructor() {
        super("tabletmanagerdata.VReplicationWaitForPosResponse", []);
    }
    create(value?: PartialMessage<VReplicationWaitForPosResponse>): VReplicationWaitForPosResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VReplicationWaitForPosResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VReplicationWaitForPosResponse): VReplicationWaitForPosResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VReplicationWaitForPosResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VReplicationWaitForPosResponse
 */
export const VReplicationWaitForPosResponse = new VReplicationWaitForPosResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitPrimaryRequest$Type extends MessageType<InitPrimaryRequest> {
    constructor() {
        super("tabletmanagerdata.InitPrimaryRequest", [
            { no: 1, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<InitPrimaryRequest>): InitPrimaryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.semiSync = false;
        if (value !== undefined)
            reflectionMergePartial<InitPrimaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitPrimaryRequest): InitPrimaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool semiSync */ 1:
                    message.semiSync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitPrimaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool semiSync = 1; */
        if (message.semiSync !== false)
            writer.tag(1, WireType.Varint).bool(message.semiSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.InitPrimaryRequest
 */
export const InitPrimaryRequest = new InitPrimaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitPrimaryResponse$Type extends MessageType<InitPrimaryResponse> {
    constructor() {
        super("tabletmanagerdata.InitPrimaryResponse", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InitPrimaryResponse>): InitPrimaryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<InitPrimaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitPrimaryResponse): InitPrimaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitPrimaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.InitPrimaryResponse
 */
export const InitPrimaryResponse = new InitPrimaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopulateReparentJournalRequest$Type extends MessageType<PopulateReparentJournalRequest> {
    constructor() {
        super("tabletmanagerdata.PopulateReparentJournalRequest", [
            { no: 1, name: "time_created_ns", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "action_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "primary_alias", kind: "message", T: () => TabletAlias },
            { no: 4, name: "replication_position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PopulateReparentJournalRequest>): PopulateReparentJournalRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timeCreatedNs = 0n;
        message.actionName = "";
        message.replicationPosition = "";
        if (value !== undefined)
            reflectionMergePartial<PopulateReparentJournalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopulateReparentJournalRequest): PopulateReparentJournalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 time_created_ns */ 1:
                    message.timeCreatedNs = reader.int64().toBigInt();
                    break;
                case /* string action_name */ 2:
                    message.actionName = reader.string();
                    break;
                case /* topodata.TabletAlias primary_alias */ 3:
                    message.primaryAlias = TabletAlias.internalBinaryRead(reader, reader.uint32(), options, message.primaryAlias);
                    break;
                case /* string replication_position */ 4:
                    message.replicationPosition = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopulateReparentJournalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 time_created_ns = 1; */
        if (message.timeCreatedNs !== 0n)
            writer.tag(1, WireType.Varint).int64(message.timeCreatedNs);
        /* string action_name = 2; */
        if (message.actionName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.actionName);
        /* topodata.TabletAlias primary_alias = 3; */
        if (message.primaryAlias)
            TabletAlias.internalBinaryWrite(message.primaryAlias, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string replication_position = 4; */
        if (message.replicationPosition !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.replicationPosition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PopulateReparentJournalRequest
 */
export const PopulateReparentJournalRequest = new PopulateReparentJournalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PopulateReparentJournalResponse$Type extends MessageType<PopulateReparentJournalResponse> {
    constructor() {
        super("tabletmanagerdata.PopulateReparentJournalResponse", []);
    }
    create(value?: PartialMessage<PopulateReparentJournalResponse>): PopulateReparentJournalResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PopulateReparentJournalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PopulateReparentJournalResponse): PopulateReparentJournalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PopulateReparentJournalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PopulateReparentJournalResponse
 */
export const PopulateReparentJournalResponse = new PopulateReparentJournalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadReparentJournalInfoRequest$Type extends MessageType<ReadReparentJournalInfoRequest> {
    constructor() {
        super("tabletmanagerdata.ReadReparentJournalInfoRequest", []);
    }
    create(value?: PartialMessage<ReadReparentJournalInfoRequest>): ReadReparentJournalInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReadReparentJournalInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadReparentJournalInfoRequest): ReadReparentJournalInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadReparentJournalInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadReparentJournalInfoRequest
 */
export const ReadReparentJournalInfoRequest = new ReadReparentJournalInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadReparentJournalInfoResponse$Type extends MessageType<ReadReparentJournalInfoResponse> {
    constructor() {
        super("tabletmanagerdata.ReadReparentJournalInfoResponse", [
            { no: 1, name: "length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReadReparentJournalInfoResponse>): ReadReparentJournalInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.length = 0;
        if (value !== undefined)
            reflectionMergePartial<ReadReparentJournalInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadReparentJournalInfoResponse): ReadReparentJournalInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 length */ 1:
                    message.length = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadReparentJournalInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 length = 1; */
        if (message.length !== 0)
            writer.tag(1, WireType.Varint).int32(message.length);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadReparentJournalInfoResponse
 */
export const ReadReparentJournalInfoResponse = new ReadReparentJournalInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitReplicaRequest$Type extends MessageType<InitReplicaRequest> {
    constructor() {
        super("tabletmanagerdata.InitReplicaRequest", [
            { no: 1, name: "parent", kind: "message", T: () => TabletAlias },
            { no: 2, name: "replication_position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "time_created_ns", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<InitReplicaRequest>): InitReplicaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.replicationPosition = "";
        message.timeCreatedNs = 0n;
        message.semiSync = false;
        if (value !== undefined)
            reflectionMergePartial<InitReplicaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitReplicaRequest): InitReplicaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* topodata.TabletAlias parent */ 1:
                    message.parent = TabletAlias.internalBinaryRead(reader, reader.uint32(), options, message.parent);
                    break;
                case /* string replication_position */ 2:
                    message.replicationPosition = reader.string();
                    break;
                case /* int64 time_created_ns */ 3:
                    message.timeCreatedNs = reader.int64().toBigInt();
                    break;
                case /* bool semiSync */ 4:
                    message.semiSync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitReplicaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* topodata.TabletAlias parent = 1; */
        if (message.parent)
            TabletAlias.internalBinaryWrite(message.parent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string replication_position = 2; */
        if (message.replicationPosition !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.replicationPosition);
        /* int64 time_created_ns = 3; */
        if (message.timeCreatedNs !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timeCreatedNs);
        /* bool semiSync = 4; */
        if (message.semiSync !== false)
            writer.tag(4, WireType.Varint).bool(message.semiSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.InitReplicaRequest
 */
export const InitReplicaRequest = new InitReplicaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitReplicaResponse$Type extends MessageType<InitReplicaResponse> {
    constructor() {
        super("tabletmanagerdata.InitReplicaResponse", []);
    }
    create(value?: PartialMessage<InitReplicaResponse>): InitReplicaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<InitReplicaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitReplicaResponse): InitReplicaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitReplicaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.InitReplicaResponse
 */
export const InitReplicaResponse = new InitReplicaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DemotePrimaryRequest$Type extends MessageType<DemotePrimaryRequest> {
    constructor() {
        super("tabletmanagerdata.DemotePrimaryRequest", []);
    }
    create(value?: PartialMessage<DemotePrimaryRequest>): DemotePrimaryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DemotePrimaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemotePrimaryRequest): DemotePrimaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DemotePrimaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.DemotePrimaryRequest
 */
export const DemotePrimaryRequest = new DemotePrimaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DemotePrimaryResponse$Type extends MessageType<DemotePrimaryResponse> {
    constructor() {
        super("tabletmanagerdata.DemotePrimaryResponse", [
            { no: 2, name: "primary_status", kind: "message", T: () => PrimaryStatus }
        ]);
    }
    create(value?: PartialMessage<DemotePrimaryResponse>): DemotePrimaryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DemotePrimaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemotePrimaryResponse): DemotePrimaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* replicationdata.PrimaryStatus primary_status */ 2:
                    message.primaryStatus = PrimaryStatus.internalBinaryRead(reader, reader.uint32(), options, message.primaryStatus);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DemotePrimaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* replicationdata.PrimaryStatus primary_status = 2; */
        if (message.primaryStatus)
            PrimaryStatus.internalBinaryWrite(message.primaryStatus, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.DemotePrimaryResponse
 */
export const DemotePrimaryResponse = new DemotePrimaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UndoDemotePrimaryRequest$Type extends MessageType<UndoDemotePrimaryRequest> {
    constructor() {
        super("tabletmanagerdata.UndoDemotePrimaryRequest", [
            { no: 1, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UndoDemotePrimaryRequest>): UndoDemotePrimaryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.semiSync = false;
        if (value !== undefined)
            reflectionMergePartial<UndoDemotePrimaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UndoDemotePrimaryRequest): UndoDemotePrimaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool semiSync */ 1:
                    message.semiSync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UndoDemotePrimaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool semiSync = 1; */
        if (message.semiSync !== false)
            writer.tag(1, WireType.Varint).bool(message.semiSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UndoDemotePrimaryRequest
 */
export const UndoDemotePrimaryRequest = new UndoDemotePrimaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UndoDemotePrimaryResponse$Type extends MessageType<UndoDemotePrimaryResponse> {
    constructor() {
        super("tabletmanagerdata.UndoDemotePrimaryResponse", []);
    }
    create(value?: PartialMessage<UndoDemotePrimaryResponse>): UndoDemotePrimaryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UndoDemotePrimaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UndoDemotePrimaryResponse): UndoDemotePrimaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UndoDemotePrimaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UndoDemotePrimaryResponse
 */
export const UndoDemotePrimaryResponse = new UndoDemotePrimaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplicaWasPromotedRequest$Type extends MessageType<ReplicaWasPromotedRequest> {
    constructor() {
        super("tabletmanagerdata.ReplicaWasPromotedRequest", []);
    }
    create(value?: PartialMessage<ReplicaWasPromotedRequest>): ReplicaWasPromotedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReplicaWasPromotedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplicaWasPromotedRequest): ReplicaWasPromotedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplicaWasPromotedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReplicaWasPromotedRequest
 */
export const ReplicaWasPromotedRequest = new ReplicaWasPromotedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplicaWasPromotedResponse$Type extends MessageType<ReplicaWasPromotedResponse> {
    constructor() {
        super("tabletmanagerdata.ReplicaWasPromotedResponse", []);
    }
    create(value?: PartialMessage<ReplicaWasPromotedResponse>): ReplicaWasPromotedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReplicaWasPromotedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplicaWasPromotedResponse): ReplicaWasPromotedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplicaWasPromotedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReplicaWasPromotedResponse
 */
export const ReplicaWasPromotedResponse = new ReplicaWasPromotedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetReplicationParametersRequest$Type extends MessageType<ResetReplicationParametersRequest> {
    constructor() {
        super("tabletmanagerdata.ResetReplicationParametersRequest", []);
    }
    create(value?: PartialMessage<ResetReplicationParametersRequest>): ResetReplicationParametersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetReplicationParametersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetReplicationParametersRequest): ResetReplicationParametersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetReplicationParametersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ResetReplicationParametersRequest
 */
export const ResetReplicationParametersRequest = new ResetReplicationParametersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetReplicationParametersResponse$Type extends MessageType<ResetReplicationParametersResponse> {
    constructor() {
        super("tabletmanagerdata.ResetReplicationParametersResponse", []);
    }
    create(value?: PartialMessage<ResetReplicationParametersResponse>): ResetReplicationParametersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetReplicationParametersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetReplicationParametersResponse): ResetReplicationParametersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetReplicationParametersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ResetReplicationParametersResponse
 */
export const ResetReplicationParametersResponse = new ResetReplicationParametersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullStatusRequest$Type extends MessageType<FullStatusRequest> {
    constructor() {
        super("tabletmanagerdata.FullStatusRequest", []);
    }
    create(value?: PartialMessage<FullStatusRequest>): FullStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FullStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullStatusRequest): FullStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.FullStatusRequest
 */
export const FullStatusRequest = new FullStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FullStatusResponse$Type extends MessageType<FullStatusResponse> {
    constructor() {
        super("tabletmanagerdata.FullStatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => FullStatus }
        ]);
    }
    create(value?: PartialMessage<FullStatusResponse>): FullStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FullStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FullStatusResponse): FullStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* replicationdata.FullStatus status */ 1:
                    message.status = FullStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FullStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* replicationdata.FullStatus status = 1; */
        if (message.status)
            FullStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.FullStatusResponse
 */
export const FullStatusResponse = new FullStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReplicationSourceRequest$Type extends MessageType<SetReplicationSourceRequest> {
    constructor() {
        super("tabletmanagerdata.SetReplicationSourceRequest", [
            { no: 1, name: "parent", kind: "message", T: () => TabletAlias },
            { no: 2, name: "time_created_ns", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "force_start_replication", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "wait_position", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "heartbeat_interval", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<SetReplicationSourceRequest>): SetReplicationSourceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.timeCreatedNs = 0n;
        message.forceStartReplication = false;
        message.waitPosition = "";
        message.semiSync = false;
        message.heartbeatInterval = 0;
        if (value !== undefined)
            reflectionMergePartial<SetReplicationSourceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReplicationSourceRequest): SetReplicationSourceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* topodata.TabletAlias parent */ 1:
                    message.parent = TabletAlias.internalBinaryRead(reader, reader.uint32(), options, message.parent);
                    break;
                case /* int64 time_created_ns */ 2:
                    message.timeCreatedNs = reader.int64().toBigInt();
                    break;
                case /* bool force_start_replication */ 3:
                    message.forceStartReplication = reader.bool();
                    break;
                case /* string wait_position */ 4:
                    message.waitPosition = reader.string();
                    break;
                case /* bool semiSync */ 5:
                    message.semiSync = reader.bool();
                    break;
                case /* double heartbeat_interval */ 6:
                    message.heartbeatInterval = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReplicationSourceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* topodata.TabletAlias parent = 1; */
        if (message.parent)
            TabletAlias.internalBinaryWrite(message.parent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 time_created_ns = 2; */
        if (message.timeCreatedNs !== 0n)
            writer.tag(2, WireType.Varint).int64(message.timeCreatedNs);
        /* bool force_start_replication = 3; */
        if (message.forceStartReplication !== false)
            writer.tag(3, WireType.Varint).bool(message.forceStartReplication);
        /* string wait_position = 4; */
        if (message.waitPosition !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.waitPosition);
        /* bool semiSync = 5; */
        if (message.semiSync !== false)
            writer.tag(5, WireType.Varint).bool(message.semiSync);
        /* double heartbeat_interval = 6; */
        if (message.heartbeatInterval !== 0)
            writer.tag(6, WireType.Bit64).double(message.heartbeatInterval);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SetReplicationSourceRequest
 */
export const SetReplicationSourceRequest = new SetReplicationSourceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetReplicationSourceResponse$Type extends MessageType<SetReplicationSourceResponse> {
    constructor() {
        super("tabletmanagerdata.SetReplicationSourceResponse", []);
    }
    create(value?: PartialMessage<SetReplicationSourceResponse>): SetReplicationSourceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetReplicationSourceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetReplicationSourceResponse): SetReplicationSourceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetReplicationSourceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.SetReplicationSourceResponse
 */
export const SetReplicationSourceResponse = new SetReplicationSourceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplicaWasRestartedRequest$Type extends MessageType<ReplicaWasRestartedRequest> {
    constructor() {
        super("tabletmanagerdata.ReplicaWasRestartedRequest", [
            { no: 1, name: "parent", kind: "message", T: () => TabletAlias }
        ]);
    }
    create(value?: PartialMessage<ReplicaWasRestartedRequest>): ReplicaWasRestartedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReplicaWasRestartedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplicaWasRestartedRequest): ReplicaWasRestartedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* topodata.TabletAlias parent */ 1:
                    message.parent = TabletAlias.internalBinaryRead(reader, reader.uint32(), options, message.parent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplicaWasRestartedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* topodata.TabletAlias parent = 1; */
        if (message.parent)
            TabletAlias.internalBinaryWrite(message.parent, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReplicaWasRestartedRequest
 */
export const ReplicaWasRestartedRequest = new ReplicaWasRestartedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReplicaWasRestartedResponse$Type extends MessageType<ReplicaWasRestartedResponse> {
    constructor() {
        super("tabletmanagerdata.ReplicaWasRestartedResponse", []);
    }
    create(value?: PartialMessage<ReplicaWasRestartedResponse>): ReplicaWasRestartedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReplicaWasRestartedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReplicaWasRestartedResponse): ReplicaWasRestartedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReplicaWasRestartedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReplicaWasRestartedResponse
 */
export const ReplicaWasRestartedResponse = new ReplicaWasRestartedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReplicationAndGetStatusRequest$Type extends MessageType<StopReplicationAndGetStatusRequest> {
    constructor() {
        super("tabletmanagerdata.StopReplicationAndGetStatusRequest", [
            { no: 1, name: "stop_replication_mode", kind: "enum", T: () => ["replicationdata.StopReplicationMode", StopReplicationMode] }
        ]);
    }
    create(value?: PartialMessage<StopReplicationAndGetStatusRequest>): StopReplicationAndGetStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stopReplicationMode = 0;
        if (value !== undefined)
            reflectionMergePartial<StopReplicationAndGetStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReplicationAndGetStatusRequest): StopReplicationAndGetStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* replicationdata.StopReplicationMode stop_replication_mode */ 1:
                    message.stopReplicationMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReplicationAndGetStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* replicationdata.StopReplicationMode stop_replication_mode = 1; */
        if (message.stopReplicationMode !== 0)
            writer.tag(1, WireType.Varint).int32(message.stopReplicationMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StopReplicationAndGetStatusRequest
 */
export const StopReplicationAndGetStatusRequest = new StopReplicationAndGetStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StopReplicationAndGetStatusResponse$Type extends MessageType<StopReplicationAndGetStatusResponse> {
    constructor() {
        super("tabletmanagerdata.StopReplicationAndGetStatusResponse", [
            { no: 2, name: "status", kind: "message", T: () => StopReplicationStatus }
        ]);
    }
    create(value?: PartialMessage<StopReplicationAndGetStatusResponse>): StopReplicationAndGetStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StopReplicationAndGetStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopReplicationAndGetStatusResponse): StopReplicationAndGetStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* replicationdata.StopReplicationStatus status */ 2:
                    message.status = StopReplicationStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StopReplicationAndGetStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* replicationdata.StopReplicationStatus status = 2; */
        if (message.status)
            StopReplicationStatus.internalBinaryWrite(message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.StopReplicationAndGetStatusResponse
 */
export const StopReplicationAndGetStatusResponse = new StopReplicationAndGetStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromoteReplicaRequest$Type extends MessageType<PromoteReplicaRequest> {
    constructor() {
        super("tabletmanagerdata.PromoteReplicaRequest", [
            { no: 1, name: "semiSync", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PromoteReplicaRequest>): PromoteReplicaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.semiSync = false;
        if (value !== undefined)
            reflectionMergePartial<PromoteReplicaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PromoteReplicaRequest): PromoteReplicaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool semiSync */ 1:
                    message.semiSync = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PromoteReplicaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool semiSync = 1; */
        if (message.semiSync !== false)
            writer.tag(1, WireType.Varint).bool(message.semiSync);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PromoteReplicaRequest
 */
export const PromoteReplicaRequest = new PromoteReplicaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PromoteReplicaResponse$Type extends MessageType<PromoteReplicaResponse> {
    constructor() {
        super("tabletmanagerdata.PromoteReplicaResponse", [
            { no: 1, name: "position", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PromoteReplicaResponse>): PromoteReplicaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.position = "";
        if (value !== undefined)
            reflectionMergePartial<PromoteReplicaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PromoteReplicaResponse): PromoteReplicaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string position */ 1:
                    message.position = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PromoteReplicaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string position = 1; */
        if (message.position !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.position);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.PromoteReplicaResponse
 */
export const PromoteReplicaResponse = new PromoteReplicaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackupRequest$Type extends MessageType<BackupRequest> {
    constructor() {
        super("tabletmanagerdata.BackupRequest", [
            { no: 1, name: "concurrency", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "allow_primary", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "incremental_from_pos", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "upgrade_safe", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "backup_engine", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BackupRequest>): BackupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.concurrency = 0;
        message.allowPrimary = false;
        message.incrementalFromPos = "";
        message.upgradeSafe = false;
        if (value !== undefined)
            reflectionMergePartial<BackupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackupRequest): BackupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 concurrency */ 1:
                    message.concurrency = reader.int32();
                    break;
                case /* bool allow_primary */ 2:
                    message.allowPrimary = reader.bool();
                    break;
                case /* string incremental_from_pos */ 3:
                    message.incrementalFromPos = reader.string();
                    break;
                case /* bool upgrade_safe */ 4:
                    message.upgradeSafe = reader.bool();
                    break;
                case /* optional string backup_engine */ 5:
                    message.backupEngine = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 concurrency = 1; */
        if (message.concurrency !== 0)
            writer.tag(1, WireType.Varint).int32(message.concurrency);
        /* bool allow_primary = 2; */
        if (message.allowPrimary !== false)
            writer.tag(2, WireType.Varint).bool(message.allowPrimary);
        /* string incremental_from_pos = 3; */
        if (message.incrementalFromPos !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.incrementalFromPos);
        /* bool upgrade_safe = 4; */
        if (message.upgradeSafe !== false)
            writer.tag(4, WireType.Varint).bool(message.upgradeSafe);
        /* optional string backup_engine = 5; */
        if (message.backupEngine !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.backupEngine);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.BackupRequest
 */
export const BackupRequest = new BackupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackupResponse$Type extends MessageType<BackupResponse> {
    constructor() {
        super("tabletmanagerdata.BackupResponse", [
            { no: 1, name: "event", kind: "message", T: () => Event }
        ]);
    }
    create(value?: PartialMessage<BackupResponse>): BackupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BackupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackupResponse): BackupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* logutil.Event event */ 1:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* logutil.Event event = 1; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.BackupResponse
 */
export const BackupResponse = new BackupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestoreFromBackupRequest$Type extends MessageType<RestoreFromBackupRequest> {
    constructor() {
        super("tabletmanagerdata.RestoreFromBackupRequest", [
            { no: 1, name: "backup_time", kind: "message", T: () => Time },
            { no: 2, name: "restore_to_pos", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dry_run", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "restore_to_timestamp", kind: "message", T: () => Time },
            { no: 5, name: "allowed_backup_engines", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RestoreFromBackupRequest>): RestoreFromBackupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.restoreToPos = "";
        message.dryRun = false;
        message.allowedBackupEngines = [];
        if (value !== undefined)
            reflectionMergePartial<RestoreFromBackupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestoreFromBackupRequest): RestoreFromBackupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vttime.Time backup_time */ 1:
                    message.backupTime = Time.internalBinaryRead(reader, reader.uint32(), options, message.backupTime);
                    break;
                case /* string restore_to_pos */ 2:
                    message.restoreToPos = reader.string();
                    break;
                case /* bool dry_run */ 3:
                    message.dryRun = reader.bool();
                    break;
                case /* vttime.Time restore_to_timestamp */ 4:
                    message.restoreToTimestamp = Time.internalBinaryRead(reader, reader.uint32(), options, message.restoreToTimestamp);
                    break;
                case /* repeated string allowed_backup_engines */ 5:
                    message.allowedBackupEngines.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestoreFromBackupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* vttime.Time backup_time = 1; */
        if (message.backupTime)
            Time.internalBinaryWrite(message.backupTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string restore_to_pos = 2; */
        if (message.restoreToPos !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.restoreToPos);
        /* bool dry_run = 3; */
        if (message.dryRun !== false)
            writer.tag(3, WireType.Varint).bool(message.dryRun);
        /* vttime.Time restore_to_timestamp = 4; */
        if (message.restoreToTimestamp)
            Time.internalBinaryWrite(message.restoreToTimestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string allowed_backup_engines = 5; */
        for (let i = 0; i < message.allowedBackupEngines.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.allowedBackupEngines[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.RestoreFromBackupRequest
 */
export const RestoreFromBackupRequest = new RestoreFromBackupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestoreFromBackupResponse$Type extends MessageType<RestoreFromBackupResponse> {
    constructor() {
        super("tabletmanagerdata.RestoreFromBackupResponse", [
            { no: 1, name: "event", kind: "message", T: () => Event }
        ]);
    }
    create(value?: PartialMessage<RestoreFromBackupResponse>): RestoreFromBackupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RestoreFromBackupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestoreFromBackupResponse): RestoreFromBackupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* logutil.Event event */ 1:
                    message.event = Event.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RestoreFromBackupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* logutil.Event event = 1; */
        if (message.event)
            Event.internalBinaryWrite(message.event, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.RestoreFromBackupResponse
 */
export const RestoreFromBackupResponse = new RestoreFromBackupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVReplicationWorkflowRequest$Type extends MessageType<CreateVReplicationWorkflowRequest> {
    constructor() {
        super("tabletmanagerdata.CreateVReplicationWorkflowRequest", [
            { no: 1, name: "workflow", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "binlog_source", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BinlogSource },
            { no: 3, name: "cells", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tablet_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["topodata.TabletType", TabletType] },
            { no: 5, name: "tablet_selection_preference", kind: "enum", T: () => ["tabletmanagerdata.TabletSelectionPreference", TabletSelectionPreference] },
            { no: 6, name: "workflow_type", kind: "enum", T: () => ["binlogdata.VReplicationWorkflowType", VReplicationWorkflowType] },
            { no: 7, name: "workflow_sub_type", kind: "enum", T: () => ["binlogdata.VReplicationWorkflowSubType", VReplicationWorkflowSubType] },
            { no: 8, name: "defer_secondary_keys", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "auto_start", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "stop_after_copy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "options", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateVReplicationWorkflowRequest>): CreateVReplicationWorkflowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workflow = "";
        message.binlogSource = [];
        message.cells = [];
        message.tabletTypes = [];
        message.tabletSelectionPreference = 0;
        message.workflowType = 0;
        message.workflowSubType = 0;
        message.deferSecondaryKeys = false;
        message.autoStart = false;
        message.stopAfterCopy = false;
        message.options = "";
        if (value !== undefined)
            reflectionMergePartial<CreateVReplicationWorkflowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVReplicationWorkflowRequest): CreateVReplicationWorkflowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string workflow */ 1:
                    message.workflow = reader.string();
                    break;
                case /* repeated binlogdata.BinlogSource binlog_source */ 2:
                    message.binlogSource.push(BinlogSource.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string cells */ 3:
                    message.cells.push(reader.string());
                    break;
                case /* repeated topodata.TabletType tablet_types */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tabletTypes.push(reader.int32());
                    else
                        message.tabletTypes.push(reader.int32());
                    break;
                case /* tabletmanagerdata.TabletSelectionPreference tablet_selection_preference */ 5:
                    message.tabletSelectionPreference = reader.int32();
                    break;
                case /* binlogdata.VReplicationWorkflowType workflow_type */ 6:
                    message.workflowType = reader.int32();
                    break;
                case /* binlogdata.VReplicationWorkflowSubType workflow_sub_type */ 7:
                    message.workflowSubType = reader.int32();
                    break;
                case /* bool defer_secondary_keys */ 8:
                    message.deferSecondaryKeys = reader.bool();
                    break;
                case /* bool auto_start */ 9:
                    message.autoStart = reader.bool();
                    break;
                case /* bool stop_after_copy */ 10:
                    message.stopAfterCopy = reader.bool();
                    break;
                case /* string options */ 11:
                    message.options = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVReplicationWorkflowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string workflow = 1; */
        if (message.workflow !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.workflow);
        /* repeated binlogdata.BinlogSource binlog_source = 2; */
        for (let i = 0; i < message.binlogSource.length; i++)
            BinlogSource.internalBinaryWrite(message.binlogSource[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated string cells = 3; */
        for (let i = 0; i < message.cells.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.cells[i]);
        /* repeated topodata.TabletType tablet_types = 4; */
        if (message.tabletTypes.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tabletTypes.length; i++)
                writer.int32(message.tabletTypes[i]);
            writer.join();
        }
        /* tabletmanagerdata.TabletSelectionPreference tablet_selection_preference = 5; */
        if (message.tabletSelectionPreference !== 0)
            writer.tag(5, WireType.Varint).int32(message.tabletSelectionPreference);
        /* binlogdata.VReplicationWorkflowType workflow_type = 6; */
        if (message.workflowType !== 0)
            writer.tag(6, WireType.Varint).int32(message.workflowType);
        /* binlogdata.VReplicationWorkflowSubType workflow_sub_type = 7; */
        if (message.workflowSubType !== 0)
            writer.tag(7, WireType.Varint).int32(message.workflowSubType);
        /* bool defer_secondary_keys = 8; */
        if (message.deferSecondaryKeys !== false)
            writer.tag(8, WireType.Varint).bool(message.deferSecondaryKeys);
        /* bool auto_start = 9; */
        if (message.autoStart !== false)
            writer.tag(9, WireType.Varint).bool(message.autoStart);
        /* bool stop_after_copy = 10; */
        if (message.stopAfterCopy !== false)
            writer.tag(10, WireType.Varint).bool(message.stopAfterCopy);
        /* string options = 11; */
        if (message.options !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.options);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.CreateVReplicationWorkflowRequest
 */
export const CreateVReplicationWorkflowRequest = new CreateVReplicationWorkflowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateVReplicationWorkflowResponse$Type extends MessageType<CreateVReplicationWorkflowResponse> {
    constructor() {
        super("tabletmanagerdata.CreateVReplicationWorkflowResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<CreateVReplicationWorkflowResponse>): CreateVReplicationWorkflowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateVReplicationWorkflowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateVReplicationWorkflowResponse): CreateVReplicationWorkflowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateVReplicationWorkflowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.CreateVReplicationWorkflowResponse
 */
export const CreateVReplicationWorkflowResponse = new CreateVReplicationWorkflowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteVReplicationWorkflowRequest$Type extends MessageType<DeleteVReplicationWorkflowRequest> {
    constructor() {
        super("tabletmanagerdata.DeleteVReplicationWorkflowRequest", [
            { no: 1, name: "workflow", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteVReplicationWorkflowRequest>): DeleteVReplicationWorkflowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workflow = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteVReplicationWorkflowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteVReplicationWorkflowRequest): DeleteVReplicationWorkflowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string workflow */ 1:
                    message.workflow = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteVReplicationWorkflowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string workflow = 1; */
        if (message.workflow !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.workflow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.DeleteVReplicationWorkflowRequest
 */
export const DeleteVReplicationWorkflowRequest = new DeleteVReplicationWorkflowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteVReplicationWorkflowResponse$Type extends MessageType<DeleteVReplicationWorkflowResponse> {
    constructor() {
        super("tabletmanagerdata.DeleteVReplicationWorkflowResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<DeleteVReplicationWorkflowResponse>): DeleteVReplicationWorkflowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteVReplicationWorkflowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteVReplicationWorkflowResponse): DeleteVReplicationWorkflowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteVReplicationWorkflowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.DeleteVReplicationWorkflowResponse
 */
export const DeleteVReplicationWorkflowResponse = new DeleteVReplicationWorkflowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HasVReplicationWorkflowsRequest$Type extends MessageType<HasVReplicationWorkflowsRequest> {
    constructor() {
        super("tabletmanagerdata.HasVReplicationWorkflowsRequest", []);
    }
    create(value?: PartialMessage<HasVReplicationWorkflowsRequest>): HasVReplicationWorkflowsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HasVReplicationWorkflowsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HasVReplicationWorkflowsRequest): HasVReplicationWorkflowsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HasVReplicationWorkflowsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.HasVReplicationWorkflowsRequest
 */
export const HasVReplicationWorkflowsRequest = new HasVReplicationWorkflowsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HasVReplicationWorkflowsResponse$Type extends MessageType<HasVReplicationWorkflowsResponse> {
    constructor() {
        super("tabletmanagerdata.HasVReplicationWorkflowsResponse", [
            { no: 1, name: "has", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HasVReplicationWorkflowsResponse>): HasVReplicationWorkflowsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.has = false;
        if (value !== undefined)
            reflectionMergePartial<HasVReplicationWorkflowsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HasVReplicationWorkflowsResponse): HasVReplicationWorkflowsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool has */ 1:
                    message.has = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HasVReplicationWorkflowsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool has = 1; */
        if (message.has !== false)
            writer.tag(1, WireType.Varint).bool(message.has);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.HasVReplicationWorkflowsResponse
 */
export const HasVReplicationWorkflowsResponse = new HasVReplicationWorkflowsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadVReplicationWorkflowsRequest$Type extends MessageType<ReadVReplicationWorkflowsRequest> {
    constructor() {
        super("tabletmanagerdata.ReadVReplicationWorkflowsRequest", [
            { no: 1, name: "include_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "include_workflows", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "include_states", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["binlogdata.VReplicationWorkflowState", VReplicationWorkflowState] },
            { no: 4, name: "exclude_workflows", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "exclude_states", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["binlogdata.VReplicationWorkflowState", VReplicationWorkflowState] },
            { no: 6, name: "exclude_frozen", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReadVReplicationWorkflowsRequest>): ReadVReplicationWorkflowsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.includeIds = [];
        message.includeWorkflows = [];
        message.includeStates = [];
        message.excludeWorkflows = [];
        message.excludeStates = [];
        message.excludeFrozen = false;
        if (value !== undefined)
            reflectionMergePartial<ReadVReplicationWorkflowsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadVReplicationWorkflowsRequest): ReadVReplicationWorkflowsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 include_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.includeIds.push(reader.int32());
                    else
                        message.includeIds.push(reader.int32());
                    break;
                case /* repeated string include_workflows */ 2:
                    message.includeWorkflows.push(reader.string());
                    break;
                case /* repeated binlogdata.VReplicationWorkflowState include_states */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.includeStates.push(reader.int32());
                    else
                        message.includeStates.push(reader.int32());
                    break;
                case /* repeated string exclude_workflows */ 4:
                    message.excludeWorkflows.push(reader.string());
                    break;
                case /* repeated binlogdata.VReplicationWorkflowState exclude_states */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.excludeStates.push(reader.int32());
                    else
                        message.excludeStates.push(reader.int32());
                    break;
                case /* bool exclude_frozen */ 6:
                    message.excludeFrozen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadVReplicationWorkflowsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 include_ids = 1; */
        if (message.includeIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.includeIds.length; i++)
                writer.int32(message.includeIds[i]);
            writer.join();
        }
        /* repeated string include_workflows = 2; */
        for (let i = 0; i < message.includeWorkflows.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.includeWorkflows[i]);
        /* repeated binlogdata.VReplicationWorkflowState include_states = 3; */
        if (message.includeStates.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.includeStates.length; i++)
                writer.int32(message.includeStates[i]);
            writer.join();
        }
        /* repeated string exclude_workflows = 4; */
        for (let i = 0; i < message.excludeWorkflows.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.excludeWorkflows[i]);
        /* repeated binlogdata.VReplicationWorkflowState exclude_states = 5; */
        if (message.excludeStates.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.excludeStates.length; i++)
                writer.int32(message.excludeStates[i]);
            writer.join();
        }
        /* bool exclude_frozen = 6; */
        if (message.excludeFrozen !== false)
            writer.tag(6, WireType.Varint).bool(message.excludeFrozen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadVReplicationWorkflowsRequest
 */
export const ReadVReplicationWorkflowsRequest = new ReadVReplicationWorkflowsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadVReplicationWorkflowsResponse$Type extends MessageType<ReadVReplicationWorkflowsResponse> {
    constructor() {
        super("tabletmanagerdata.ReadVReplicationWorkflowsResponse", [
            { no: 1, name: "workflows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReadVReplicationWorkflowResponse }
        ]);
    }
    create(value?: PartialMessage<ReadVReplicationWorkflowsResponse>): ReadVReplicationWorkflowsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workflows = [];
        if (value !== undefined)
            reflectionMergePartial<ReadVReplicationWorkflowsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadVReplicationWorkflowsResponse): ReadVReplicationWorkflowsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated tabletmanagerdata.ReadVReplicationWorkflowResponse workflows */ 1:
                    message.workflows.push(ReadVReplicationWorkflowResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadVReplicationWorkflowsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated tabletmanagerdata.ReadVReplicationWorkflowResponse workflows = 1; */
        for (let i = 0; i < message.workflows.length; i++)
            ReadVReplicationWorkflowResponse.internalBinaryWrite(message.workflows[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadVReplicationWorkflowsResponse
 */
export const ReadVReplicationWorkflowsResponse = new ReadVReplicationWorkflowsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadVReplicationWorkflowRequest$Type extends MessageType<ReadVReplicationWorkflowRequest> {
    constructor() {
        super("tabletmanagerdata.ReadVReplicationWorkflowRequest", [
            { no: 1, name: "workflow", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReadVReplicationWorkflowRequest>): ReadVReplicationWorkflowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workflow = "";
        if (value !== undefined)
            reflectionMergePartial<ReadVReplicationWorkflowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadVReplicationWorkflowRequest): ReadVReplicationWorkflowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string workflow */ 1:
                    message.workflow = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadVReplicationWorkflowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string workflow = 1; */
        if (message.workflow !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.workflow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadVReplicationWorkflowRequest
 */
export const ReadVReplicationWorkflowRequest = new ReadVReplicationWorkflowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadVReplicationWorkflowResponse$Type extends MessageType<ReadVReplicationWorkflowResponse> {
    constructor() {
        super("tabletmanagerdata.ReadVReplicationWorkflowResponse", [
            { no: 2, name: "workflow", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cells", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tablet_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["topodata.TabletType", TabletType] },
            { no: 5, name: "tablet_selection_preference", kind: "enum", T: () => ["tabletmanagerdata.TabletSelectionPreference", TabletSelectionPreference] },
            { no: 6, name: "db_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "workflow_type", kind: "enum", T: () => ["binlogdata.VReplicationWorkflowType", VReplicationWorkflowType] },
            { no: 9, name: "workflow_sub_type", kind: "enum", T: () => ["binlogdata.VReplicationWorkflowSubType", VReplicationWorkflowSubType] },
            { no: 10, name: "defer_secondary_keys", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "streams", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ReadVReplicationWorkflowResponse_Stream },
            { no: 12, name: "options", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "config_overrides", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ReadVReplicationWorkflowResponse>): ReadVReplicationWorkflowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workflow = "";
        message.cells = "";
        message.tabletTypes = [];
        message.tabletSelectionPreference = 0;
        message.dbName = "";
        message.tags = "";
        message.workflowType = 0;
        message.workflowSubType = 0;
        message.deferSecondaryKeys = false;
        message.streams = [];
        message.options = "";
        message.configOverrides = {};
        if (value !== undefined)
            reflectionMergePartial<ReadVReplicationWorkflowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadVReplicationWorkflowResponse): ReadVReplicationWorkflowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string workflow */ 2:
                    message.workflow = reader.string();
                    break;
                case /* string cells */ 3:
                    message.cells = reader.string();
                    break;
                case /* repeated topodata.TabletType tablet_types */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tabletTypes.push(reader.int32());
                    else
                        message.tabletTypes.push(reader.int32());
                    break;
                case /* tabletmanagerdata.TabletSelectionPreference tablet_selection_preference */ 5:
                    message.tabletSelectionPreference = reader.int32();
                    break;
                case /* string db_name */ 6:
                    message.dbName = reader.string();
                    break;
                case /* string tags */ 7:
                    message.tags = reader.string();
                    break;
                case /* binlogdata.VReplicationWorkflowType workflow_type */ 8:
                    message.workflowType = reader.int32();
                    break;
                case /* binlogdata.VReplicationWorkflowSubType workflow_sub_type */ 9:
                    message.workflowSubType = reader.int32();
                    break;
                case /* bool defer_secondary_keys */ 10:
                    message.deferSecondaryKeys = reader.bool();
                    break;
                case /* repeated tabletmanagerdata.ReadVReplicationWorkflowResponse.Stream streams */ 11:
                    message.streams.push(ReadVReplicationWorkflowResponse_Stream.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string options */ 12:
                    message.options = reader.string();
                    break;
                case /* map<string, string> config_overrides */ 13:
                    this.binaryReadMap13(message.configOverrides, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap13(map: ReadVReplicationWorkflowResponse["configOverrides"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ReadVReplicationWorkflowResponse["configOverrides"] | undefined, val: ReadVReplicationWorkflowResponse["configOverrides"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.ReadVReplicationWorkflowResponse.config_overrides");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ReadVReplicationWorkflowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string workflow = 2; */
        if (message.workflow !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.workflow);
        /* string cells = 3; */
        if (message.cells !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cells);
        /* repeated topodata.TabletType tablet_types = 4; */
        if (message.tabletTypes.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tabletTypes.length; i++)
                writer.int32(message.tabletTypes[i]);
            writer.join();
        }
        /* tabletmanagerdata.TabletSelectionPreference tablet_selection_preference = 5; */
        if (message.tabletSelectionPreference !== 0)
            writer.tag(5, WireType.Varint).int32(message.tabletSelectionPreference);
        /* string db_name = 6; */
        if (message.dbName !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.dbName);
        /* string tags = 7; */
        if (message.tags !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.tags);
        /* binlogdata.VReplicationWorkflowType workflow_type = 8; */
        if (message.workflowType !== 0)
            writer.tag(8, WireType.Varint).int32(message.workflowType);
        /* binlogdata.VReplicationWorkflowSubType workflow_sub_type = 9; */
        if (message.workflowSubType !== 0)
            writer.tag(9, WireType.Varint).int32(message.workflowSubType);
        /* bool defer_secondary_keys = 10; */
        if (message.deferSecondaryKeys !== false)
            writer.tag(10, WireType.Varint).bool(message.deferSecondaryKeys);
        /* repeated tabletmanagerdata.ReadVReplicationWorkflowResponse.Stream streams = 11; */
        for (let i = 0; i < message.streams.length; i++)
            ReadVReplicationWorkflowResponse_Stream.internalBinaryWrite(message.streams[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* string options = 12; */
        if (message.options !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.options);
        /* map<string, string> config_overrides = 13; */
        for (let k of globalThis.Object.keys(message.configOverrides))
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.configOverrides[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadVReplicationWorkflowResponse
 */
export const ReadVReplicationWorkflowResponse = new ReadVReplicationWorkflowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadVReplicationWorkflowResponse_Stream$Type extends MessageType<ReadVReplicationWorkflowResponse_Stream> {
    constructor() {
        super("tabletmanagerdata.ReadVReplicationWorkflowResponse.Stream", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "bls", kind: "message", T: () => BinlogSource },
            { no: 3, name: "pos", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "stop_pos", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "max_tps", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "max_replication_lag", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "time_updated", kind: "message", T: () => Time },
            { no: 8, name: "transaction_timestamp", kind: "message", T: () => Time },
            { no: 9, name: "state", kind: "enum", T: () => ["binlogdata.VReplicationWorkflowState", VReplicationWorkflowState] },
            { no: 10, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "rows_copied", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "time_heartbeat", kind: "message", T: () => Time },
            { no: 13, name: "time_throttled", kind: "message", T: () => Time },
            { no: 14, name: "component_throttled", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReadVReplicationWorkflowResponse_Stream>): ReadVReplicationWorkflowResponse_Stream {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.pos = "";
        message.stopPos = "";
        message.maxTps = 0n;
        message.maxReplicationLag = 0n;
        message.state = 0;
        message.message = "";
        message.rowsCopied = 0n;
        message.componentThrottled = "";
        if (value !== undefined)
            reflectionMergePartial<ReadVReplicationWorkflowResponse_Stream>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadVReplicationWorkflowResponse_Stream): ReadVReplicationWorkflowResponse_Stream {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* binlogdata.BinlogSource bls */ 2:
                    message.bls = BinlogSource.internalBinaryRead(reader, reader.uint32(), options, message.bls);
                    break;
                case /* string pos */ 3:
                    message.pos = reader.string();
                    break;
                case /* string stop_pos */ 4:
                    message.stopPos = reader.string();
                    break;
                case /* int64 max_tps */ 5:
                    message.maxTps = reader.int64().toBigInt();
                    break;
                case /* int64 max_replication_lag */ 6:
                    message.maxReplicationLag = reader.int64().toBigInt();
                    break;
                case /* vttime.Time time_updated */ 7:
                    message.timeUpdated = Time.internalBinaryRead(reader, reader.uint32(), options, message.timeUpdated);
                    break;
                case /* vttime.Time transaction_timestamp */ 8:
                    message.transactionTimestamp = Time.internalBinaryRead(reader, reader.uint32(), options, message.transactionTimestamp);
                    break;
                case /* binlogdata.VReplicationWorkflowState state */ 9:
                    message.state = reader.int32();
                    break;
                case /* string message */ 10:
                    message.message = reader.string();
                    break;
                case /* int64 rows_copied */ 11:
                    message.rowsCopied = reader.int64().toBigInt();
                    break;
                case /* vttime.Time time_heartbeat */ 12:
                    message.timeHeartbeat = Time.internalBinaryRead(reader, reader.uint32(), options, message.timeHeartbeat);
                    break;
                case /* vttime.Time time_throttled */ 13:
                    message.timeThrottled = Time.internalBinaryRead(reader, reader.uint32(), options, message.timeThrottled);
                    break;
                case /* string component_throttled */ 14:
                    message.componentThrottled = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadVReplicationWorkflowResponse_Stream, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* binlogdata.BinlogSource bls = 2; */
        if (message.bls)
            BinlogSource.internalBinaryWrite(message.bls, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string pos = 3; */
        if (message.pos !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.pos);
        /* string stop_pos = 4; */
        if (message.stopPos !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.stopPos);
        /* int64 max_tps = 5; */
        if (message.maxTps !== 0n)
            writer.tag(5, WireType.Varint).int64(message.maxTps);
        /* int64 max_replication_lag = 6; */
        if (message.maxReplicationLag !== 0n)
            writer.tag(6, WireType.Varint).int64(message.maxReplicationLag);
        /* vttime.Time time_updated = 7; */
        if (message.timeUpdated)
            Time.internalBinaryWrite(message.timeUpdated, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* vttime.Time transaction_timestamp = 8; */
        if (message.transactionTimestamp)
            Time.internalBinaryWrite(message.transactionTimestamp, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* binlogdata.VReplicationWorkflowState state = 9; */
        if (message.state !== 0)
            writer.tag(9, WireType.Varint).int32(message.state);
        /* string message = 10; */
        if (message.message !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.message);
        /* int64 rows_copied = 11; */
        if (message.rowsCopied !== 0n)
            writer.tag(11, WireType.Varint).int64(message.rowsCopied);
        /* vttime.Time time_heartbeat = 12; */
        if (message.timeHeartbeat)
            Time.internalBinaryWrite(message.timeHeartbeat, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* vttime.Time time_throttled = 13; */
        if (message.timeThrottled)
            Time.internalBinaryWrite(message.timeThrottled, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string component_throttled = 14; */
        if (message.componentThrottled !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.componentThrottled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ReadVReplicationWorkflowResponse.Stream
 */
export const ReadVReplicationWorkflowResponse_Stream = new ReadVReplicationWorkflowResponse_Stream$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateVReplicationPermissionsRequest$Type extends MessageType<ValidateVReplicationPermissionsRequest> {
    constructor() {
        super("tabletmanagerdata.ValidateVReplicationPermissionsRequest", []);
    }
    create(value?: PartialMessage<ValidateVReplicationPermissionsRequest>): ValidateVReplicationPermissionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ValidateVReplicationPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateVReplicationPermissionsRequest): ValidateVReplicationPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateVReplicationPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ValidateVReplicationPermissionsRequest
 */
export const ValidateVReplicationPermissionsRequest = new ValidateVReplicationPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateVReplicationPermissionsResponse$Type extends MessageType<ValidateVReplicationPermissionsResponse> {
    constructor() {
        super("tabletmanagerdata.ValidateVReplicationPermissionsResponse", [
            { no: 1, name: "user", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateVReplicationPermissionsResponse>): ValidateVReplicationPermissionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = "";
        message.ok = false;
        if (value !== undefined)
            reflectionMergePartial<ValidateVReplicationPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateVReplicationPermissionsResponse): ValidateVReplicationPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user */ 1:
                    message.user = reader.string();
                    break;
                case /* bool ok */ 2:
                    message.ok = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateVReplicationPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user = 1; */
        if (message.user !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* bool ok = 2; */
        if (message.ok !== false)
            writer.tag(2, WireType.Varint).bool(message.ok);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ValidateVReplicationPermissionsResponse
 */
export const ValidateVReplicationPermissionsResponse = new ValidateVReplicationPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VDiffRequest$Type extends MessageType<VDiffRequest> {
    constructor() {
        super("tabletmanagerdata.VDiffRequest", [
            { no: 1, name: "keyspace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "workflow", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "action_arg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "vdiff_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "options", kind: "message", T: () => VDiffOptions }
        ]);
    }
    create(value?: PartialMessage<VDiffRequest>): VDiffRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keyspace = "";
        message.workflow = "";
        message.action = "";
        message.actionArg = "";
        message.vdiffUuid = "";
        if (value !== undefined)
            reflectionMergePartial<VDiffRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VDiffRequest): VDiffRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string keyspace */ 1:
                    message.keyspace = reader.string();
                    break;
                case /* string workflow */ 2:
                    message.workflow = reader.string();
                    break;
                case /* string action */ 3:
                    message.action = reader.string();
                    break;
                case /* string action_arg */ 4:
                    message.actionArg = reader.string();
                    break;
                case /* string vdiff_uuid */ 5:
                    message.vdiffUuid = reader.string();
                    break;
                case /* tabletmanagerdata.VDiffOptions options */ 6:
                    message.options = VDiffOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VDiffRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string keyspace = 1; */
        if (message.keyspace !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.keyspace);
        /* string workflow = 2; */
        if (message.workflow !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.workflow);
        /* string action = 3; */
        if (message.action !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.action);
        /* string action_arg = 4; */
        if (message.actionArg !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.actionArg);
        /* string vdiff_uuid = 5; */
        if (message.vdiffUuid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.vdiffUuid);
        /* tabletmanagerdata.VDiffOptions options = 6; */
        if (message.options)
            VDiffOptions.internalBinaryWrite(message.options, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VDiffRequest
 */
export const VDiffRequest = new VDiffRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VDiffResponse$Type extends MessageType<VDiffResponse> {
    constructor() {
        super("tabletmanagerdata.VDiffResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "output", kind: "message", T: () => QueryResult },
            { no: 3, name: "vdiff_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VDiffResponse>): VDiffResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.vdiffUuid = "";
        if (value !== undefined)
            reflectionMergePartial<VDiffResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VDiffResponse): VDiffResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* query.QueryResult output */ 2:
                    message.output = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.output);
                    break;
                case /* string vdiff_uuid */ 3:
                    message.vdiffUuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VDiffResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* query.QueryResult output = 2; */
        if (message.output)
            QueryResult.internalBinaryWrite(message.output, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string vdiff_uuid = 3; */
        if (message.vdiffUuid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.vdiffUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VDiffResponse
 */
export const VDiffResponse = new VDiffResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VDiffPickerOptions$Type extends MessageType<VDiffPickerOptions> {
    constructor() {
        super("tabletmanagerdata.VDiffPickerOptions", [
            { no: 1, name: "tablet_types", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "source_cell", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_cell", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VDiffPickerOptions>): VDiffPickerOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tabletTypes = "";
        message.sourceCell = "";
        message.targetCell = "";
        if (value !== undefined)
            reflectionMergePartial<VDiffPickerOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VDiffPickerOptions): VDiffPickerOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tablet_types */ 1:
                    message.tabletTypes = reader.string();
                    break;
                case /* string source_cell */ 2:
                    message.sourceCell = reader.string();
                    break;
                case /* string target_cell */ 3:
                    message.targetCell = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VDiffPickerOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tablet_types = 1; */
        if (message.tabletTypes !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tabletTypes);
        /* string source_cell = 2; */
        if (message.sourceCell !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceCell);
        /* string target_cell = 3; */
        if (message.targetCell !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.targetCell);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VDiffPickerOptions
 */
export const VDiffPickerOptions = new VDiffPickerOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VDiffReportOptions$Type extends MessageType<VDiffReportOptions> {
    constructor() {
        super("tabletmanagerdata.VDiffReportOptions", [
            { no: 1, name: "only_pks", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "debug_query", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "format", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "max_sample_rows", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "row_diff_column_truncate_at", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VDiffReportOptions>): VDiffReportOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.onlyPks = false;
        message.debugQuery = false;
        message.format = "";
        message.maxSampleRows = 0n;
        message.rowDiffColumnTruncateAt = 0n;
        if (value !== undefined)
            reflectionMergePartial<VDiffReportOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VDiffReportOptions): VDiffReportOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool only_pks */ 1:
                    message.onlyPks = reader.bool();
                    break;
                case /* bool debug_query */ 2:
                    message.debugQuery = reader.bool();
                    break;
                case /* string format */ 3:
                    message.format = reader.string();
                    break;
                case /* int64 max_sample_rows */ 4:
                    message.maxSampleRows = reader.int64().toBigInt();
                    break;
                case /* int64 row_diff_column_truncate_at */ 5:
                    message.rowDiffColumnTruncateAt = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VDiffReportOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool only_pks = 1; */
        if (message.onlyPks !== false)
            writer.tag(1, WireType.Varint).bool(message.onlyPks);
        /* bool debug_query = 2; */
        if (message.debugQuery !== false)
            writer.tag(2, WireType.Varint).bool(message.debugQuery);
        /* string format = 3; */
        if (message.format !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.format);
        /* int64 max_sample_rows = 4; */
        if (message.maxSampleRows !== 0n)
            writer.tag(4, WireType.Varint).int64(message.maxSampleRows);
        /* int64 row_diff_column_truncate_at = 5; */
        if (message.rowDiffColumnTruncateAt !== 0n)
            writer.tag(5, WireType.Varint).int64(message.rowDiffColumnTruncateAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VDiffReportOptions
 */
export const VDiffReportOptions = new VDiffReportOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VDiffCoreOptions$Type extends MessageType<VDiffCoreOptions> {
    constructor() {
        super("tabletmanagerdata.VDiffCoreOptions", [
            { no: 1, name: "tables", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "auto_retry", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "max_rows", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "checksum", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "sample_pct", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "timeout_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "max_extra_rows_to_compare", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "update_table_stats", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "max_diff_seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "auto_start", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VDiffCoreOptions>): VDiffCoreOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tables = "";
        message.autoRetry = false;
        message.maxRows = 0n;
        message.checksum = false;
        message.samplePct = 0n;
        message.timeoutSeconds = 0n;
        message.maxExtraRowsToCompare = 0n;
        message.updateTableStats = false;
        message.maxDiffSeconds = 0n;
        if (value !== undefined)
            reflectionMergePartial<VDiffCoreOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VDiffCoreOptions): VDiffCoreOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tables */ 1:
                    message.tables = reader.string();
                    break;
                case /* bool auto_retry */ 2:
                    message.autoRetry = reader.bool();
                    break;
                case /* int64 max_rows */ 3:
                    message.maxRows = reader.int64().toBigInt();
                    break;
                case /* bool checksum */ 4:
                    message.checksum = reader.bool();
                    break;
                case /* int64 sample_pct */ 5:
                    message.samplePct = reader.int64().toBigInt();
                    break;
                case /* int64 timeout_seconds */ 6:
                    message.timeoutSeconds = reader.int64().toBigInt();
                    break;
                case /* int64 max_extra_rows_to_compare */ 7:
                    message.maxExtraRowsToCompare = reader.int64().toBigInt();
                    break;
                case /* bool update_table_stats */ 8:
                    message.updateTableStats = reader.bool();
                    break;
                case /* int64 max_diff_seconds */ 9:
                    message.maxDiffSeconds = reader.int64().toBigInt();
                    break;
                case /* optional bool auto_start */ 10:
                    message.autoStart = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VDiffCoreOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tables = 1; */
        if (message.tables !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tables);
        /* bool auto_retry = 2; */
        if (message.autoRetry !== false)
            writer.tag(2, WireType.Varint).bool(message.autoRetry);
        /* int64 max_rows = 3; */
        if (message.maxRows !== 0n)
            writer.tag(3, WireType.Varint).int64(message.maxRows);
        /* bool checksum = 4; */
        if (message.checksum !== false)
            writer.tag(4, WireType.Varint).bool(message.checksum);
        /* int64 sample_pct = 5; */
        if (message.samplePct !== 0n)
            writer.tag(5, WireType.Varint).int64(message.samplePct);
        /* int64 timeout_seconds = 6; */
        if (message.timeoutSeconds !== 0n)
            writer.tag(6, WireType.Varint).int64(message.timeoutSeconds);
        /* int64 max_extra_rows_to_compare = 7; */
        if (message.maxExtraRowsToCompare !== 0n)
            writer.tag(7, WireType.Varint).int64(message.maxExtraRowsToCompare);
        /* bool update_table_stats = 8; */
        if (message.updateTableStats !== false)
            writer.tag(8, WireType.Varint).bool(message.updateTableStats);
        /* int64 max_diff_seconds = 9; */
        if (message.maxDiffSeconds !== 0n)
            writer.tag(9, WireType.Varint).int64(message.maxDiffSeconds);
        /* optional bool auto_start = 10; */
        if (message.autoStart !== undefined)
            writer.tag(10, WireType.Varint).bool(message.autoStart);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VDiffCoreOptions
 */
export const VDiffCoreOptions = new VDiffCoreOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VDiffOptions$Type extends MessageType<VDiffOptions> {
    constructor() {
        super("tabletmanagerdata.VDiffOptions", [
            { no: 1, name: "picker_options", kind: "message", T: () => VDiffPickerOptions },
            { no: 2, name: "core_options", kind: "message", T: () => VDiffCoreOptions },
            { no: 3, name: "report_options", kind: "message", T: () => VDiffReportOptions }
        ]);
    }
    create(value?: PartialMessage<VDiffOptions>): VDiffOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VDiffOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VDiffOptions): VDiffOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* tabletmanagerdata.VDiffPickerOptions picker_options */ 1:
                    message.pickerOptions = VDiffPickerOptions.internalBinaryRead(reader, reader.uint32(), options, message.pickerOptions);
                    break;
                case /* tabletmanagerdata.VDiffCoreOptions core_options */ 2:
                    message.coreOptions = VDiffCoreOptions.internalBinaryRead(reader, reader.uint32(), options, message.coreOptions);
                    break;
                case /* tabletmanagerdata.VDiffReportOptions report_options */ 3:
                    message.reportOptions = VDiffReportOptions.internalBinaryRead(reader, reader.uint32(), options, message.reportOptions);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VDiffOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* tabletmanagerdata.VDiffPickerOptions picker_options = 1; */
        if (message.pickerOptions)
            VDiffPickerOptions.internalBinaryWrite(message.pickerOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* tabletmanagerdata.VDiffCoreOptions core_options = 2; */
        if (message.coreOptions)
            VDiffCoreOptions.internalBinaryWrite(message.coreOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* tabletmanagerdata.VDiffReportOptions report_options = 3; */
        if (message.reportOptions)
            VDiffReportOptions.internalBinaryWrite(message.reportOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.VDiffOptions
 */
export const VDiffOptions = new VDiffOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVReplicationWorkflowRequest$Type extends MessageType<UpdateVReplicationWorkflowRequest> {
    constructor() {
        super("tabletmanagerdata.UpdateVReplicationWorkflowRequest", [
            { no: 1, name: "workflow", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cells", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tablet_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["topodata.TabletType", TabletType] },
            { no: 4, name: "tablet_selection_preference", kind: "enum", opt: true, T: () => ["tabletmanagerdata.TabletSelectionPreference", TabletSelectionPreference] },
            { no: 5, name: "on_ddl", kind: "enum", opt: true, T: () => ["binlogdata.OnDDLAction", OnDDLAction] },
            { no: 6, name: "state", kind: "enum", opt: true, T: () => ["binlogdata.VReplicationWorkflowState", VReplicationWorkflowState] },
            { no: 8, name: "config_overrides", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<UpdateVReplicationWorkflowRequest>): UpdateVReplicationWorkflowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.workflow = "";
        message.cells = [];
        message.tabletTypes = [];
        message.configOverrides = {};
        if (value !== undefined)
            reflectionMergePartial<UpdateVReplicationWorkflowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVReplicationWorkflowRequest): UpdateVReplicationWorkflowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string workflow */ 1:
                    message.workflow = reader.string();
                    break;
                case /* repeated string cells */ 2:
                    message.cells.push(reader.string());
                    break;
                case /* repeated topodata.TabletType tablet_types */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tabletTypes.push(reader.int32());
                    else
                        message.tabletTypes.push(reader.int32());
                    break;
                case /* optional tabletmanagerdata.TabletSelectionPreference tablet_selection_preference */ 4:
                    message.tabletSelectionPreference = reader.int32();
                    break;
                case /* optional binlogdata.OnDDLAction on_ddl */ 5:
                    message.onDdl = reader.int32();
                    break;
                case /* optional binlogdata.VReplicationWorkflowState state */ 6:
                    message.state = reader.int32();
                    break;
                case /* map<string, string> config_overrides */ 8:
                    this.binaryReadMap8(message.configOverrides, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: UpdateVReplicationWorkflowRequest["configOverrides"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof UpdateVReplicationWorkflowRequest["configOverrides"] | undefined, val: UpdateVReplicationWorkflowRequest["configOverrides"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.UpdateVReplicationWorkflowRequest.config_overrides");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: UpdateVReplicationWorkflowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string workflow = 1; */
        if (message.workflow !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.workflow);
        /* repeated string cells = 2; */
        for (let i = 0; i < message.cells.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.cells[i]);
        /* repeated topodata.TabletType tablet_types = 3; */
        if (message.tabletTypes.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tabletTypes.length; i++)
                writer.int32(message.tabletTypes[i]);
            writer.join();
        }
        /* optional tabletmanagerdata.TabletSelectionPreference tablet_selection_preference = 4; */
        if (message.tabletSelectionPreference !== undefined)
            writer.tag(4, WireType.Varint).int32(message.tabletSelectionPreference);
        /* optional binlogdata.OnDDLAction on_ddl = 5; */
        if (message.onDdl !== undefined)
            writer.tag(5, WireType.Varint).int32(message.onDdl);
        /* optional binlogdata.VReplicationWorkflowState state = 6; */
        if (message.state !== undefined)
            writer.tag(6, WireType.Varint).int32(message.state);
        /* map<string, string> config_overrides = 8; */
        for (let k of globalThis.Object.keys(message.configOverrides))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.configOverrides[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UpdateVReplicationWorkflowRequest
 */
export const UpdateVReplicationWorkflowRequest = new UpdateVReplicationWorkflowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVReplicationWorkflowResponse$Type extends MessageType<UpdateVReplicationWorkflowResponse> {
    constructor() {
        super("tabletmanagerdata.UpdateVReplicationWorkflowResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<UpdateVReplicationWorkflowResponse>): UpdateVReplicationWorkflowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateVReplicationWorkflowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVReplicationWorkflowResponse): UpdateVReplicationWorkflowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVReplicationWorkflowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UpdateVReplicationWorkflowResponse
 */
export const UpdateVReplicationWorkflowResponse = new UpdateVReplicationWorkflowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVReplicationWorkflowsRequest$Type extends MessageType<UpdateVReplicationWorkflowsRequest> {
    constructor() {
        super("tabletmanagerdata.UpdateVReplicationWorkflowsRequest", [
            { no: 1, name: "all_workflows", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "include_workflows", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "exclude_workflows", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "state", kind: "enum", opt: true, T: () => ["binlogdata.VReplicationWorkflowState", VReplicationWorkflowState] },
            { no: 5, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "stop_position", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateVReplicationWorkflowsRequest>): UpdateVReplicationWorkflowsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allWorkflows = false;
        message.includeWorkflows = [];
        message.excludeWorkflows = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateVReplicationWorkflowsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVReplicationWorkflowsRequest): UpdateVReplicationWorkflowsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool all_workflows */ 1:
                    message.allWorkflows = reader.bool();
                    break;
                case /* repeated string include_workflows */ 2:
                    message.includeWorkflows.push(reader.string());
                    break;
                case /* repeated string exclude_workflows */ 3:
                    message.excludeWorkflows.push(reader.string());
                    break;
                case /* optional binlogdata.VReplicationWorkflowState state */ 4:
                    message.state = reader.int32();
                    break;
                case /* optional string message */ 5:
                    message.message = reader.string();
                    break;
                case /* optional string stop_position */ 6:
                    message.stopPosition = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVReplicationWorkflowsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool all_workflows = 1; */
        if (message.allWorkflows !== false)
            writer.tag(1, WireType.Varint).bool(message.allWorkflows);
        /* repeated string include_workflows = 2; */
        for (let i = 0; i < message.includeWorkflows.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.includeWorkflows[i]);
        /* repeated string exclude_workflows = 3; */
        for (let i = 0; i < message.excludeWorkflows.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.excludeWorkflows[i]);
        /* optional binlogdata.VReplicationWorkflowState state = 4; */
        if (message.state !== undefined)
            writer.tag(4, WireType.Varint).int32(message.state);
        /* optional string message = 5; */
        if (message.message !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.message);
        /* optional string stop_position = 6; */
        if (message.stopPosition !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.stopPosition);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UpdateVReplicationWorkflowsRequest
 */
export const UpdateVReplicationWorkflowsRequest = new UpdateVReplicationWorkflowsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateVReplicationWorkflowsResponse$Type extends MessageType<UpdateVReplicationWorkflowsResponse> {
    constructor() {
        super("tabletmanagerdata.UpdateVReplicationWorkflowsResponse", [
            { no: 1, name: "result", kind: "message", T: () => QueryResult }
        ]);
    }
    create(value?: PartialMessage<UpdateVReplicationWorkflowsResponse>): UpdateVReplicationWorkflowsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateVReplicationWorkflowsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateVReplicationWorkflowsResponse): UpdateVReplicationWorkflowsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* query.QueryResult result */ 1:
                    message.result = QueryResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateVReplicationWorkflowsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* query.QueryResult result = 1; */
        if (message.result)
            QueryResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.UpdateVReplicationWorkflowsResponse
 */
export const UpdateVReplicationWorkflowsResponse = new UpdateVReplicationWorkflowsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetSequencesRequest$Type extends MessageType<ResetSequencesRequest> {
    constructor() {
        super("tabletmanagerdata.ResetSequencesRequest", [
            { no: 1, name: "tables", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResetSequencesRequest>): ResetSequencesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tables = [];
        if (value !== undefined)
            reflectionMergePartial<ResetSequencesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetSequencesRequest): ResetSequencesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string tables */ 1:
                    message.tables.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetSequencesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string tables = 1; */
        for (let i = 0; i < message.tables.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tables[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ResetSequencesRequest
 */
export const ResetSequencesRequest = new ResetSequencesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetSequencesResponse$Type extends MessageType<ResetSequencesResponse> {
    constructor() {
        super("tabletmanagerdata.ResetSequencesResponse", []);
    }
    create(value?: PartialMessage<ResetSequencesResponse>): ResetSequencesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetSequencesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetSequencesResponse): ResetSequencesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetSequencesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ResetSequencesResponse
 */
export const ResetSequencesResponse = new ResetSequencesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckThrottlerRequest$Type extends MessageType<CheckThrottlerRequest> {
    constructor() {
        super("tabletmanagerdata.CheckThrottlerRequest", [
            { no: 1, name: "app_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "scope", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "skip_request_heartbeats", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "ok_if_not_exists", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "multi_metrics_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CheckThrottlerRequest>): CheckThrottlerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appName = "";
        message.scope = "";
        message.skipRequestHeartbeats = false;
        message.okIfNotExists = false;
        message.multiMetricsEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<CheckThrottlerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckThrottlerRequest): CheckThrottlerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string app_name */ 1:
                    message.appName = reader.string();
                    break;
                case /* string scope */ 2:
                    message.scope = reader.string();
                    break;
                case /* bool skip_request_heartbeats */ 3:
                    message.skipRequestHeartbeats = reader.bool();
                    break;
                case /* bool ok_if_not_exists */ 4:
                    message.okIfNotExists = reader.bool();
                    break;
                case /* bool multi_metrics_enabled */ 5:
                    message.multiMetricsEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckThrottlerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string app_name = 1; */
        if (message.appName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.appName);
        /* string scope = 2; */
        if (message.scope !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.scope);
        /* bool skip_request_heartbeats = 3; */
        if (message.skipRequestHeartbeats !== false)
            writer.tag(3, WireType.Varint).bool(message.skipRequestHeartbeats);
        /* bool ok_if_not_exists = 4; */
        if (message.okIfNotExists !== false)
            writer.tag(4, WireType.Varint).bool(message.okIfNotExists);
        /* bool multi_metrics_enabled = 5; */
        if (message.multiMetricsEnabled !== false)
            writer.tag(5, WireType.Varint).bool(message.multiMetricsEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.CheckThrottlerRequest
 */
export const CheckThrottlerRequest = new CheckThrottlerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckThrottlerResponse$Type extends MessageType<CheckThrottlerResponse> {
    constructor() {
        super("tabletmanagerdata.CheckThrottlerResponse", [
            { no: 1, name: "status_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "recently_checked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CheckThrottlerResponse_Metric } },
            { no: 8, name: "app_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "response_code", kind: "enum", T: () => ["tabletmanagerdata.CheckThrottlerResponseCode", CheckThrottlerResponseCode] }
        ]);
    }
    create(value?: PartialMessage<CheckThrottlerResponse>): CheckThrottlerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statusCode = 0;
        message.value = 0;
        message.threshold = 0;
        message.error = "";
        message.message = "";
        message.recentlyChecked = false;
        message.metrics = {};
        message.appName = "";
        message.summary = "";
        message.responseCode = 0;
        if (value !== undefined)
            reflectionMergePartial<CheckThrottlerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckThrottlerResponse): CheckThrottlerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status_code */ 1:
                    message.statusCode = reader.int32();
                    break;
                case /* double value */ 2:
                    message.value = reader.double();
                    break;
                case /* double threshold */ 3:
                    message.threshold = reader.double();
                    break;
                case /* string error */ 4:
                    message.error = reader.string();
                    break;
                case /* string message */ 5:
                    message.message = reader.string();
                    break;
                case /* bool recently_checked */ 6:
                    message.recentlyChecked = reader.bool();
                    break;
                case /* map<string, tabletmanagerdata.CheckThrottlerResponse.Metric> metrics */ 7:
                    this.binaryReadMap7(message.metrics, reader, options);
                    break;
                case /* string app_name */ 8:
                    message.appName = reader.string();
                    break;
                case /* string summary */ 9:
                    message.summary = reader.string();
                    break;
                case /* tabletmanagerdata.CheckThrottlerResponseCode response_code */ 10:
                    message.responseCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: CheckThrottlerResponse["metrics"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CheckThrottlerResponse["metrics"] | undefined, val: CheckThrottlerResponse["metrics"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = CheckThrottlerResponse_Metric.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.CheckThrottlerResponse.metrics");
            }
        }
        map[key ?? ""] = val ?? CheckThrottlerResponse_Metric.create();
    }
    internalBinaryWrite(message: CheckThrottlerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status_code = 1; */
        if (message.statusCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.statusCode);
        /* double value = 2; */
        if (message.value !== 0)
            writer.tag(2, WireType.Bit64).double(message.value);
        /* double threshold = 3; */
        if (message.threshold !== 0)
            writer.tag(3, WireType.Bit64).double(message.threshold);
        /* string error = 4; */
        if (message.error !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.error);
        /* string message = 5; */
        if (message.message !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.message);
        /* bool recently_checked = 6; */
        if (message.recentlyChecked !== false)
            writer.tag(6, WireType.Varint).bool(message.recentlyChecked);
        /* map<string, tabletmanagerdata.CheckThrottlerResponse.Metric> metrics = 7; */
        for (let k of globalThis.Object.keys(message.metrics)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            CheckThrottlerResponse_Metric.internalBinaryWrite(message.metrics[k], writer, options);
            writer.join().join();
        }
        /* string app_name = 8; */
        if (message.appName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appName);
        /* string summary = 9; */
        if (message.summary !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.summary);
        /* tabletmanagerdata.CheckThrottlerResponseCode response_code = 10; */
        if (message.responseCode !== 0)
            writer.tag(10, WireType.Varint).int32(message.responseCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.CheckThrottlerResponse
 */
export const CheckThrottlerResponse = new CheckThrottlerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckThrottlerResponse_Metric$Type extends MessageType<CheckThrottlerResponse_Metric> {
    constructor() {
        super("tabletmanagerdata.CheckThrottlerResponse.Metric", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "scope", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "response_code", kind: "enum", T: () => ["tabletmanagerdata.CheckThrottlerResponseCode", CheckThrottlerResponseCode] }
        ]);
    }
    create(value?: PartialMessage<CheckThrottlerResponse_Metric>): CheckThrottlerResponse_Metric {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.statusCode = 0;
        message.value = 0;
        message.threshold = 0;
        message.error = "";
        message.message = "";
        message.scope = "";
        message.responseCode = 0;
        if (value !== undefined)
            reflectionMergePartial<CheckThrottlerResponse_Metric>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckThrottlerResponse_Metric): CheckThrottlerResponse_Metric {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 status_code */ 2:
                    message.statusCode = reader.int32();
                    break;
                case /* double value */ 3:
                    message.value = reader.double();
                    break;
                case /* double threshold */ 4:
                    message.threshold = reader.double();
                    break;
                case /* string error */ 5:
                    message.error = reader.string();
                    break;
                case /* string message */ 6:
                    message.message = reader.string();
                    break;
                case /* string scope */ 7:
                    message.scope = reader.string();
                    break;
                case /* tabletmanagerdata.CheckThrottlerResponseCode response_code */ 8:
                    message.responseCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckThrottlerResponse_Metric, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 status_code = 2; */
        if (message.statusCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.statusCode);
        /* double value = 3; */
        if (message.value !== 0)
            writer.tag(3, WireType.Bit64).double(message.value);
        /* double threshold = 4; */
        if (message.threshold !== 0)
            writer.tag(4, WireType.Bit64).double(message.threshold);
        /* string error = 5; */
        if (message.error !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.error);
        /* string message = 6; */
        if (message.message !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.message);
        /* string scope = 7; */
        if (message.scope !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.scope);
        /* tabletmanagerdata.CheckThrottlerResponseCode response_code = 8; */
        if (message.responseCode !== 0)
            writer.tag(8, WireType.Varint).int32(message.responseCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.CheckThrottlerResponse.Metric
 */
export const CheckThrottlerResponse_Metric = new CheckThrottlerResponse_Metric$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetThrottlerStatusRequest$Type extends MessageType<GetThrottlerStatusRequest> {
    constructor() {
        super("tabletmanagerdata.GetThrottlerStatusRequest", []);
    }
    create(value?: PartialMessage<GetThrottlerStatusRequest>): GetThrottlerStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetThrottlerStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetThrottlerStatusRequest): GetThrottlerStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetThrottlerStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetThrottlerStatusRequest
 */
export const GetThrottlerStatusRequest = new GetThrottlerStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetThrottlerStatusResponse$Type extends MessageType<GetThrottlerStatusResponse> {
    constructor() {
        super("tabletmanagerdata.GetThrottlerStatusResponse", [
            { no: 1, name: "tablet_alias", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "keyspace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "shard", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_leader", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_open", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "is_dormant", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "lag_metric_query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "custom_metric_query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "default_threshold", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "metric_name_used_as_default", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "aggregated_metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => GetThrottlerStatusResponse_MetricResult } },
            { no: 13, name: "metric_thresholds", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ } },
            { no: 14, name: "metrics_health", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => GetThrottlerStatusResponse_MetricHealth } },
            { no: 15, name: "throttled_apps", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ThrottledAppRule } },
            { no: 16, name: "app_checked_metrics", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 17, name: "recently_checked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "recent_apps", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => GetThrottlerStatusResponse_RecentApp } }
        ]);
    }
    create(value?: PartialMessage<GetThrottlerStatusResponse>): GetThrottlerStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tabletAlias = "";
        message.keyspace = "";
        message.shard = "";
        message.isLeader = false;
        message.isOpen = false;
        message.isEnabled = false;
        message.isDormant = false;
        message.lagMetricQuery = "";
        message.customMetricQuery = "";
        message.defaultThreshold = 0;
        message.metricNameUsedAsDefault = "";
        message.aggregatedMetrics = {};
        message.metricThresholds = {};
        message.metricsHealth = {};
        message.throttledApps = {};
        message.appCheckedMetrics = {};
        message.recentlyChecked = false;
        message.recentApps = {};
        if (value !== undefined)
            reflectionMergePartial<GetThrottlerStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetThrottlerStatusResponse): GetThrottlerStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tablet_alias */ 1:
                    message.tabletAlias = reader.string();
                    break;
                case /* string keyspace */ 2:
                    message.keyspace = reader.string();
                    break;
                case /* string shard */ 3:
                    message.shard = reader.string();
                    break;
                case /* bool is_leader */ 4:
                    message.isLeader = reader.bool();
                    break;
                case /* bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* bool is_enabled */ 6:
                    message.isEnabled = reader.bool();
                    break;
                case /* bool is_dormant */ 7:
                    message.isDormant = reader.bool();
                    break;
                case /* string lag_metric_query */ 8:
                    message.lagMetricQuery = reader.string();
                    break;
                case /* string custom_metric_query */ 9:
                    message.customMetricQuery = reader.string();
                    break;
                case /* double default_threshold */ 10:
                    message.defaultThreshold = reader.double();
                    break;
                case /* string metric_name_used_as_default */ 11:
                    message.metricNameUsedAsDefault = reader.string();
                    break;
                case /* map<string, tabletmanagerdata.GetThrottlerStatusResponse.MetricResult> aggregated_metrics */ 12:
                    this.binaryReadMap12(message.aggregatedMetrics, reader, options);
                    break;
                case /* map<string, double> metric_thresholds */ 13:
                    this.binaryReadMap13(message.metricThresholds, reader, options);
                    break;
                case /* map<string, tabletmanagerdata.GetThrottlerStatusResponse.MetricHealth> metrics_health */ 14:
                    this.binaryReadMap14(message.metricsHealth, reader, options);
                    break;
                case /* map<string, topodata.ThrottledAppRule> throttled_apps */ 15:
                    this.binaryReadMap15(message.throttledApps, reader, options);
                    break;
                case /* map<string, string> app_checked_metrics */ 16:
                    this.binaryReadMap16(message.appCheckedMetrics, reader, options);
                    break;
                case /* bool recently_checked */ 17:
                    message.recentlyChecked = reader.bool();
                    break;
                case /* map<string, tabletmanagerdata.GetThrottlerStatusResponse.RecentApp> recent_apps */ 18:
                    this.binaryReadMap18(message.recentApps, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: GetThrottlerStatusResponse["aggregatedMetrics"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetThrottlerStatusResponse["aggregatedMetrics"] | undefined, val: GetThrottlerStatusResponse["aggregatedMetrics"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = GetThrottlerStatusResponse_MetricResult.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetThrottlerStatusResponse.aggregated_metrics");
            }
        }
        map[key ?? ""] = val ?? GetThrottlerStatusResponse_MetricResult.create();
    }
    private binaryReadMap13(map: GetThrottlerStatusResponse["metricThresholds"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetThrottlerStatusResponse["metricThresholds"] | undefined, val: GetThrottlerStatusResponse["metricThresholds"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.double();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetThrottlerStatusResponse.metric_thresholds");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    private binaryReadMap14(map: GetThrottlerStatusResponse["metricsHealth"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetThrottlerStatusResponse["metricsHealth"] | undefined, val: GetThrottlerStatusResponse["metricsHealth"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = GetThrottlerStatusResponse_MetricHealth.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetThrottlerStatusResponse.metrics_health");
            }
        }
        map[key ?? ""] = val ?? GetThrottlerStatusResponse_MetricHealth.create();
    }
    private binaryReadMap15(map: GetThrottlerStatusResponse["throttledApps"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetThrottlerStatusResponse["throttledApps"] | undefined, val: GetThrottlerStatusResponse["throttledApps"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ThrottledAppRule.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetThrottlerStatusResponse.throttled_apps");
            }
        }
        map[key ?? ""] = val ?? ThrottledAppRule.create();
    }
    private binaryReadMap16(map: GetThrottlerStatusResponse["appCheckedMetrics"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetThrottlerStatusResponse["appCheckedMetrics"] | undefined, val: GetThrottlerStatusResponse["appCheckedMetrics"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetThrottlerStatusResponse.app_checked_metrics");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    private binaryReadMap18(map: GetThrottlerStatusResponse["recentApps"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetThrottlerStatusResponse["recentApps"] | undefined, val: GetThrottlerStatusResponse["recentApps"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = GetThrottlerStatusResponse_RecentApp.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.GetThrottlerStatusResponse.recent_apps");
            }
        }
        map[key ?? ""] = val ?? GetThrottlerStatusResponse_RecentApp.create();
    }
    internalBinaryWrite(message: GetThrottlerStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tablet_alias = 1; */
        if (message.tabletAlias !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tabletAlias);
        /* string keyspace = 2; */
        if (message.keyspace !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.keyspace);
        /* string shard = 3; */
        if (message.shard !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shard);
        /* bool is_leader = 4; */
        if (message.isLeader !== false)
            writer.tag(4, WireType.Varint).bool(message.isLeader);
        /* bool is_open = 5; */
        if (message.isOpen !== false)
            writer.tag(5, WireType.Varint).bool(message.isOpen);
        /* bool is_enabled = 6; */
        if (message.isEnabled !== false)
            writer.tag(6, WireType.Varint).bool(message.isEnabled);
        /* bool is_dormant = 7; */
        if (message.isDormant !== false)
            writer.tag(7, WireType.Varint).bool(message.isDormant);
        /* string lag_metric_query = 8; */
        if (message.lagMetricQuery !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.lagMetricQuery);
        /* string custom_metric_query = 9; */
        if (message.customMetricQuery !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.customMetricQuery);
        /* double default_threshold = 10; */
        if (message.defaultThreshold !== 0)
            writer.tag(10, WireType.Bit64).double(message.defaultThreshold);
        /* string metric_name_used_as_default = 11; */
        if (message.metricNameUsedAsDefault !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.metricNameUsedAsDefault);
        /* map<string, tabletmanagerdata.GetThrottlerStatusResponse.MetricResult> aggregated_metrics = 12; */
        for (let k of globalThis.Object.keys(message.aggregatedMetrics)) {
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            GetThrottlerStatusResponse_MetricResult.internalBinaryWrite(message.aggregatedMetrics[k], writer, options);
            writer.join().join();
        }
        /* map<string, double> metric_thresholds = 13; */
        for (let k of globalThis.Object.keys(message.metricThresholds))
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Bit64).double(message.metricThresholds[k]).join();
        /* map<string, tabletmanagerdata.GetThrottlerStatusResponse.MetricHealth> metrics_health = 14; */
        for (let k of globalThis.Object.keys(message.metricsHealth)) {
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            GetThrottlerStatusResponse_MetricHealth.internalBinaryWrite(message.metricsHealth[k], writer, options);
            writer.join().join();
        }
        /* map<string, topodata.ThrottledAppRule> throttled_apps = 15; */
        for (let k of globalThis.Object.keys(message.throttledApps)) {
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ThrottledAppRule.internalBinaryWrite(message.throttledApps[k], writer, options);
            writer.join().join();
        }
        /* map<string, string> app_checked_metrics = 16; */
        for (let k of globalThis.Object.keys(message.appCheckedMetrics))
            writer.tag(16, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.appCheckedMetrics[k]).join();
        /* bool recently_checked = 17; */
        if (message.recentlyChecked !== false)
            writer.tag(17, WireType.Varint).bool(message.recentlyChecked);
        /* map<string, tabletmanagerdata.GetThrottlerStatusResponse.RecentApp> recent_apps = 18; */
        for (let k of globalThis.Object.keys(message.recentApps)) {
            writer.tag(18, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            GetThrottlerStatusResponse_RecentApp.internalBinaryWrite(message.recentApps[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetThrottlerStatusResponse
 */
export const GetThrottlerStatusResponse = new GetThrottlerStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetThrottlerStatusResponse_MetricResult$Type extends MessageType<GetThrottlerStatusResponse_MetricResult> {
    constructor() {
        super("tabletmanagerdata.GetThrottlerStatusResponse.MetricResult", [
            { no: 1, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetThrottlerStatusResponse_MetricResult>): GetThrottlerStatusResponse_MetricResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = 0;
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<GetThrottlerStatusResponse_MetricResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetThrottlerStatusResponse_MetricResult): GetThrottlerStatusResponse_MetricResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double value */ 1:
                    message.value = reader.double();
                    break;
                case /* string error */ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetThrottlerStatusResponse_MetricResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit64).double(message.value);
        /* string error = 2; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetThrottlerStatusResponse.MetricResult
 */
export const GetThrottlerStatusResponse_MetricResult = new GetThrottlerStatusResponse_MetricResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetThrottlerStatusResponse_MetricHealth$Type extends MessageType<GetThrottlerStatusResponse_MetricHealth> {
    constructor() {
        super("tabletmanagerdata.GetThrottlerStatusResponse.MetricHealth", [
            { no: 1, name: "last_healthy_at", kind: "message", T: () => Time },
            { no: 2, name: "seconds_since_last_healthy", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetThrottlerStatusResponse_MetricHealth>): GetThrottlerStatusResponse_MetricHealth {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.secondsSinceLastHealthy = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetThrottlerStatusResponse_MetricHealth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetThrottlerStatusResponse_MetricHealth): GetThrottlerStatusResponse_MetricHealth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vttime.Time last_healthy_at */ 1:
                    message.lastHealthyAt = Time.internalBinaryRead(reader, reader.uint32(), options, message.lastHealthyAt);
                    break;
                case /* int64 seconds_since_last_healthy */ 2:
                    message.secondsSinceLastHealthy = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetThrottlerStatusResponse_MetricHealth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* vttime.Time last_healthy_at = 1; */
        if (message.lastHealthyAt)
            Time.internalBinaryWrite(message.lastHealthyAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 seconds_since_last_healthy = 2; */
        if (message.secondsSinceLastHealthy !== 0n)
            writer.tag(2, WireType.Varint).int64(message.secondsSinceLastHealthy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetThrottlerStatusResponse.MetricHealth
 */
export const GetThrottlerStatusResponse_MetricHealth = new GetThrottlerStatusResponse_MetricHealth$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetThrottlerStatusResponse_RecentApp$Type extends MessageType<GetThrottlerStatusResponse_RecentApp> {
    constructor() {
        super("tabletmanagerdata.GetThrottlerStatusResponse.RecentApp", [
            { no: 1, name: "checked_at", kind: "message", T: () => Time },
            { no: 2, name: "status_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "response_code", kind: "enum", T: () => ["tabletmanagerdata.CheckThrottlerResponseCode", CheckThrottlerResponseCode] }
        ]);
    }
    create(value?: PartialMessage<GetThrottlerStatusResponse_RecentApp>): GetThrottlerStatusResponse_RecentApp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statusCode = 0;
        message.responseCode = 0;
        if (value !== undefined)
            reflectionMergePartial<GetThrottlerStatusResponse_RecentApp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetThrottlerStatusResponse_RecentApp): GetThrottlerStatusResponse_RecentApp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vttime.Time checked_at */ 1:
                    message.checkedAt = Time.internalBinaryRead(reader, reader.uint32(), options, message.checkedAt);
                    break;
                case /* int32 status_code */ 2:
                    message.statusCode = reader.int32();
                    break;
                case /* tabletmanagerdata.CheckThrottlerResponseCode response_code */ 3:
                    message.responseCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetThrottlerStatusResponse_RecentApp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* vttime.Time checked_at = 1; */
        if (message.checkedAt)
            Time.internalBinaryWrite(message.checkedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 status_code = 2; */
        if (message.statusCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.statusCode);
        /* tabletmanagerdata.CheckThrottlerResponseCode response_code = 3; */
        if (message.responseCode !== 0)
            writer.tag(3, WireType.Varint).int32(message.responseCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.GetThrottlerStatusResponse.RecentApp
 */
export const GetThrottlerStatusResponse_RecentApp = new GetThrottlerStatusResponse_RecentApp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeTagsRequest$Type extends MessageType<ChangeTagsRequest> {
    constructor() {
        super("tabletmanagerdata.ChangeTagsRequest", [
            { no: 1, name: "tags", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 2, name: "replace", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeTagsRequest>): ChangeTagsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tags = {};
        message.replace = false;
        if (value !== undefined)
            reflectionMergePartial<ChangeTagsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeTagsRequest): ChangeTagsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> tags */ 1:
                    this.binaryReadMap1(message.tags, reader, options);
                    break;
                case /* bool replace */ 2:
                    message.replace = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ChangeTagsRequest["tags"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChangeTagsRequest["tags"] | undefined, val: ChangeTagsRequest["tags"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.ChangeTagsRequest.tags");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ChangeTagsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> tags = 1; */
        for (let k of globalThis.Object.keys(message.tags))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.tags[k]).join();
        /* bool replace = 2; */
        if (message.replace !== false)
            writer.tag(2, WireType.Varint).bool(message.replace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ChangeTagsRequest
 */
export const ChangeTagsRequest = new ChangeTagsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeTagsResponse$Type extends MessageType<ChangeTagsResponse> {
    constructor() {
        super("tabletmanagerdata.ChangeTagsResponse", [
            { no: 1, name: "tags", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ChangeTagsResponse>): ChangeTagsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tags = {};
        if (value !== undefined)
            reflectionMergePartial<ChangeTagsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeTagsResponse): ChangeTagsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> tags */ 1:
                    this.binaryReadMap1(message.tags, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: ChangeTagsResponse["tags"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ChangeTagsResponse["tags"] | undefined, val: ChangeTagsResponse["tags"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field tabletmanagerdata.ChangeTagsResponse.tags");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ChangeTagsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> tags = 1; */
        for (let k of globalThis.Object.keys(message.tags))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.tags[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message tabletmanagerdata.ChangeTagsResponse
 */
export const ChangeTagsResponse = new ChangeTagsResponse$Type();
