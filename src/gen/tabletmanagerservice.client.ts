// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "tabletmanagerservice.proto" (package "tabletmanagerservice", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This file contains the service definition for making management API
// calls to VtTablet.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TabletManager } from "./tabletmanagerservice";
import type { GetThrottlerStatusResponse } from "./tabletmanagerdata";
import type { GetThrottlerStatusRequest } from "./tabletmanagerdata";
import type { CheckThrottlerResponse } from "./tabletmanagerdata";
import type { CheckThrottlerRequest } from "./tabletmanagerdata";
import type { RestoreFromBackupResponse } from "./tabletmanagerdata";
import type { RestoreFromBackupRequest } from "./tabletmanagerdata";
import type { BackupResponse } from "./tabletmanagerdata";
import type { BackupRequest } from "./tabletmanagerdata";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { PromoteReplicaResponse } from "./tabletmanagerdata";
import type { PromoteReplicaRequest } from "./tabletmanagerdata";
import type { StopReplicationAndGetStatusResponse } from "./tabletmanagerdata";
import type { StopReplicationAndGetStatusRequest } from "./tabletmanagerdata";
import type { ReplicaWasRestartedResponse } from "./tabletmanagerdata";
import type { ReplicaWasRestartedRequest } from "./tabletmanagerdata";
import type { SetReplicationSourceResponse } from "./tabletmanagerdata";
import type { SetReplicationSourceRequest } from "./tabletmanagerdata";
import type { FullStatusResponse } from "./tabletmanagerdata";
import type { FullStatusRequest } from "./tabletmanagerdata";
import type { ResetReplicationParametersResponse } from "./tabletmanagerdata";
import type { ResetReplicationParametersRequest } from "./tabletmanagerdata";
import type { ReplicaWasPromotedResponse } from "./tabletmanagerdata";
import type { ReplicaWasPromotedRequest } from "./tabletmanagerdata";
import type { UndoDemotePrimaryResponse } from "./tabletmanagerdata";
import type { UndoDemotePrimaryRequest } from "./tabletmanagerdata";
import type { DemotePrimaryResponse } from "./tabletmanagerdata";
import type { DemotePrimaryRequest } from "./tabletmanagerdata";
import type { InitReplicaResponse } from "./tabletmanagerdata";
import type { InitReplicaRequest } from "./tabletmanagerdata";
import type { ReadReparentJournalInfoResponse } from "./tabletmanagerdata";
import type { ReadReparentJournalInfoRequest } from "./tabletmanagerdata";
import type { PopulateReparentJournalResponse } from "./tabletmanagerdata";
import type { PopulateReparentJournalRequest } from "./tabletmanagerdata";
import type { InitPrimaryResponse } from "./tabletmanagerdata";
import type { InitPrimaryRequest } from "./tabletmanagerdata";
import type { ResetReplicationResponse } from "./tabletmanagerdata";
import type { ResetReplicationRequest } from "./tabletmanagerdata";
import type { VDiffResponse } from "./tabletmanagerdata";
import type { VDiffRequest } from "./tabletmanagerdata";
import type { VReplicationWaitForPosResponse } from "./tabletmanagerdata";
import type { VReplicationWaitForPosRequest } from "./tabletmanagerdata";
import type { VReplicationExecResponse } from "./tabletmanagerdata";
import type { VReplicationExecRequest } from "./tabletmanagerdata";
import type { ValidateVReplicationPermissionsResponse } from "./tabletmanagerdata";
import type { ValidateVReplicationPermissionsRequest } from "./tabletmanagerdata";
import type { UpdateVReplicationWorkflowsResponse } from "./tabletmanagerdata";
import type { UpdateVReplicationWorkflowsRequest } from "./tabletmanagerdata";
import type { UpdateVReplicationWorkflowResponse } from "./tabletmanagerdata";
import type { UpdateVReplicationWorkflowRequest } from "./tabletmanagerdata";
import type { ReadVReplicationWorkflowsResponse } from "./tabletmanagerdata";
import type { ReadVReplicationWorkflowsRequest } from "./tabletmanagerdata";
import type { ReadVReplicationWorkflowResponse } from "./tabletmanagerdata";
import type { ReadVReplicationWorkflowRequest } from "./tabletmanagerdata";
import type { HasVReplicationWorkflowsResponse } from "./tabletmanagerdata";
import type { HasVReplicationWorkflowsRequest } from "./tabletmanagerdata";
import type { DeleteVReplicationWorkflowResponse } from "./tabletmanagerdata";
import type { DeleteVReplicationWorkflowRequest } from "./tabletmanagerdata";
import type { CreateVReplicationWorkflowResponse } from "./tabletmanagerdata";
import type { CreateVReplicationWorkflowRequest } from "./tabletmanagerdata";
import type { GetReplicasResponse } from "./tabletmanagerdata";
import type { GetReplicasRequest } from "./tabletmanagerdata";
import type { StartReplicationUntilAfterResponse } from "./tabletmanagerdata";
import type { StartReplicationUntilAfterRequest } from "./tabletmanagerdata";
import type { StartReplicationResponse } from "./tabletmanagerdata";
import type { StartReplicationRequest } from "./tabletmanagerdata";
import type { StopReplicationMinimumResponse } from "./tabletmanagerdata";
import type { StopReplicationMinimumRequest } from "./tabletmanagerdata";
import type { StopReplicationResponse } from "./tabletmanagerdata";
import type { StopReplicationRequest } from "./tabletmanagerdata";
import type { WaitForPositionResponse } from "./tabletmanagerdata";
import type { WaitForPositionRequest } from "./tabletmanagerdata";
import type { PrimaryPositionResponse } from "./tabletmanagerdata";
import type { PrimaryPositionRequest } from "./tabletmanagerdata";
import type { PrimaryStatusResponse } from "./tabletmanagerdata";
import type { PrimaryStatusRequest } from "./tabletmanagerdata";
import type { ReplicationStatusResponse } from "./tabletmanagerdata";
import type { ReplicationStatusRequest } from "./tabletmanagerdata";
import type { MysqlHostMetricsResponse } from "./tabletmanagerdata";
import type { MysqlHostMetricsRequest } from "./tabletmanagerdata";
import type { ConcludeTransactionResponse } from "./tabletmanagerdata";
import type { ConcludeTransactionRequest } from "./tabletmanagerdata";
import type { ReadTransactionResponse } from "./tabletmanagerdata";
import type { ReadTransactionRequest } from "./tabletmanagerdata";
import type { GetUnresolvedTransactionsResponse } from "./tabletmanagerdata";
import type { GetUnresolvedTransactionsRequest } from "./tabletmanagerdata";
import type { ExecuteFetchAsAppResponse } from "./tabletmanagerdata";
import type { ExecuteFetchAsAppRequest } from "./tabletmanagerdata";
import type { ExecuteFetchAsAllPrivsResponse } from "./tabletmanagerdata";
import type { ExecuteFetchAsAllPrivsRequest } from "./tabletmanagerdata";
import type { ExecuteMultiFetchAsDbaResponse } from "./tabletmanagerdata";
import type { ExecuteMultiFetchAsDbaRequest } from "./tabletmanagerdata";
import type { ExecuteFetchAsDbaResponse } from "./tabletmanagerdata";
import type { ExecuteFetchAsDbaRequest } from "./tabletmanagerdata";
import type { ExecuteQueryResponse } from "./tabletmanagerdata";
import type { ExecuteQueryRequest } from "./tabletmanagerdata";
import type { UnlockTablesResponse } from "./tabletmanagerdata";
import type { UnlockTablesRequest } from "./tabletmanagerdata";
import type { LockTablesResponse } from "./tabletmanagerdata";
import type { LockTablesRequest } from "./tabletmanagerdata";
import type { ResetSequencesResponse } from "./tabletmanagerdata";
import type { ResetSequencesRequest } from "./tabletmanagerdata";
import type { ApplySchemaResponse } from "./tabletmanagerdata";
import type { ApplySchemaRequest } from "./tabletmanagerdata";
import type { PreflightSchemaResponse } from "./tabletmanagerdata";
import type { PreflightSchemaRequest } from "./tabletmanagerdata";
import type { ReloadSchemaResponse } from "./tabletmanagerdata";
import type { ReloadSchemaRequest } from "./tabletmanagerdata";
import type { RunHealthCheckResponse } from "./tabletmanagerdata";
import type { RunHealthCheckRequest } from "./tabletmanagerdata";
import type { RefreshStateResponse } from "./tabletmanagerdata";
import type { RefreshStateRequest } from "./tabletmanagerdata";
import type { ChangeTypeResponse } from "./tabletmanagerdata";
import type { ChangeTypeRequest } from "./tabletmanagerdata";
import type { ChangeTagsResponse } from "./tabletmanagerdata";
import type { ChangeTagsRequest } from "./tabletmanagerdata";
import type { SetReadWriteResponse } from "./tabletmanagerdata";
import type { SetReadWriteRequest } from "./tabletmanagerdata";
import type { SetReadOnlyResponse } from "./tabletmanagerdata";
import type { SetReadOnlyRequest } from "./tabletmanagerdata";
import type { GetGlobalStatusVarsResponse } from "./tabletmanagerdata";
import type { GetGlobalStatusVarsRequest } from "./tabletmanagerdata";
import type { GetPermissionsResponse } from "./tabletmanagerdata";
import type { GetPermissionsRequest } from "./tabletmanagerdata";
import type { GetSchemaResponse } from "./tabletmanagerdata";
import type { GetSchemaRequest } from "./tabletmanagerdata";
import type { ExecuteHookResponse } from "./tabletmanagerdata";
import type { ExecuteHookRequest } from "./tabletmanagerdata";
import type { SleepResponse } from "./tabletmanagerdata";
import type { SleepRequest } from "./tabletmanagerdata";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PingResponse } from "./tabletmanagerdata";
import type { PingRequest } from "./tabletmanagerdata";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * TabletManager is a service definition for tabletmanagerdata.TabletManager.
 *
 *
 * Various read-only methods
 *
 *
 * @generated from protobuf service tabletmanagerservice.TabletManager
 */
export interface ITabletManagerClient {
    /**
     * Ping returns the input payload
     *
     * @generated from protobuf rpc: Ping(tabletmanagerdata.PingRequest) returns (tabletmanagerdata.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse>;
    /**
     * Sleep sleeps for the provided duration
     *
     * @generated from protobuf rpc: Sleep(tabletmanagerdata.SleepRequest) returns (tabletmanagerdata.SleepResponse);
     */
    sleep(input: SleepRequest, options?: RpcOptions): UnaryCall<SleepRequest, SleepResponse>;
    /**
     * ExecuteHook executes the hook remotely
     *
     * @generated from protobuf rpc: ExecuteHook(tabletmanagerdata.ExecuteHookRequest) returns (tabletmanagerdata.ExecuteHookResponse);
     */
    executeHook(input: ExecuteHookRequest, options?: RpcOptions): UnaryCall<ExecuteHookRequest, ExecuteHookResponse>;
    /**
     * GetSchema asks the tablet for its schema
     *
     * @generated from protobuf rpc: GetSchema(tabletmanagerdata.GetSchemaRequest) returns (tabletmanagerdata.GetSchemaResponse);
     */
    getSchema(input: GetSchemaRequest, options?: RpcOptions): UnaryCall<GetSchemaRequest, GetSchemaResponse>;
    /**
     * GetPermissions asks the tablet for its permissions
     *
     * @generated from protobuf rpc: GetPermissions(tabletmanagerdata.GetPermissionsRequest) returns (tabletmanagerdata.GetPermissionsResponse);
     */
    getPermissions(input: GetPermissionsRequest, options?: RpcOptions): UnaryCall<GetPermissionsRequest, GetPermissionsResponse>;
    /**
     * GetGlobalStatusVars returns the server's global status variables asked for.
     * An empty/nil variable name parameter slice means you want all of them.
     *
     * @generated from protobuf rpc: GetGlobalStatusVars(tabletmanagerdata.GetGlobalStatusVarsRequest) returns (tabletmanagerdata.GetGlobalStatusVarsResponse);
     */
    getGlobalStatusVars(input: GetGlobalStatusVarsRequest, options?: RpcOptions): UnaryCall<GetGlobalStatusVarsRequest, GetGlobalStatusVarsResponse>;
    // 
    // Various read-write methods
    // 

    /**
     * @generated from protobuf rpc: SetReadOnly(tabletmanagerdata.SetReadOnlyRequest) returns (tabletmanagerdata.SetReadOnlyResponse);
     */
    setReadOnly(input: SetReadOnlyRequest, options?: RpcOptions): UnaryCall<SetReadOnlyRequest, SetReadOnlyResponse>;
    /**
     * @generated from protobuf rpc: SetReadWrite(tabletmanagerdata.SetReadWriteRequest) returns (tabletmanagerdata.SetReadWriteResponse);
     */
    setReadWrite(input: SetReadWriteRequest, options?: RpcOptions): UnaryCall<SetReadWriteRequest, SetReadWriteResponse>;
    /**
     * ChangeTags asks the remote tablet to change its tags
     *
     * @generated from protobuf rpc: ChangeTags(tabletmanagerdata.ChangeTagsRequest) returns (tabletmanagerdata.ChangeTagsResponse);
     */
    changeTags(input: ChangeTagsRequest, options?: RpcOptions): UnaryCall<ChangeTagsRequest, ChangeTagsResponse>;
    /**
     * ChangeType asks the remote tablet to change its type
     *
     * @generated from protobuf rpc: ChangeType(tabletmanagerdata.ChangeTypeRequest) returns (tabletmanagerdata.ChangeTypeResponse);
     */
    changeType(input: ChangeTypeRequest, options?: RpcOptions): UnaryCall<ChangeTypeRequest, ChangeTypeResponse>;
    /**
     * @generated from protobuf rpc: RefreshState(tabletmanagerdata.RefreshStateRequest) returns (tabletmanagerdata.RefreshStateResponse);
     */
    refreshState(input: RefreshStateRequest, options?: RpcOptions): UnaryCall<RefreshStateRequest, RefreshStateResponse>;
    /**
     * @generated from protobuf rpc: RunHealthCheck(tabletmanagerdata.RunHealthCheckRequest) returns (tabletmanagerdata.RunHealthCheckResponse);
     */
    runHealthCheck(input: RunHealthCheckRequest, options?: RpcOptions): UnaryCall<RunHealthCheckRequest, RunHealthCheckResponse>;
    /**
     * @generated from protobuf rpc: ReloadSchema(tabletmanagerdata.ReloadSchemaRequest) returns (tabletmanagerdata.ReloadSchemaResponse);
     */
    reloadSchema(input: ReloadSchemaRequest, options?: RpcOptions): UnaryCall<ReloadSchemaRequest, ReloadSchemaResponse>;
    /**
     * @generated from protobuf rpc: PreflightSchema(tabletmanagerdata.PreflightSchemaRequest) returns (tabletmanagerdata.PreflightSchemaResponse);
     */
    preflightSchema(input: PreflightSchemaRequest, options?: RpcOptions): UnaryCall<PreflightSchemaRequest, PreflightSchemaResponse>;
    /**
     * @generated from protobuf rpc: ApplySchema(tabletmanagerdata.ApplySchemaRequest) returns (tabletmanagerdata.ApplySchemaResponse);
     */
    applySchema(input: ApplySchemaRequest, options?: RpcOptions): UnaryCall<ApplySchemaRequest, ApplySchemaResponse>;
    /**
     * @generated from protobuf rpc: ResetSequences(tabletmanagerdata.ResetSequencesRequest) returns (tabletmanagerdata.ResetSequencesResponse);
     */
    resetSequences(input: ResetSequencesRequest, options?: RpcOptions): UnaryCall<ResetSequencesRequest, ResetSequencesResponse>;
    /**
     * @generated from protobuf rpc: LockTables(tabletmanagerdata.LockTablesRequest) returns (tabletmanagerdata.LockTablesResponse);
     */
    lockTables(input: LockTablesRequest, options?: RpcOptions): UnaryCall<LockTablesRequest, LockTablesResponse>;
    /**
     * @generated from protobuf rpc: UnlockTables(tabletmanagerdata.UnlockTablesRequest) returns (tabletmanagerdata.UnlockTablesResponse);
     */
    unlockTables(input: UnlockTablesRequest, options?: RpcOptions): UnaryCall<UnlockTablesRequest, UnlockTablesResponse>;
    /**
     * @generated from protobuf rpc: ExecuteQuery(tabletmanagerdata.ExecuteQueryRequest) returns (tabletmanagerdata.ExecuteQueryResponse);
     */
    executeQuery(input: ExecuteQueryRequest, options?: RpcOptions): UnaryCall<ExecuteQueryRequest, ExecuteQueryResponse>;
    /**
     * @generated from protobuf rpc: ExecuteFetchAsDba(tabletmanagerdata.ExecuteFetchAsDbaRequest) returns (tabletmanagerdata.ExecuteFetchAsDbaResponse);
     */
    executeFetchAsDba(input: ExecuteFetchAsDbaRequest, options?: RpcOptions): UnaryCall<ExecuteFetchAsDbaRequest, ExecuteFetchAsDbaResponse>;
    /**
     * @generated from protobuf rpc: ExecuteMultiFetchAsDba(tabletmanagerdata.ExecuteMultiFetchAsDbaRequest) returns (tabletmanagerdata.ExecuteMultiFetchAsDbaResponse);
     */
    executeMultiFetchAsDba(input: ExecuteMultiFetchAsDbaRequest, options?: RpcOptions): UnaryCall<ExecuteMultiFetchAsDbaRequest, ExecuteMultiFetchAsDbaResponse>;
    /**
     * @generated from protobuf rpc: ExecuteFetchAsAllPrivs(tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) returns (tabletmanagerdata.ExecuteFetchAsAllPrivsResponse);
     */
    executeFetchAsAllPrivs(input: ExecuteFetchAsAllPrivsRequest, options?: RpcOptions): UnaryCall<ExecuteFetchAsAllPrivsRequest, ExecuteFetchAsAllPrivsResponse>;
    /**
     * @generated from protobuf rpc: ExecuteFetchAsApp(tabletmanagerdata.ExecuteFetchAsAppRequest) returns (tabletmanagerdata.ExecuteFetchAsAppResponse);
     */
    executeFetchAsApp(input: ExecuteFetchAsAppRequest, options?: RpcOptions): UnaryCall<ExecuteFetchAsAppRequest, ExecuteFetchAsAppResponse>;
    // 
    // Distributed Transaction related methods
    // 

    /**
     * @generated from protobuf rpc: GetUnresolvedTransactions(tabletmanagerdata.GetUnresolvedTransactionsRequest) returns (tabletmanagerdata.GetUnresolvedTransactionsResponse);
     */
    getUnresolvedTransactions(input: GetUnresolvedTransactionsRequest, options?: RpcOptions): UnaryCall<GetUnresolvedTransactionsRequest, GetUnresolvedTransactionsResponse>;
    /**
     * @generated from protobuf rpc: ReadTransaction(tabletmanagerdata.ReadTransactionRequest) returns (tabletmanagerdata.ReadTransactionResponse);
     */
    readTransaction(input: ReadTransactionRequest, options?: RpcOptions): UnaryCall<ReadTransactionRequest, ReadTransactionResponse>;
    /**
     * @generated from protobuf rpc: ConcludeTransaction(tabletmanagerdata.ConcludeTransactionRequest) returns (tabletmanagerdata.ConcludeTransactionResponse);
     */
    concludeTransaction(input: ConcludeTransactionRequest, options?: RpcOptions): UnaryCall<ConcludeTransactionRequest, ConcludeTransactionResponse>;
    /**
     * @generated from protobuf rpc: MysqlHostMetrics(tabletmanagerdata.MysqlHostMetricsRequest) returns (tabletmanagerdata.MysqlHostMetricsResponse);
     */
    mysqlHostMetrics(input: MysqlHostMetricsRequest, options?: RpcOptions): UnaryCall<MysqlHostMetricsRequest, MysqlHostMetricsResponse>;
    // 
    // Replication related methods
    // 

    /**
     * ReplicationStatus returns the current replication status.
     *
     * @generated from protobuf rpc: ReplicationStatus(tabletmanagerdata.ReplicationStatusRequest) returns (tabletmanagerdata.ReplicationStatusResponse);
     */
    replicationStatus(input: ReplicationStatusRequest, options?: RpcOptions): UnaryCall<ReplicationStatusRequest, ReplicationStatusResponse>;
    /**
     * PrimaryStatus returns the current primary status.
     *
     * @generated from protobuf rpc: PrimaryStatus(tabletmanagerdata.PrimaryStatusRequest) returns (tabletmanagerdata.PrimaryStatusResponse);
     */
    primaryStatus(input: PrimaryStatusRequest, options?: RpcOptions): UnaryCall<PrimaryStatusRequest, PrimaryStatusResponse>;
    /**
     * PrimaryPosition returns the current primary position
     *
     * @generated from protobuf rpc: PrimaryPosition(tabletmanagerdata.PrimaryPositionRequest) returns (tabletmanagerdata.PrimaryPositionResponse);
     */
    primaryPosition(input: PrimaryPositionRequest, options?: RpcOptions): UnaryCall<PrimaryPositionRequest, PrimaryPositionResponse>;
    /**
     * WaitForPosition waits for the position to be reached
     *
     * @generated from protobuf rpc: WaitForPosition(tabletmanagerdata.WaitForPositionRequest) returns (tabletmanagerdata.WaitForPositionResponse);
     */
    waitForPosition(input: WaitForPositionRequest, options?: RpcOptions): UnaryCall<WaitForPositionRequest, WaitForPositionResponse>;
    /**
     * StopReplication makes mysql stop its replication
     *
     * @generated from protobuf rpc: StopReplication(tabletmanagerdata.StopReplicationRequest) returns (tabletmanagerdata.StopReplicationResponse);
     */
    stopReplication(input: StopReplicationRequest, options?: RpcOptions): UnaryCall<StopReplicationRequest, StopReplicationResponse>;
    /**
     * StopReplicationMinimum stops the mysql replication after it reaches
     * the provided minimum point
     *
     * @generated from protobuf rpc: StopReplicationMinimum(tabletmanagerdata.StopReplicationMinimumRequest) returns (tabletmanagerdata.StopReplicationMinimumResponse);
     */
    stopReplicationMinimum(input: StopReplicationMinimumRequest, options?: RpcOptions): UnaryCall<StopReplicationMinimumRequest, StopReplicationMinimumResponse>;
    /**
     * StartReplication starts the mysql replication
     *
     * @generated from protobuf rpc: StartReplication(tabletmanagerdata.StartReplicationRequest) returns (tabletmanagerdata.StartReplicationResponse);
     */
    startReplication(input: StartReplicationRequest, options?: RpcOptions): UnaryCall<StartReplicationRequest, StartReplicationResponse>;
    /**
     * StartReplicationUnitAfter starts the mysql replication until and including
     * the provided position
     *
     * @generated from protobuf rpc: StartReplicationUntilAfter(tabletmanagerdata.StartReplicationUntilAfterRequest) returns (tabletmanagerdata.StartReplicationUntilAfterResponse);
     */
    startReplicationUntilAfter(input: StartReplicationUntilAfterRequest, options?: RpcOptions): UnaryCall<StartReplicationUntilAfterRequest, StartReplicationUntilAfterResponse>;
    /**
     * GetReplicas asks for the list of mysql replicas
     *
     * @generated from protobuf rpc: GetReplicas(tabletmanagerdata.GetReplicasRequest) returns (tabletmanagerdata.GetReplicasResponse);
     */
    getReplicas(input: GetReplicasRequest, options?: RpcOptions): UnaryCall<GetReplicasRequest, GetReplicasResponse>;
    /**
     * VReplication API
     *
     * @generated from protobuf rpc: CreateVReplicationWorkflow(tabletmanagerdata.CreateVReplicationWorkflowRequest) returns (tabletmanagerdata.CreateVReplicationWorkflowResponse);
     */
    createVReplicationWorkflow(input: CreateVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<CreateVReplicationWorkflowRequest, CreateVReplicationWorkflowResponse>;
    /**
     * @generated from protobuf rpc: DeleteVReplicationWorkflow(tabletmanagerdata.DeleteVReplicationWorkflowRequest) returns (tabletmanagerdata.DeleteVReplicationWorkflowResponse);
     */
    deleteVReplicationWorkflow(input: DeleteVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<DeleteVReplicationWorkflowRequest, DeleteVReplicationWorkflowResponse>;
    /**
     * @generated from protobuf rpc: HasVReplicationWorkflows(tabletmanagerdata.HasVReplicationWorkflowsRequest) returns (tabletmanagerdata.HasVReplicationWorkflowsResponse);
     */
    hasVReplicationWorkflows(input: HasVReplicationWorkflowsRequest, options?: RpcOptions): UnaryCall<HasVReplicationWorkflowsRequest, HasVReplicationWorkflowsResponse>;
    /**
     * @generated from protobuf rpc: ReadVReplicationWorkflow(tabletmanagerdata.ReadVReplicationWorkflowRequest) returns (tabletmanagerdata.ReadVReplicationWorkflowResponse);
     */
    readVReplicationWorkflow(input: ReadVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<ReadVReplicationWorkflowRequest, ReadVReplicationWorkflowResponse>;
    /**
     * @generated from protobuf rpc: ReadVReplicationWorkflows(tabletmanagerdata.ReadVReplicationWorkflowsRequest) returns (tabletmanagerdata.ReadVReplicationWorkflowsResponse);
     */
    readVReplicationWorkflows(input: ReadVReplicationWorkflowsRequest, options?: RpcOptions): UnaryCall<ReadVReplicationWorkflowsRequest, ReadVReplicationWorkflowsResponse>;
    /**
     * @generated from protobuf rpc: UpdateVReplicationWorkflow(tabletmanagerdata.UpdateVReplicationWorkflowRequest) returns (tabletmanagerdata.UpdateVReplicationWorkflowResponse);
     */
    updateVReplicationWorkflow(input: UpdateVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<UpdateVReplicationWorkflowRequest, UpdateVReplicationWorkflowResponse>;
    /**
     * @generated from protobuf rpc: UpdateVReplicationWorkflows(tabletmanagerdata.UpdateVReplicationWorkflowsRequest) returns (tabletmanagerdata.UpdateVReplicationWorkflowsResponse);
     */
    updateVReplicationWorkflows(input: UpdateVReplicationWorkflowsRequest, options?: RpcOptions): UnaryCall<UpdateVReplicationWorkflowsRequest, UpdateVReplicationWorkflowsResponse>;
    /**
     * @generated from protobuf rpc: ValidateVReplicationPermissions(tabletmanagerdata.ValidateVReplicationPermissionsRequest) returns (tabletmanagerdata.ValidateVReplicationPermissionsResponse);
     */
    validateVReplicationPermissions(input: ValidateVReplicationPermissionsRequest, options?: RpcOptions): UnaryCall<ValidateVReplicationPermissionsRequest, ValidateVReplicationPermissionsResponse>;
    /**
     * @generated from protobuf rpc: VReplicationExec(tabletmanagerdata.VReplicationExecRequest) returns (tabletmanagerdata.VReplicationExecResponse);
     */
    vReplicationExec(input: VReplicationExecRequest, options?: RpcOptions): UnaryCall<VReplicationExecRequest, VReplicationExecResponse>;
    /**
     * @generated from protobuf rpc: VReplicationWaitForPos(tabletmanagerdata.VReplicationWaitForPosRequest) returns (tabletmanagerdata.VReplicationWaitForPosResponse);
     */
    vReplicationWaitForPos(input: VReplicationWaitForPosRequest, options?: RpcOptions): UnaryCall<VReplicationWaitForPosRequest, VReplicationWaitForPosResponse>;
    /**
     * VDiff API
     *
     * @generated from protobuf rpc: VDiff(tabletmanagerdata.VDiffRequest) returns (tabletmanagerdata.VDiffResponse);
     */
    vDiff(input: VDiffRequest, options?: RpcOptions): UnaryCall<VDiffRequest, VDiffResponse>;
    // 
    // Reparenting related functions
    // 

    /**
     * ResetReplication makes the target not replicating
     *
     * @generated from protobuf rpc: ResetReplication(tabletmanagerdata.ResetReplicationRequest) returns (tabletmanagerdata.ResetReplicationResponse);
     */
    resetReplication(input: ResetReplicationRequest, options?: RpcOptions): UnaryCall<ResetReplicationRequest, ResetReplicationResponse>;
    /**
     * InitPrimary initializes the tablet as a primary
     *
     * @generated from protobuf rpc: InitPrimary(tabletmanagerdata.InitPrimaryRequest) returns (tabletmanagerdata.InitPrimaryResponse);
     */
    initPrimary(input: InitPrimaryRequest, options?: RpcOptions): UnaryCall<InitPrimaryRequest, InitPrimaryResponse>;
    /**
     * PopulateReparentJournal tells the tablet to add an entry to its
     * reparent journal
     *
     * @generated from protobuf rpc: PopulateReparentJournal(tabletmanagerdata.PopulateReparentJournalRequest) returns (tabletmanagerdata.PopulateReparentJournalResponse);
     */
    populateReparentJournal(input: PopulateReparentJournalRequest, options?: RpcOptions): UnaryCall<PopulateReparentJournalRequest, PopulateReparentJournalResponse>;
    /**
     * ReadReparentJournalInfo reads the information from reparent journal
     *
     * @generated from protobuf rpc: ReadReparentJournalInfo(tabletmanagerdata.ReadReparentJournalInfoRequest) returns (tabletmanagerdata.ReadReparentJournalInfoResponse);
     */
    readReparentJournalInfo(input: ReadReparentJournalInfoRequest, options?: RpcOptions): UnaryCall<ReadReparentJournalInfoRequest, ReadReparentJournalInfoResponse>;
    /**
     * InitReplica tells the tablet to reparent to the primary unconditionally
     *
     * @generated from protobuf rpc: InitReplica(tabletmanagerdata.InitReplicaRequest) returns (tabletmanagerdata.InitReplicaResponse);
     */
    initReplica(input: InitReplicaRequest, options?: RpcOptions): UnaryCall<InitReplicaRequest, InitReplicaResponse>;
    /**
     * DemotePrimary tells the soon-to-be-former primary it's gonna change
     *
     * @generated from protobuf rpc: DemotePrimary(tabletmanagerdata.DemotePrimaryRequest) returns (tabletmanagerdata.DemotePrimaryResponse);
     */
    demotePrimary(input: DemotePrimaryRequest, options?: RpcOptions): UnaryCall<DemotePrimaryRequest, DemotePrimaryResponse>;
    /**
     * UndoDemotePrimary reverts all changes made by DemotePrimary
     *
     * @generated from protobuf rpc: UndoDemotePrimary(tabletmanagerdata.UndoDemotePrimaryRequest) returns (tabletmanagerdata.UndoDemotePrimaryResponse);
     */
    undoDemotePrimary(input: UndoDemotePrimaryRequest, options?: RpcOptions): UnaryCall<UndoDemotePrimaryRequest, UndoDemotePrimaryResponse>;
    /**
     * ReplicaWasPromoted tells the remote tablet it is now the primary
     *
     * @generated from protobuf rpc: ReplicaWasPromoted(tabletmanagerdata.ReplicaWasPromotedRequest) returns (tabletmanagerdata.ReplicaWasPromotedResponse);
     */
    replicaWasPromoted(input: ReplicaWasPromotedRequest, options?: RpcOptions): UnaryCall<ReplicaWasPromotedRequest, ReplicaWasPromotedResponse>;
    /**
     * ResetReplicationParameters resets the replica replication parameters
     *
     * @generated from protobuf rpc: ResetReplicationParameters(tabletmanagerdata.ResetReplicationParametersRequest) returns (tabletmanagerdata.ResetReplicationParametersResponse);
     */
    resetReplicationParameters(input: ResetReplicationParametersRequest, options?: RpcOptions): UnaryCall<ResetReplicationParametersRequest, ResetReplicationParametersResponse>;
    /**
     * FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
     *
     * @generated from protobuf rpc: FullStatus(tabletmanagerdata.FullStatusRequest) returns (tabletmanagerdata.FullStatusResponse);
     */
    fullStatus(input: FullStatusRequest, options?: RpcOptions): UnaryCall<FullStatusRequest, FullStatusResponse>;
    /**
     * SetReplicationSource tells the replica to reparent
     *
     * @generated from protobuf rpc: SetReplicationSource(tabletmanagerdata.SetReplicationSourceRequest) returns (tabletmanagerdata.SetReplicationSourceResponse);
     */
    setReplicationSource(input: SetReplicationSourceRequest, options?: RpcOptions): UnaryCall<SetReplicationSourceRequest, SetReplicationSourceResponse>;
    /**
     * ReplicaWasRestarted tells the remote tablet its primary has changed
     *
     * @generated from protobuf rpc: ReplicaWasRestarted(tabletmanagerdata.ReplicaWasRestartedRequest) returns (tabletmanagerdata.ReplicaWasRestartedResponse);
     */
    replicaWasRestarted(input: ReplicaWasRestartedRequest, options?: RpcOptions): UnaryCall<ReplicaWasRestartedRequest, ReplicaWasRestartedResponse>;
    /**
     * StopReplicationAndGetStatus stops MySQL replication, and returns the
     * replication status
     *
     * @generated from protobuf rpc: StopReplicationAndGetStatus(tabletmanagerdata.StopReplicationAndGetStatusRequest) returns (tabletmanagerdata.StopReplicationAndGetStatusResponse);
     */
    stopReplicationAndGetStatus(input: StopReplicationAndGetStatusRequest, options?: RpcOptions): UnaryCall<StopReplicationAndGetStatusRequest, StopReplicationAndGetStatusResponse>;
    /**
     * PromoteReplica makes the replica the new primary
     *
     * @generated from protobuf rpc: PromoteReplica(tabletmanagerdata.PromoteReplicaRequest) returns (tabletmanagerdata.PromoteReplicaResponse);
     */
    promoteReplica(input: PromoteReplicaRequest, options?: RpcOptions): UnaryCall<PromoteReplicaRequest, PromoteReplicaResponse>;
    // 
    // Backup related methods
    // 

    /**
     * @generated from protobuf rpc: Backup(tabletmanagerdata.BackupRequest) returns (stream tabletmanagerdata.BackupResponse);
     */
    backup(input: BackupRequest, options?: RpcOptions): ServerStreamingCall<BackupRequest, BackupResponse>;
    /**
     * RestoreFromBackup deletes all local data and restores it from the latest backup.
     *
     * @generated from protobuf rpc: RestoreFromBackup(tabletmanagerdata.RestoreFromBackupRequest) returns (stream tabletmanagerdata.RestoreFromBackupResponse);
     */
    restoreFromBackup(input: RestoreFromBackupRequest, options?: RpcOptions): ServerStreamingCall<RestoreFromBackupRequest, RestoreFromBackupResponse>;
    // 
    // Tablet throttler related methods
    // 

    /**
     * CheckThrottler issues a 'check' on a tablet's throttler
     *
     * @generated from protobuf rpc: CheckThrottler(tabletmanagerdata.CheckThrottlerRequest) returns (tabletmanagerdata.CheckThrottlerResponse);
     */
    checkThrottler(input: CheckThrottlerRequest, options?: RpcOptions): UnaryCall<CheckThrottlerRequest, CheckThrottlerResponse>;
    /**
     * GetThrottlerStatus gets the status of a tablet throttler
     *
     * @generated from protobuf rpc: GetThrottlerStatus(tabletmanagerdata.GetThrottlerStatusRequest) returns (tabletmanagerdata.GetThrottlerStatusResponse);
     */
    getThrottlerStatus(input: GetThrottlerStatusRequest, options?: RpcOptions): UnaryCall<GetThrottlerStatusRequest, GetThrottlerStatusResponse>;
}
/**
 * TabletManager is a service definition for tabletmanagerdata.TabletManager.
 *
 *
 * Various read-only methods
 *
 *
 * @generated from protobuf service tabletmanagerservice.TabletManager
 */
export class TabletManagerClient implements ITabletManagerClient, ServiceInfo {
    typeName = TabletManager.typeName;
    methods = TabletManager.methods;
    options = TabletManager.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Ping returns the input payload
     *
     * @generated from protobuf rpc: Ping(tabletmanagerdata.PingRequest) returns (tabletmanagerdata.PingResponse);
     */
    ping(input: PingRequest, options?: RpcOptions): UnaryCall<PingRequest, PingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PingRequest, PingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Sleep sleeps for the provided duration
     *
     * @generated from protobuf rpc: Sleep(tabletmanagerdata.SleepRequest) returns (tabletmanagerdata.SleepResponse);
     */
    sleep(input: SleepRequest, options?: RpcOptions): UnaryCall<SleepRequest, SleepResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SleepRequest, SleepResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ExecuteHook executes the hook remotely
     *
     * @generated from protobuf rpc: ExecuteHook(tabletmanagerdata.ExecuteHookRequest) returns (tabletmanagerdata.ExecuteHookResponse);
     */
    executeHook(input: ExecuteHookRequest, options?: RpcOptions): UnaryCall<ExecuteHookRequest, ExecuteHookResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteHookRequest, ExecuteHookResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetSchema asks the tablet for its schema
     *
     * @generated from protobuf rpc: GetSchema(tabletmanagerdata.GetSchemaRequest) returns (tabletmanagerdata.GetSchemaResponse);
     */
    getSchema(input: GetSchemaRequest, options?: RpcOptions): UnaryCall<GetSchemaRequest, GetSchemaResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSchemaRequest, GetSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetPermissions asks the tablet for its permissions
     *
     * @generated from protobuf rpc: GetPermissions(tabletmanagerdata.GetPermissionsRequest) returns (tabletmanagerdata.GetPermissionsResponse);
     */
    getPermissions(input: GetPermissionsRequest, options?: RpcOptions): UnaryCall<GetPermissionsRequest, GetPermissionsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPermissionsRequest, GetPermissionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetGlobalStatusVars returns the server's global status variables asked for.
     * An empty/nil variable name parameter slice means you want all of them.
     *
     * @generated from protobuf rpc: GetGlobalStatusVars(tabletmanagerdata.GetGlobalStatusVarsRequest) returns (tabletmanagerdata.GetGlobalStatusVarsResponse);
     */
    getGlobalStatusVars(input: GetGlobalStatusVarsRequest, options?: RpcOptions): UnaryCall<GetGlobalStatusVarsRequest, GetGlobalStatusVarsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGlobalStatusVarsRequest, GetGlobalStatusVarsResponse>("unary", this._transport, method, opt, input);
    }
    // 
    // Various read-write methods
    // 

    /**
     * @generated from protobuf rpc: SetReadOnly(tabletmanagerdata.SetReadOnlyRequest) returns (tabletmanagerdata.SetReadOnlyResponse);
     */
    setReadOnly(input: SetReadOnlyRequest, options?: RpcOptions): UnaryCall<SetReadOnlyRequest, SetReadOnlyResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetReadOnlyRequest, SetReadOnlyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetReadWrite(tabletmanagerdata.SetReadWriteRequest) returns (tabletmanagerdata.SetReadWriteResponse);
     */
    setReadWrite(input: SetReadWriteRequest, options?: RpcOptions): UnaryCall<SetReadWriteRequest, SetReadWriteResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetReadWriteRequest, SetReadWriteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChangeTags asks the remote tablet to change its tags
     *
     * @generated from protobuf rpc: ChangeTags(tabletmanagerdata.ChangeTagsRequest) returns (tabletmanagerdata.ChangeTagsResponse);
     */
    changeTags(input: ChangeTagsRequest, options?: RpcOptions): UnaryCall<ChangeTagsRequest, ChangeTagsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangeTagsRequest, ChangeTagsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ChangeType asks the remote tablet to change its type
     *
     * @generated from protobuf rpc: ChangeType(tabletmanagerdata.ChangeTypeRequest) returns (tabletmanagerdata.ChangeTypeResponse);
     */
    changeType(input: ChangeTypeRequest, options?: RpcOptions): UnaryCall<ChangeTypeRequest, ChangeTypeResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangeTypeRequest, ChangeTypeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RefreshState(tabletmanagerdata.RefreshStateRequest) returns (tabletmanagerdata.RefreshStateResponse);
     */
    refreshState(input: RefreshStateRequest, options?: RpcOptions): UnaryCall<RefreshStateRequest, RefreshStateResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshStateRequest, RefreshStateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RunHealthCheck(tabletmanagerdata.RunHealthCheckRequest) returns (tabletmanagerdata.RunHealthCheckResponse);
     */
    runHealthCheck(input: RunHealthCheckRequest, options?: RpcOptions): UnaryCall<RunHealthCheckRequest, RunHealthCheckResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunHealthCheckRequest, RunHealthCheckResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReloadSchema(tabletmanagerdata.ReloadSchemaRequest) returns (tabletmanagerdata.ReloadSchemaResponse);
     */
    reloadSchema(input: ReloadSchemaRequest, options?: RpcOptions): UnaryCall<ReloadSchemaRequest, ReloadSchemaResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReloadSchemaRequest, ReloadSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PreflightSchema(tabletmanagerdata.PreflightSchemaRequest) returns (tabletmanagerdata.PreflightSchemaResponse);
     */
    preflightSchema(input: PreflightSchemaRequest, options?: RpcOptions): UnaryCall<PreflightSchemaRequest, PreflightSchemaResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<PreflightSchemaRequest, PreflightSchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ApplySchema(tabletmanagerdata.ApplySchemaRequest) returns (tabletmanagerdata.ApplySchemaResponse);
     */
    applySchema(input: ApplySchemaRequest, options?: RpcOptions): UnaryCall<ApplySchemaRequest, ApplySchemaResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<ApplySchemaRequest, ApplySchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ResetSequences(tabletmanagerdata.ResetSequencesRequest) returns (tabletmanagerdata.ResetSequencesResponse);
     */
    resetSequences(input: ResetSequencesRequest, options?: RpcOptions): UnaryCall<ResetSequencesRequest, ResetSequencesResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetSequencesRequest, ResetSequencesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LockTables(tabletmanagerdata.LockTablesRequest) returns (tabletmanagerdata.LockTablesResponse);
     */
    lockTables(input: LockTablesRequest, options?: RpcOptions): UnaryCall<LockTablesRequest, LockTablesResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<LockTablesRequest, LockTablesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnlockTables(tabletmanagerdata.UnlockTablesRequest) returns (tabletmanagerdata.UnlockTablesResponse);
     */
    unlockTables(input: UnlockTablesRequest, options?: RpcOptions): UnaryCall<UnlockTablesRequest, UnlockTablesResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnlockTablesRequest, UnlockTablesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExecuteQuery(tabletmanagerdata.ExecuteQueryRequest) returns (tabletmanagerdata.ExecuteQueryResponse);
     */
    executeQuery(input: ExecuteQueryRequest, options?: RpcOptions): UnaryCall<ExecuteQueryRequest, ExecuteQueryResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteQueryRequest, ExecuteQueryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExecuteFetchAsDba(tabletmanagerdata.ExecuteFetchAsDbaRequest) returns (tabletmanagerdata.ExecuteFetchAsDbaResponse);
     */
    executeFetchAsDba(input: ExecuteFetchAsDbaRequest, options?: RpcOptions): UnaryCall<ExecuteFetchAsDbaRequest, ExecuteFetchAsDbaResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteFetchAsDbaRequest, ExecuteFetchAsDbaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExecuteMultiFetchAsDba(tabletmanagerdata.ExecuteMultiFetchAsDbaRequest) returns (tabletmanagerdata.ExecuteMultiFetchAsDbaResponse);
     */
    executeMultiFetchAsDba(input: ExecuteMultiFetchAsDbaRequest, options?: RpcOptions): UnaryCall<ExecuteMultiFetchAsDbaRequest, ExecuteMultiFetchAsDbaResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteMultiFetchAsDbaRequest, ExecuteMultiFetchAsDbaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExecuteFetchAsAllPrivs(tabletmanagerdata.ExecuteFetchAsAllPrivsRequest) returns (tabletmanagerdata.ExecuteFetchAsAllPrivsResponse);
     */
    executeFetchAsAllPrivs(input: ExecuteFetchAsAllPrivsRequest, options?: RpcOptions): UnaryCall<ExecuteFetchAsAllPrivsRequest, ExecuteFetchAsAllPrivsResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteFetchAsAllPrivsRequest, ExecuteFetchAsAllPrivsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExecuteFetchAsApp(tabletmanagerdata.ExecuteFetchAsAppRequest) returns (tabletmanagerdata.ExecuteFetchAsAppResponse);
     */
    executeFetchAsApp(input: ExecuteFetchAsAppRequest, options?: RpcOptions): UnaryCall<ExecuteFetchAsAppRequest, ExecuteFetchAsAppResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<ExecuteFetchAsAppRequest, ExecuteFetchAsAppResponse>("unary", this._transport, method, opt, input);
    }
    // 
    // Distributed Transaction related methods
    // 

    /**
     * @generated from protobuf rpc: GetUnresolvedTransactions(tabletmanagerdata.GetUnresolvedTransactionsRequest) returns (tabletmanagerdata.GetUnresolvedTransactionsResponse);
     */
    getUnresolvedTransactions(input: GetUnresolvedTransactionsRequest, options?: RpcOptions): UnaryCall<GetUnresolvedTransactionsRequest, GetUnresolvedTransactionsResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUnresolvedTransactionsRequest, GetUnresolvedTransactionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadTransaction(tabletmanagerdata.ReadTransactionRequest) returns (tabletmanagerdata.ReadTransactionResponse);
     */
    readTransaction(input: ReadTransactionRequest, options?: RpcOptions): UnaryCall<ReadTransactionRequest, ReadTransactionResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadTransactionRequest, ReadTransactionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConcludeTransaction(tabletmanagerdata.ConcludeTransactionRequest) returns (tabletmanagerdata.ConcludeTransactionResponse);
     */
    concludeTransaction(input: ConcludeTransactionRequest, options?: RpcOptions): UnaryCall<ConcludeTransactionRequest, ConcludeTransactionResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConcludeTransactionRequest, ConcludeTransactionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MysqlHostMetrics(tabletmanagerdata.MysqlHostMetricsRequest) returns (tabletmanagerdata.MysqlHostMetricsResponse);
     */
    mysqlHostMetrics(input: MysqlHostMetricsRequest, options?: RpcOptions): UnaryCall<MysqlHostMetricsRequest, MysqlHostMetricsResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<MysqlHostMetricsRequest, MysqlHostMetricsResponse>("unary", this._transport, method, opt, input);
    }
    // 
    // Replication related methods
    // 

    /**
     * ReplicationStatus returns the current replication status.
     *
     * @generated from protobuf rpc: ReplicationStatus(tabletmanagerdata.ReplicationStatusRequest) returns (tabletmanagerdata.ReplicationStatusResponse);
     */
    replicationStatus(input: ReplicationStatusRequest, options?: RpcOptions): UnaryCall<ReplicationStatusRequest, ReplicationStatusResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReplicationStatusRequest, ReplicationStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PrimaryStatus returns the current primary status.
     *
     * @generated from protobuf rpc: PrimaryStatus(tabletmanagerdata.PrimaryStatusRequest) returns (tabletmanagerdata.PrimaryStatusResponse);
     */
    primaryStatus(input: PrimaryStatusRequest, options?: RpcOptions): UnaryCall<PrimaryStatusRequest, PrimaryStatusResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<PrimaryStatusRequest, PrimaryStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PrimaryPosition returns the current primary position
     *
     * @generated from protobuf rpc: PrimaryPosition(tabletmanagerdata.PrimaryPositionRequest) returns (tabletmanagerdata.PrimaryPositionResponse);
     */
    primaryPosition(input: PrimaryPositionRequest, options?: RpcOptions): UnaryCall<PrimaryPositionRequest, PrimaryPositionResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<PrimaryPositionRequest, PrimaryPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * WaitForPosition waits for the position to be reached
     *
     * @generated from protobuf rpc: WaitForPosition(tabletmanagerdata.WaitForPositionRequest) returns (tabletmanagerdata.WaitForPositionResponse);
     */
    waitForPosition(input: WaitForPositionRequest, options?: RpcOptions): UnaryCall<WaitForPositionRequest, WaitForPositionResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<WaitForPositionRequest, WaitForPositionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StopReplication makes mysql stop its replication
     *
     * @generated from protobuf rpc: StopReplication(tabletmanagerdata.StopReplicationRequest) returns (tabletmanagerdata.StopReplicationResponse);
     */
    stopReplication(input: StopReplicationRequest, options?: RpcOptions): UnaryCall<StopReplicationRequest, StopReplicationResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopReplicationRequest, StopReplicationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StopReplicationMinimum stops the mysql replication after it reaches
     * the provided minimum point
     *
     * @generated from protobuf rpc: StopReplicationMinimum(tabletmanagerdata.StopReplicationMinimumRequest) returns (tabletmanagerdata.StopReplicationMinimumResponse);
     */
    stopReplicationMinimum(input: StopReplicationMinimumRequest, options?: RpcOptions): UnaryCall<StopReplicationMinimumRequest, StopReplicationMinimumResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopReplicationMinimumRequest, StopReplicationMinimumResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StartReplication starts the mysql replication
     *
     * @generated from protobuf rpc: StartReplication(tabletmanagerdata.StartReplicationRequest) returns (tabletmanagerdata.StartReplicationResponse);
     */
    startReplication(input: StartReplicationRequest, options?: RpcOptions): UnaryCall<StartReplicationRequest, StartReplicationResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartReplicationRequest, StartReplicationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StartReplicationUnitAfter starts the mysql replication until and including
     * the provided position
     *
     * @generated from protobuf rpc: StartReplicationUntilAfter(tabletmanagerdata.StartReplicationUntilAfterRequest) returns (tabletmanagerdata.StartReplicationUntilAfterResponse);
     */
    startReplicationUntilAfter(input: StartReplicationUntilAfterRequest, options?: RpcOptions): UnaryCall<StartReplicationUntilAfterRequest, StartReplicationUntilAfterResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartReplicationUntilAfterRequest, StartReplicationUntilAfterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetReplicas asks for the list of mysql replicas
     *
     * @generated from protobuf rpc: GetReplicas(tabletmanagerdata.GetReplicasRequest) returns (tabletmanagerdata.GetReplicasResponse);
     */
    getReplicas(input: GetReplicasRequest, options?: RpcOptions): UnaryCall<GetReplicasRequest, GetReplicasResponse> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetReplicasRequest, GetReplicasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * VReplication API
     *
     * @generated from protobuf rpc: CreateVReplicationWorkflow(tabletmanagerdata.CreateVReplicationWorkflowRequest) returns (tabletmanagerdata.CreateVReplicationWorkflowResponse);
     */
    createVReplicationWorkflow(input: CreateVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<CreateVReplicationWorkflowRequest, CreateVReplicationWorkflowResponse> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateVReplicationWorkflowRequest, CreateVReplicationWorkflowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteVReplicationWorkflow(tabletmanagerdata.DeleteVReplicationWorkflowRequest) returns (tabletmanagerdata.DeleteVReplicationWorkflowResponse);
     */
    deleteVReplicationWorkflow(input: DeleteVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<DeleteVReplicationWorkflowRequest, DeleteVReplicationWorkflowResponse> {
        const method = this.methods[37], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteVReplicationWorkflowRequest, DeleteVReplicationWorkflowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: HasVReplicationWorkflows(tabletmanagerdata.HasVReplicationWorkflowsRequest) returns (tabletmanagerdata.HasVReplicationWorkflowsResponse);
     */
    hasVReplicationWorkflows(input: HasVReplicationWorkflowsRequest, options?: RpcOptions): UnaryCall<HasVReplicationWorkflowsRequest, HasVReplicationWorkflowsResponse> {
        const method = this.methods[38], opt = this._transport.mergeOptions(options);
        return stackIntercept<HasVReplicationWorkflowsRequest, HasVReplicationWorkflowsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadVReplicationWorkflow(tabletmanagerdata.ReadVReplicationWorkflowRequest) returns (tabletmanagerdata.ReadVReplicationWorkflowResponse);
     */
    readVReplicationWorkflow(input: ReadVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<ReadVReplicationWorkflowRequest, ReadVReplicationWorkflowResponse> {
        const method = this.methods[39], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadVReplicationWorkflowRequest, ReadVReplicationWorkflowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadVReplicationWorkflows(tabletmanagerdata.ReadVReplicationWorkflowsRequest) returns (tabletmanagerdata.ReadVReplicationWorkflowsResponse);
     */
    readVReplicationWorkflows(input: ReadVReplicationWorkflowsRequest, options?: RpcOptions): UnaryCall<ReadVReplicationWorkflowsRequest, ReadVReplicationWorkflowsResponse> {
        const method = this.methods[40], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadVReplicationWorkflowsRequest, ReadVReplicationWorkflowsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateVReplicationWorkflow(tabletmanagerdata.UpdateVReplicationWorkflowRequest) returns (tabletmanagerdata.UpdateVReplicationWorkflowResponse);
     */
    updateVReplicationWorkflow(input: UpdateVReplicationWorkflowRequest, options?: RpcOptions): UnaryCall<UpdateVReplicationWorkflowRequest, UpdateVReplicationWorkflowResponse> {
        const method = this.methods[41], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateVReplicationWorkflowRequest, UpdateVReplicationWorkflowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateVReplicationWorkflows(tabletmanagerdata.UpdateVReplicationWorkflowsRequest) returns (tabletmanagerdata.UpdateVReplicationWorkflowsResponse);
     */
    updateVReplicationWorkflows(input: UpdateVReplicationWorkflowsRequest, options?: RpcOptions): UnaryCall<UpdateVReplicationWorkflowsRequest, UpdateVReplicationWorkflowsResponse> {
        const method = this.methods[42], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateVReplicationWorkflowsRequest, UpdateVReplicationWorkflowsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ValidateVReplicationPermissions(tabletmanagerdata.ValidateVReplicationPermissionsRequest) returns (tabletmanagerdata.ValidateVReplicationPermissionsResponse);
     */
    validateVReplicationPermissions(input: ValidateVReplicationPermissionsRequest, options?: RpcOptions): UnaryCall<ValidateVReplicationPermissionsRequest, ValidateVReplicationPermissionsResponse> {
        const method = this.methods[43], opt = this._transport.mergeOptions(options);
        return stackIntercept<ValidateVReplicationPermissionsRequest, ValidateVReplicationPermissionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VReplicationExec(tabletmanagerdata.VReplicationExecRequest) returns (tabletmanagerdata.VReplicationExecResponse);
     */
    vReplicationExec(input: VReplicationExecRequest, options?: RpcOptions): UnaryCall<VReplicationExecRequest, VReplicationExecResponse> {
        const method = this.methods[44], opt = this._transport.mergeOptions(options);
        return stackIntercept<VReplicationExecRequest, VReplicationExecResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VReplicationWaitForPos(tabletmanagerdata.VReplicationWaitForPosRequest) returns (tabletmanagerdata.VReplicationWaitForPosResponse);
     */
    vReplicationWaitForPos(input: VReplicationWaitForPosRequest, options?: RpcOptions): UnaryCall<VReplicationWaitForPosRequest, VReplicationWaitForPosResponse> {
        const method = this.methods[45], opt = this._transport.mergeOptions(options);
        return stackIntercept<VReplicationWaitForPosRequest, VReplicationWaitForPosResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * VDiff API
     *
     * @generated from protobuf rpc: VDiff(tabletmanagerdata.VDiffRequest) returns (tabletmanagerdata.VDiffResponse);
     */
    vDiff(input: VDiffRequest, options?: RpcOptions): UnaryCall<VDiffRequest, VDiffResponse> {
        const method = this.methods[46], opt = this._transport.mergeOptions(options);
        return stackIntercept<VDiffRequest, VDiffResponse>("unary", this._transport, method, opt, input);
    }
    // 
    // Reparenting related functions
    // 

    /**
     * ResetReplication makes the target not replicating
     *
     * @generated from protobuf rpc: ResetReplication(tabletmanagerdata.ResetReplicationRequest) returns (tabletmanagerdata.ResetReplicationResponse);
     */
    resetReplication(input: ResetReplicationRequest, options?: RpcOptions): UnaryCall<ResetReplicationRequest, ResetReplicationResponse> {
        const method = this.methods[47], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetReplicationRequest, ResetReplicationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * InitPrimary initializes the tablet as a primary
     *
     * @generated from protobuf rpc: InitPrimary(tabletmanagerdata.InitPrimaryRequest) returns (tabletmanagerdata.InitPrimaryResponse);
     */
    initPrimary(input: InitPrimaryRequest, options?: RpcOptions): UnaryCall<InitPrimaryRequest, InitPrimaryResponse> {
        const method = this.methods[48], opt = this._transport.mergeOptions(options);
        return stackIntercept<InitPrimaryRequest, InitPrimaryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PopulateReparentJournal tells the tablet to add an entry to its
     * reparent journal
     *
     * @generated from protobuf rpc: PopulateReparentJournal(tabletmanagerdata.PopulateReparentJournalRequest) returns (tabletmanagerdata.PopulateReparentJournalResponse);
     */
    populateReparentJournal(input: PopulateReparentJournalRequest, options?: RpcOptions): UnaryCall<PopulateReparentJournalRequest, PopulateReparentJournalResponse> {
        const method = this.methods[49], opt = this._transport.mergeOptions(options);
        return stackIntercept<PopulateReparentJournalRequest, PopulateReparentJournalResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ReadReparentJournalInfo reads the information from reparent journal
     *
     * @generated from protobuf rpc: ReadReparentJournalInfo(tabletmanagerdata.ReadReparentJournalInfoRequest) returns (tabletmanagerdata.ReadReparentJournalInfoResponse);
     */
    readReparentJournalInfo(input: ReadReparentJournalInfoRequest, options?: RpcOptions): UnaryCall<ReadReparentJournalInfoRequest, ReadReparentJournalInfoResponse> {
        const method = this.methods[50], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadReparentJournalInfoRequest, ReadReparentJournalInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * InitReplica tells the tablet to reparent to the primary unconditionally
     *
     * @generated from protobuf rpc: InitReplica(tabletmanagerdata.InitReplicaRequest) returns (tabletmanagerdata.InitReplicaResponse);
     */
    initReplica(input: InitReplicaRequest, options?: RpcOptions): UnaryCall<InitReplicaRequest, InitReplicaResponse> {
        const method = this.methods[51], opt = this._transport.mergeOptions(options);
        return stackIntercept<InitReplicaRequest, InitReplicaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * DemotePrimary tells the soon-to-be-former primary it's gonna change
     *
     * @generated from protobuf rpc: DemotePrimary(tabletmanagerdata.DemotePrimaryRequest) returns (tabletmanagerdata.DemotePrimaryResponse);
     */
    demotePrimary(input: DemotePrimaryRequest, options?: RpcOptions): UnaryCall<DemotePrimaryRequest, DemotePrimaryResponse> {
        const method = this.methods[52], opt = this._transport.mergeOptions(options);
        return stackIntercept<DemotePrimaryRequest, DemotePrimaryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UndoDemotePrimary reverts all changes made by DemotePrimary
     *
     * @generated from protobuf rpc: UndoDemotePrimary(tabletmanagerdata.UndoDemotePrimaryRequest) returns (tabletmanagerdata.UndoDemotePrimaryResponse);
     */
    undoDemotePrimary(input: UndoDemotePrimaryRequest, options?: RpcOptions): UnaryCall<UndoDemotePrimaryRequest, UndoDemotePrimaryResponse> {
        const method = this.methods[53], opt = this._transport.mergeOptions(options);
        return stackIntercept<UndoDemotePrimaryRequest, UndoDemotePrimaryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ReplicaWasPromoted tells the remote tablet it is now the primary
     *
     * @generated from protobuf rpc: ReplicaWasPromoted(tabletmanagerdata.ReplicaWasPromotedRequest) returns (tabletmanagerdata.ReplicaWasPromotedResponse);
     */
    replicaWasPromoted(input: ReplicaWasPromotedRequest, options?: RpcOptions): UnaryCall<ReplicaWasPromotedRequest, ReplicaWasPromotedResponse> {
        const method = this.methods[54], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReplicaWasPromotedRequest, ReplicaWasPromotedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ResetReplicationParameters resets the replica replication parameters
     *
     * @generated from protobuf rpc: ResetReplicationParameters(tabletmanagerdata.ResetReplicationParametersRequest) returns (tabletmanagerdata.ResetReplicationParametersResponse);
     */
    resetReplicationParameters(input: ResetReplicationParametersRequest, options?: RpcOptions): UnaryCall<ResetReplicationParametersRequest, ResetReplicationParametersResponse> {
        const method = this.methods[55], opt = this._transport.mergeOptions(options);
        return stackIntercept<ResetReplicationParametersRequest, ResetReplicationParametersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
     *
     * @generated from protobuf rpc: FullStatus(tabletmanagerdata.FullStatusRequest) returns (tabletmanagerdata.FullStatusResponse);
     */
    fullStatus(input: FullStatusRequest, options?: RpcOptions): UnaryCall<FullStatusRequest, FullStatusResponse> {
        const method = this.methods[56], opt = this._transport.mergeOptions(options);
        return stackIntercept<FullStatusRequest, FullStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetReplicationSource tells the replica to reparent
     *
     * @generated from protobuf rpc: SetReplicationSource(tabletmanagerdata.SetReplicationSourceRequest) returns (tabletmanagerdata.SetReplicationSourceResponse);
     */
    setReplicationSource(input: SetReplicationSourceRequest, options?: RpcOptions): UnaryCall<SetReplicationSourceRequest, SetReplicationSourceResponse> {
        const method = this.methods[57], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetReplicationSourceRequest, SetReplicationSourceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ReplicaWasRestarted tells the remote tablet its primary has changed
     *
     * @generated from protobuf rpc: ReplicaWasRestarted(tabletmanagerdata.ReplicaWasRestartedRequest) returns (tabletmanagerdata.ReplicaWasRestartedResponse);
     */
    replicaWasRestarted(input: ReplicaWasRestartedRequest, options?: RpcOptions): UnaryCall<ReplicaWasRestartedRequest, ReplicaWasRestartedResponse> {
        const method = this.methods[58], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReplicaWasRestartedRequest, ReplicaWasRestartedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * StopReplicationAndGetStatus stops MySQL replication, and returns the
     * replication status
     *
     * @generated from protobuf rpc: StopReplicationAndGetStatus(tabletmanagerdata.StopReplicationAndGetStatusRequest) returns (tabletmanagerdata.StopReplicationAndGetStatusResponse);
     */
    stopReplicationAndGetStatus(input: StopReplicationAndGetStatusRequest, options?: RpcOptions): UnaryCall<StopReplicationAndGetStatusRequest, StopReplicationAndGetStatusResponse> {
        const method = this.methods[59], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopReplicationAndGetStatusRequest, StopReplicationAndGetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * PromoteReplica makes the replica the new primary
     *
     * @generated from protobuf rpc: PromoteReplica(tabletmanagerdata.PromoteReplicaRequest) returns (tabletmanagerdata.PromoteReplicaResponse);
     */
    promoteReplica(input: PromoteReplicaRequest, options?: RpcOptions): UnaryCall<PromoteReplicaRequest, PromoteReplicaResponse> {
        const method = this.methods[60], opt = this._transport.mergeOptions(options);
        return stackIntercept<PromoteReplicaRequest, PromoteReplicaResponse>("unary", this._transport, method, opt, input);
    }
    // 
    // Backup related methods
    // 

    /**
     * @generated from protobuf rpc: Backup(tabletmanagerdata.BackupRequest) returns (stream tabletmanagerdata.BackupResponse);
     */
    backup(input: BackupRequest, options?: RpcOptions): ServerStreamingCall<BackupRequest, BackupResponse> {
        const method = this.methods[61], opt = this._transport.mergeOptions(options);
        return stackIntercept<BackupRequest, BackupResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * RestoreFromBackup deletes all local data and restores it from the latest backup.
     *
     * @generated from protobuf rpc: RestoreFromBackup(tabletmanagerdata.RestoreFromBackupRequest) returns (stream tabletmanagerdata.RestoreFromBackupResponse);
     */
    restoreFromBackup(input: RestoreFromBackupRequest, options?: RpcOptions): ServerStreamingCall<RestoreFromBackupRequest, RestoreFromBackupResponse> {
        const method = this.methods[62], opt = this._transport.mergeOptions(options);
        return stackIntercept<RestoreFromBackupRequest, RestoreFromBackupResponse>("serverStreaming", this._transport, method, opt, input);
    }
    // 
    // Tablet throttler related methods
    // 

    /**
     * CheckThrottler issues a 'check' on a tablet's throttler
     *
     * @generated from protobuf rpc: CheckThrottler(tabletmanagerdata.CheckThrottlerRequest) returns (tabletmanagerdata.CheckThrottlerResponse);
     */
    checkThrottler(input: CheckThrottlerRequest, options?: RpcOptions): UnaryCall<CheckThrottlerRequest, CheckThrottlerResponse> {
        const method = this.methods[63], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckThrottlerRequest, CheckThrottlerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetThrottlerStatus gets the status of a tablet throttler
     *
     * @generated from protobuf rpc: GetThrottlerStatus(tabletmanagerdata.GetThrottlerStatusRequest) returns (tabletmanagerdata.GetThrottlerStatusResponse);
     */
    getThrottlerStatus(input: GetThrottlerStatusRequest, options?: RpcOptions): UnaryCall<GetThrottlerStatusRequest, GetThrottlerStatusResponse> {
        const method = this.methods[64], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetThrottlerStatusRequest, GetThrottlerStatusResponse>("unary", this._transport, method, opt, input);
    }
}
