//
//Copyright 2020 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains the types used by VTAdmin (and later an RPC service).

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file vtadmin.proto (package vtadmin, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Event, EventJson } from "./logutil_pb";
import { file_logutil } from "./logutil_pb";
import type { BackupInfo, BackupInfoJson } from "./mysqlctl_pb";
import { file_mysqlctl } from "./mysqlctl_pb";
import type { TableDefinition, TableDefinitionJson } from "./tabletmanagerdata_pb";
import { file_tabletmanagerdata } from "./tabletmanagerdata_pb";
import type { CellInfo, CellInfoJson, CellsAlias, CellsAliasJson, Tablet as Tablet$1, TabletAlias, TabletAliasJson, TabletJson as TabletJson$1 } from "./topodata_pb";
import { file_topodata } from "./topodata_pb";
import type { Keyspace as Keyspace$2, KeyspaceJson as KeyspaceJson$2, SrvVSchema as SrvVSchema$1, SrvVSchemaJson as SrvVSchemaJson$1 } from "./vschema_pb";
import { file_vschema } from "./vschema_pb";
import type { ApplySchemaRequest as ApplySchemaRequest$1, ApplySchemaRequestJson as ApplySchemaRequestJson$1, ApplySchemaResponseSchema, CancelSchemaMigrationRequest as CancelSchemaMigrationRequest$1, CancelSchemaMigrationRequestJson as CancelSchemaMigrationRequestJson$1, CancelSchemaMigrationResponseSchema, CleanupSchemaMigrationRequest as CleanupSchemaMigrationRequest$1, CleanupSchemaMigrationRequestJson as CleanupSchemaMigrationRequestJson$1, CleanupSchemaMigrationResponseSchema, CompleteSchemaMigrationRequest as CompleteSchemaMigrationRequest$1, CompleteSchemaMigrationRequestJson as CompleteSchemaMigrationRequestJson$1, CompleteSchemaMigrationResponseSchema, ConcludeTransactionResponseSchema, CreateKeyspaceRequest as CreateKeyspaceRequest$1, CreateKeyspaceRequestJson as CreateKeyspaceRequestJson$1, CreateShardRequest as CreateShardRequest$1, CreateShardRequestJson as CreateShardRequestJson$1, CreateShardResponseSchema, DeleteKeyspaceRequest as DeleteKeyspaceRequest$1, DeleteKeyspaceRequestJson as DeleteKeyspaceRequestJson$1, DeleteKeyspaceResponseSchema, DeleteShardsRequest as DeleteShardsRequest$1, DeleteShardsRequestJson as DeleteShardsRequestJson$1, DeleteShardsResponseSchema, EmergencyReparentShardRequest, EmergencyReparentShardRequestJson, GetBackupsRequest as GetBackupsRequest$1, GetBackupsRequestJson as GetBackupsRequestJson$1, GetFullStatusResponseSchema, GetSchemaMigrationsRequest as GetSchemaMigrationsRequest$1, GetSchemaMigrationsRequestJson as GetSchemaMigrationsRequestJson$1, GetSrvKeyspacesResponse as GetSrvKeyspacesResponse$1, GetSrvKeyspacesResponseJson as GetSrvKeyspacesResponseJson$1, GetSrvKeyspacesResponseSchema as GetSrvKeyspacesResponseSchema$1, GetTopologyPathResponseSchema, GetUnresolvedTransactionsResponseSchema, Keyspace as Keyspace$1, KeyspaceJson as KeyspaceJson$1, LaunchSchemaMigrationRequest as LaunchSchemaMigrationRequest$1, LaunchSchemaMigrationRequestJson as LaunchSchemaMigrationRequestJson$1, LaunchSchemaMigrationResponseSchema, MoveTablesCreateRequest as MoveTablesCreateRequest$1, MoveTablesCreateRequestJson as MoveTablesCreateRequestJson$1, PlannedReparentShardRequest, PlannedReparentShardRequestJson, RetrySchemaMigrationRequest as RetrySchemaMigrationRequest$1, RetrySchemaMigrationRequestJson as RetrySchemaMigrationRequestJson$1, RetrySchemaMigrationResponseSchema, SchemaMigration as SchemaMigration$1, SchemaMigrationJson as SchemaMigrationJson$1, Shard as Shard$1, ShardJson as ShardJson$1, ShardReplicationPositionsResponse, ShardReplicationPositionsResponseJson, ValidateKeyspaceResponseSchema, ValidateResponseSchema, ValidateSchemaKeyspaceResponseSchema, ValidateShardResponseSchema, ValidateVersionKeyspaceResponseSchema, ValidateVersionShardResponseSchema, Workflow as Workflow$1, WorkflowJson as WorkflowJson$1, WorkflowStatusResponseSchema, WorkflowUpdateResponseSchema } from "./vtctldata_pb";
import { file_vtctldata } from "./vtctldata_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file vtadmin.proto.
 */
export const file_vtadmin: GenFile = /*@__PURE__*/
  fileDesc("Cg12dGFkbWluLnByb3RvEgd2dGFkbWluIiMKB0NsdXN0ZXISCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCSJYCg1DbHVzdGVyQmFja3VwEiEKB2NsdXN0ZXIYASABKAsyEC52dGFkbWluLkNsdXN0ZXISJAoGYmFja3VwGAIgASgLMhQubXlzcWxjdGwuQmFja3VwSW5mbyK6AQoTQ2x1c3RlckNlbGxzQWxpYXNlcxIhCgdjbHVzdGVyGAEgASgLMhAudnRhZG1pbi5DbHVzdGVyEjoKB2FsaWFzZXMYAiADKAsyKS52dGFkbWluLkNsdXN0ZXJDZWxsc0FsaWFzZXMuQWxpYXNlc0VudHJ5GkQKDEFsaWFzZXNFbnRyeRILCgNrZXkYASABKAkSIwoFdmFsdWUYAiABKAsyFC50b3BvZGF0YS5DZWxsc0FsaWFzOgI4ASJpCg9DbHVzdGVyQ2VsbEluZm8SIQoHY2x1c3RlchgBIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlchIMCgRuYW1lGAIgASgJEiUKCWNlbGxfaW5mbxgDIAEoCzISLnRvcG9kYXRhLkNlbGxJbmZvIqoBCh9DbHVzdGVyU2hhcmRSZXBsaWNhdGlvblBvc2l0aW9uEiEKB2NsdXN0ZXIYASABKAsyEC52dGFkbWluLkNsdXN0ZXISEAoIa2V5c3BhY2UYAiABKAkSDQoFc2hhcmQYAyABKAkSQwoNcG9zaXRpb25faW5mbxgEIAEoCzIsLnZ0Y3RsZGF0YS5TaGFyZFJlcGxpY2F0aW9uUG9zaXRpb25zUmVzcG9uc2UiSgoQQ2x1c3RlcldvcmtmbG93cxIkCgl3b3JrZmxvd3MYASADKAsyES52dGFkbWluLldvcmtmbG93EhAKCHdhcm5pbmdzGAIgAygJIsQBCghLZXlzcGFjZRIhCgdjbHVzdGVyGAEgASgLMhAudnRhZG1pbi5DbHVzdGVyEiUKCGtleXNwYWNlGAIgASgLMhMudnRjdGxkYXRhLktleXNwYWNlEi0KBnNoYXJkcxgDIAMoCzIdLnZ0YWRtaW4uS2V5c3BhY2UuU2hhcmRzRW50cnkaPwoLU2hhcmRzRW50cnkSCwoDa2V5GAEgASgJEh8KBXZhbHVlGAIgASgLMhAudnRjdGxkYXRhLlNoYXJkOgI4ASL6AwoGU2NoZW1hEiEKB2NsdXN0ZXIYASABKAsyEC52dGFkbWluLkNsdXN0ZXISEAoIa2V5c3BhY2UYAiABKAkSPQoRdGFibGVfZGVmaW5pdGlvbnMYAyADKAsyIi50YWJsZXRtYW5hZ2VyZGF0YS5UYWJsZURlZmluaXRpb24SNAoLdGFibGVfc2l6ZXMYBCADKAsyHy52dGFkbWluLlNjaGVtYS5UYWJsZVNpemVzRW50cnkaTAoPVGFibGVTaXplc0VudHJ5EgsKA2tleRgBIAEoCRIoCgV2YWx1ZRgCIAEoCzIZLnZ0YWRtaW4uU2NoZW1hLlRhYmxlU2l6ZToCOAEaOAoOU2hhcmRUYWJsZVNpemUSEQoJcm93X2NvdW50GAEgASgEEhMKC2RhdGFfbGVuZ3RoGAIgASgEGr0BCglUYWJsZVNpemUSEQoJcm93X2NvdW50GAEgASgEEhMKC2RhdGFfbGVuZ3RoGAIgASgEEjgKCGJ5X3NoYXJkGAMgAygLMiYudnRhZG1pbi5TY2hlbWEuVGFibGVTaXplLkJ5U2hhcmRFbnRyeRpOCgxCeVNoYXJkRW50cnkSCwoDa2V5GAEgASgJEi0KBXZhbHVlGAIgASgLMh4udnRhZG1pbi5TY2hlbWEuU2hhcmRUYWJsZVNpemU6AjgBImoKD1NjaGVtYU1pZ3JhdGlvbhIhCgdjbHVzdGVyGAEgASgLMhAudnRhZG1pbi5DbHVzdGVyEjQKEHNjaGVtYV9taWdyYXRpb24YAiABKAsyGi52dGN0bGRhdGEuU2NoZW1hTWlncmF0aW9uIksKBVNoYXJkEiEKB2NsdXN0ZXIYASABKAsyEC52dGFkbWluLkNsdXN0ZXISHwoFc2hhcmQYAiABKAsyEC52dGN0bGRhdGEuU2hhcmQiaAoKU3J2VlNjaGVtYRIMCgRjZWxsGAEgASgJEiEKB2NsdXN0ZXIYAiABKAsyEC52dGFkbWluLkNsdXN0ZXISKQoMc3J2X3Zfc2NoZW1hGAMgASgLMhMudnNjaGVtYS5TcnZWU2NoZW1hIsMBCgZUYWJsZXQSIQoHY2x1c3RlchgBIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlchIgCgZ0YWJsZXQYAiABKAsyEC50b3BvZGF0YS5UYWJsZXQSKwoFc3RhdGUYAyABKA4yHC52dGFkbWluLlRhYmxldC5TZXJ2aW5nU3RhdGUSDAoERlFEThgEIAEoCSI5CgxTZXJ2aW5nU3RhdGUSCwoHVU5LTk9XThAAEgsKB1NFUlZJTkcQARIPCgtOT1RfU0VSVklORxACIl8KB1ZTY2hlbWESIQoHY2x1c3RlchgBIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlchIMCgRuYW1lGAIgASgJEiMKCHZfc2NoZW1hGAMgASgLMhEudnNjaGVtYS5LZXlzcGFjZSJLCgZWdGN0bGQSEAoIaG9zdG5hbWUYASABKAkSIQoHY2x1c3RlchgCIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlchIMCgRGUUROGAMgASgJInoKBlZUR2F0ZRIQCghob3N0bmFtZRgBIAEoCRIMCgRwb29sGAIgASgJEgwKBGNlbGwYAyABKAkSIQoHY2x1c3RlchgEIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlchIRCglrZXlzcGFjZXMYBSADKAkSDAoERlFEThgGIAEoCSJmCghXb3JrZmxvdxIhCgdjbHVzdGVyGAEgASgLMhAudnRhZG1pbi5DbHVzdGVyEhAKCGtleXNwYWNlGAIgASgJEiUKCHdvcmtmbG93GAMgASgLMhMudnRjdGxkYXRhLldvcmtmbG93IlgKEkFwcGx5U2NoZW1hUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEi4KB3JlcXVlc3QYAiABKAsyHS52dGN0bGRhdGEuQXBwbHlTY2hlbWFSZXF1ZXN0ImwKHENhbmNlbFNjaGVtYU1pZ3JhdGlvblJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRI4CgdyZXF1ZXN0GAIgASgLMicudnRjdGxkYXRhLkNhbmNlbFNjaGVtYU1pZ3JhdGlvblJlcXVlc3QibgodQ2xlYW51cFNjaGVtYU1pZ3JhdGlvblJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRI5CgdyZXF1ZXN0GAIgASgLMigudnRjdGxkYXRhLkNsZWFudXBTY2hlbWFNaWdyYXRpb25SZXF1ZXN0InAKHkNvbXBsZXRlU2NoZW1hTWlncmF0aW9uUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEjoKB3JlcXVlc3QYAiABKAsyKS52dGN0bGRhdGEuQ29tcGxldGVTY2hlbWFNaWdyYXRpb25SZXF1ZXN0Ij4KGkNvbmNsdWRlVHJhbnNhY3Rpb25SZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSDAoEZHRpZBgCIAEoCSJeChVDcmVhdGVLZXlzcGFjZVJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIxCgdvcHRpb25zGAIgASgLMiAudnRjdGxkYXRhLkNyZWF0ZUtleXNwYWNlUmVxdWVzdCI9ChZDcmVhdGVLZXlzcGFjZVJlc3BvbnNlEiMKCGtleXNwYWNlGAEgASgLMhEudnRhZG1pbi5LZXlzcGFjZSJYChJDcmVhdGVTaGFyZFJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIuCgdvcHRpb25zGAIgASgLMh0udnRjdGxkYXRhLkNyZWF0ZVNoYXJkUmVxdWVzdCJeChVEZWxldGVLZXlzcGFjZVJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIxCgdvcHRpb25zGAIgASgLMiAudnRjdGxkYXRhLkRlbGV0ZUtleXNwYWNlUmVxdWVzdCJaChNEZWxldGVTaGFyZHNSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSLwoHb3B0aW9ucxgCIAEoCzIeLnZ0Y3RsZGF0YS5EZWxldGVTaGFyZHNSZXF1ZXN0ImcKE0RlbGV0ZVRhYmxldFJlcXVlc3QSJAoFYWxpYXMYASABKAsyFS50b3BvZGF0YS5UYWJsZXRBbGlhcxITCgtjbHVzdGVyX2lkcxgCIAMoCRIVCg1hbGxvd19wcmltYXJ5GAMgASgIIkkKFERlbGV0ZVRhYmxldFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCRIhCgdjbHVzdGVyGAIgASgLMhAudnRhZG1pbi5DbHVzdGVyIm4KHUVtZXJnZW5jeUZhaWxvdmVyU2hhcmRSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSOQoHb3B0aW9ucxgCIAEoCzIoLnZ0Y3RsZGF0YS5FbWVyZ2VuY3lSZXBhcmVudFNoYXJkUmVxdWVzdCK1AQoeRW1lcmdlbmN5RmFpbG92ZXJTaGFyZFJlc3BvbnNlEiEKB2NsdXN0ZXIYASABKAsyEC52dGFkbWluLkNsdXN0ZXISEAoIa2V5c3BhY2UYAiABKAkSDQoFc2hhcmQYAyABKAkSLwoQcHJvbW90ZWRfcHJpbWFyeRgEIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEh4KBmV2ZW50cxgFIAMoCzIOLmxvZ3V0aWwuRXZlbnQidwoRRmluZFNjaGVtYVJlcXVlc3QSDQoFdGFibGUYASABKAkSEwoLY2x1c3Rlcl9pZHMYAiADKAkSPgoSdGFibGVfc2l6ZV9vcHRpb25zGAMgASgLMiIudnRhZG1pbi5HZXRTY2hlbWFUYWJsZVNpemVPcHRpb25zIosBChFHZXRCYWNrdXBzUmVxdWVzdBITCgtjbHVzdGVyX2lkcxgBIAMoCRIRCglrZXlzcGFjZXMYAiADKAkSFwoPa2V5c3BhY2Vfc2hhcmRzGAMgAygJEjUKD3JlcXVlc3Rfb3B0aW9ucxgEIAEoCzIcLnZ0Y3RsZGF0YS5HZXRCYWNrdXBzUmVxdWVzdCI9ChJHZXRCYWNrdXBzUmVzcG9uc2USJwoHYmFja3VwcxgBIAMoCzIWLnZ0YWRtaW4uQ2x1c3RlckJhY2t1cCJNChNHZXRDZWxsSW5mb3NSZXF1ZXN0EhMKC2NsdXN0ZXJfaWRzGAEgAygJEg0KBWNlbGxzGAIgAygJEhIKCm5hbWVzX29ubHkYAyABKAgiRAoUR2V0Q2VsbEluZm9zUmVzcG9uc2USLAoKY2VsbF9pbmZvcxgBIAMoCzIYLnZ0YWRtaW4uQ2x1c3RlckNlbGxJbmZvIi0KFkdldENlbGxzQWxpYXNlc1JlcXVlc3QSEwoLY2x1c3Rlcl9pZHMYASADKAkiSAoXR2V0Q2VsbHNBbGlhc2VzUmVzcG9uc2USLQoHYWxpYXNlcxgBIAMoCzIcLnZ0YWRtaW4uQ2x1c3RlckNlbGxzQWxpYXNlcyIUChJHZXRDbHVzdGVyc1JlcXVlc3QiOQoTR2V0Q2x1c3RlcnNSZXNwb25zZRIiCghjbHVzdGVycxgBIAMoCzIQLnZ0YWRtaW4uQ2x1c3RlciJQChRHZXRGdWxsU3RhdHVzUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEiQKBWFsaWFzGAIgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMiJgoPR2V0R2F0ZXNSZXF1ZXN0EhMKC2NsdXN0ZXJfaWRzGAEgAygJIjIKEEdldEdhdGVzUmVzcG9uc2USHgoFZ2F0ZXMYASADKAsyDy52dGFkbWluLlZUR2F0ZSI6ChJHZXRLZXlzcGFjZVJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIQCghrZXlzcGFjZRgCIAEoCSIqChNHZXRLZXlzcGFjZXNSZXF1ZXN0EhMKC2NsdXN0ZXJfaWRzGAEgAygJIjwKFEdldEtleXNwYWNlc1Jlc3BvbnNlEiQKCWtleXNwYWNlcxgBIAMoCzIRLnZ0YWRtaW4uS2V5c3BhY2UihwEKEEdldFNjaGVtYVJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIQCghrZXlzcGFjZRgCIAEoCRINCgV0YWJsZRgDIAEoCRI+ChJ0YWJsZV9zaXplX29wdGlvbnMYBCABKAsyIi52dGFkbWluLkdldFNjaGVtYVRhYmxlU2l6ZU9wdGlvbnMiaAoRR2V0U2NoZW1hc1JlcXVlc3QSEwoLY2x1c3Rlcl9pZHMYASADKAkSPgoSdGFibGVfc2l6ZV9vcHRpb25zGAIgASgLMiIudnRhZG1pbi5HZXRTY2hlbWFUYWJsZVNpemVPcHRpb25zIjYKEkdldFNjaGVtYXNSZXNwb25zZRIgCgdzY2hlbWFzGAEgAygLMg8udnRhZG1pbi5TY2hlbWEiyAEKGkdldFNjaGVtYU1pZ3JhdGlvbnNSZXF1ZXN0EkwKEGNsdXN0ZXJfcmVxdWVzdHMYASADKAsyMi52dGFkbWluLkdldFNjaGVtYU1pZ3JhdGlvbnNSZXF1ZXN0LkNsdXN0ZXJSZXF1ZXN0GlwKDkNsdXN0ZXJSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSNgoHcmVxdWVzdBgCIAEoCzIlLnZ0Y3RsZGF0YS5HZXRTY2hlbWFNaWdyYXRpb25zUmVxdWVzdCJSChtHZXRTY2hlbWFNaWdyYXRpb25zUmVzcG9uc2USMwoRc2NoZW1hX21pZ3JhdGlvbnMYASADKAsyGC52dGFkbWluLlNjaGVtYU1pZ3JhdGlvbiJmCiNHZXRTaGFyZFJlcGxpY2F0aW9uUG9zaXRpb25zUmVxdWVzdBITCgtjbHVzdGVyX2lkcxgBIAMoCRIRCglrZXlzcGFjZXMYAiADKAkSFwoPa2V5c3BhY2Vfc2hhcmRzGAMgAygJIm8KJEdldFNoYXJkUmVwbGljYXRpb25Qb3NpdGlvbnNSZXNwb25zZRJHChVyZXBsaWNhdGlvbl9wb3NpdGlvbnMYASADKAsyKC52dGFkbWluLkNsdXN0ZXJTaGFyZFJlcGxpY2F0aW9uUG9zaXRpb24iTAoVR2V0U3J2S2V5c3BhY2VSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSDQoFY2VsbHMYAyADKAkiPAoWR2V0U3J2S2V5c3BhY2VzUmVxdWVzdBITCgtjbHVzdGVyX2lkcxgBIAMoCRINCgVjZWxscxgCIAMoCSK9AQoXR2V0U3J2S2V5c3BhY2VzUmVzcG9uc2USSQoNc3J2X2tleXNwYWNlcxgBIAMoCzIyLnZ0YWRtaW4uR2V0U3J2S2V5c3BhY2VzUmVzcG9uc2UuU3J2S2V5c3BhY2VzRW50cnkaVwoRU3J2S2V5c3BhY2VzRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIudnRjdGxkYXRhLkdldFNydktleXNwYWNlc1Jlc3BvbnNlOgI4ASI4ChRHZXRTcnZWU2NoZW1hUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEgwKBGNlbGwYAiABKAkiOwoVR2V0U3J2VlNjaGVtYXNSZXF1ZXN0EhMKC2NsdXN0ZXJfaWRzGAEgAygJEg0KBWNlbGxzGAIgAygJIkQKFkdldFNydlZTY2hlbWFzUmVzcG9uc2USKgoNc3J2X3Zfc2NoZW1hcxgBIAMoCzITLnZ0YWRtaW4uU3J2VlNjaGVtYSJYChlHZXRTY2hlbWFUYWJsZVNpemVPcHRpb25zEhcKD2FnZ3JlZ2F0ZV9zaXplcxgBIAEoCBIiChppbmNsdWRlX25vbl9zZXJ2aW5nX3NoYXJkcxgCIAEoCCJNChBHZXRUYWJsZXRSZXF1ZXN0EiQKBWFsaWFzGAEgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSEwoLY2x1c3Rlcl9pZHMYAiADKAkiKAoRR2V0VGFibGV0c1JlcXVlc3QSEwoLY2x1c3Rlcl9pZHMYASADKAkiNgoSR2V0VGFibGV0c1Jlc3BvbnNlEiAKB3RhYmxldHMYASADKAsyDy52dGFkbWluLlRhYmxldCI6ChZHZXRUb3BvbG9neVBhdGhSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSDAoEcGF0aBgCIAEoCSJdCiBHZXRVbnJlc29sdmVkVHJhbnNhY3Rpb25zUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEhAKCGtleXNwYWNlGAIgASgJEhMKC2FiYW5kb25fYWdlGAMgASgDIjkKEUdldFZTY2hlbWFSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkiKQoSR2V0VlNjaGVtYXNSZXF1ZXN0EhMKC2NsdXN0ZXJfaWRzGAEgAygJIjoKE0dldFZTY2hlbWFzUmVzcG9uc2USIwoJdl9zY2hlbWFzGAEgAygLMhAudnRhZG1pbi5WU2NoZW1hIigKEUdldFZ0Y3RsZHNSZXF1ZXN0EhMKC2NsdXN0ZXJfaWRzGAEgAygJIjYKEkdldFZ0Y3RsZHNSZXNwb25zZRIgCgd2dGN0bGRzGAEgAygLMg8udnRhZG1pbi5WdGN0bGQiXQoSR2V0V29ya2Zsb3dSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSDAoEbmFtZRgDIAEoCRITCgthY3RpdmVfb25seRgEIAEoCCJOChhHZXRXb3JrZmxvd1N0YXR1c1JlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIQCghrZXlzcGFjZRgCIAEoCRIMCgRuYW1lGAMgASgJIk4KFFN0YXJ0V29ya2Zsb3dSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSEAoId29ya2Zsb3cYAyABKAkiTQoTU3RvcFdvcmtmbG93UmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEhAKCGtleXNwYWNlGAIgASgJEhAKCHdvcmtmbG93GAMgASgJImwKE0dldFdvcmtmbG93c1JlcXVlc3QSEwoLY2x1c3Rlcl9pZHMYASADKAkSEwoLYWN0aXZlX29ubHkYAiABKAgSEQoJa2V5c3BhY2VzGAMgAygJEhgKEGlnbm9yZV9rZXlzcGFjZXMYBCADKAkiwQEKFEdldFdvcmtmbG93c1Jlc3BvbnNlElMKFHdvcmtmbG93c19ieV9jbHVzdGVyGAEgAygLMjUudnRhZG1pbi5HZXRXb3JrZmxvd3NSZXNwb25zZS5Xb3JrZmxvd3NCeUNsdXN0ZXJFbnRyeRpUChdXb3JrZmxvd3NCeUNsdXN0ZXJFbnRyeRILCgNrZXkYASABKAkSKAoFdmFsdWUYAiABKAsyGS52dGFkbWluLkNsdXN0ZXJXb3JrZmxvd3M6AjgBImwKHExhdW5jaFNjaGVtYU1pZ3JhdGlvblJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRI4CgdyZXF1ZXN0GAIgASgLMicudnRjdGxkYXRhLkxhdW5jaFNjaGVtYU1pZ3JhdGlvblJlcXVlc3QiYgoXTW92ZVRhYmxlc0NyZWF0ZVJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIzCgdyZXF1ZXN0GAIgASgLMiIudnRjdGxkYXRhLk1vdmVUYWJsZXNDcmVhdGVSZXF1ZXN0Ik4KEVBpbmdUYWJsZXRSZXF1ZXN0EiQKBWFsaWFzGAEgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSEwoLY2x1c3Rlcl9pZHMYAiADKAkiRwoSUGluZ1RhYmxldFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCRIhCgdjbHVzdGVyGAIgASgLMhAudnRhZG1pbi5DbHVzdGVyImoKG1BsYW5uZWRGYWlsb3ZlclNoYXJkUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEjcKB29wdGlvbnMYAiABKAsyJi52dGN0bGRhdGEuUGxhbm5lZFJlcGFyZW50U2hhcmRSZXF1ZXN0IrMBChxQbGFubmVkRmFpbG92ZXJTaGFyZFJlc3BvbnNlEiEKB2NsdXN0ZXIYASABKAsyEC52dGFkbWluLkNsdXN0ZXISEAoIa2V5c3BhY2UYAiABKAkSDQoFc2hhcmQYAyABKAkSLwoQcHJvbW90ZWRfcHJpbWFyeRgEIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEh4KBmV2ZW50cxgFIAMoCzIOLmxvZ3V0aWwuRXZlbnQiaQobUmVidWlsZEtleXNwYWNlR3JhcGhSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSDQoFY2VsbHMYAyADKAkSFQoNYWxsb3dfcGFydGlhbBgEIAEoCCIuChxSZWJ1aWxkS2V5c3BhY2VHcmFwaFJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCSJQChNSZWZyZXNoU3RhdGVSZXF1ZXN0EiQKBWFsaWFzGAEgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSEwoLY2x1c3Rlcl9pZHMYAiADKAkiSQoUUmVmcmVzaFN0YXRlUmVzcG9uc2USDgoGc3RhdHVzGAEgASgJEiEKB2NsdXN0ZXIYAiABKAsyEC52dGFkbWluLkNsdXN0ZXIixAEKFFJlbG9hZFNjaGVtYXNSZXF1ZXN0EhEKCWtleXNwYWNlcxgBIAMoCRIXCg9rZXlzcGFjZV9zaGFyZHMYAiADKAkSJgoHdGFibGV0cxgDIAMoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEhMKC2NsdXN0ZXJfaWRzGAQgAygJEhMKC2NvbmN1cnJlbmN5GAUgASgFEhUKDXdhaXRfcG9zaXRpb24YBiABKAkSFwoPaW5jbHVkZV9wcmltYXJ5GAcgASgIIs4DChVSZWxvYWRTY2hlbWFzUmVzcG9uc2USRwoQa2V5c3BhY2VfcmVzdWx0cxgBIAMoCzItLnZ0YWRtaW4uUmVsb2FkU2NoZW1hc1Jlc3BvbnNlLktleXNwYWNlUmVzdWx0EkEKDXNoYXJkX3Jlc3VsdHMYAiADKAsyKi52dGFkbWluLlJlbG9hZFNjaGVtYXNSZXNwb25zZS5TaGFyZFJlc3VsdBJDCg50YWJsZXRfcmVzdWx0cxgDIAMoCzIrLnZ0YWRtaW4uUmVsb2FkU2NoZW1hc1Jlc3BvbnNlLlRhYmxldFJlc3VsdBpVCg5LZXlzcGFjZVJlc3VsdBIjCghrZXlzcGFjZRgBIAEoCzIRLnZ0YWRtaW4uS2V5c3BhY2USHgoGZXZlbnRzGAIgAygLMg4ubG9ndXRpbC5FdmVudBpMCgtTaGFyZFJlc3VsdBIdCgVzaGFyZBgBIAEoCzIOLnZ0YWRtaW4uU2hhcmQSHgoGZXZlbnRzGAIgAygLMg4ubG9ndXRpbC5FdmVudBo/CgxUYWJsZXRSZXN1bHQSHwoGdGFibGV0GAEgASgLMg8udnRhZG1pbi5UYWJsZXQSDgoGcmVzdWx0GAIgASgJIpQBChhSZWxvYWRTY2hlbWFTaGFyZFJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIQCghrZXlzcGFjZRgCIAEoCRINCgVzaGFyZBgDIAEoCRIVCg13YWl0X3Bvc2l0aW9uGAQgASgJEhcKD2luY2x1ZGVfcHJpbWFyeRgFIAEoCBITCgtjb25jdXJyZW5jeRgGIAEoBSI7ChlSZWxvYWRTY2hlbWFTaGFyZFJlc3BvbnNlEh4KBmV2ZW50cxgBIAMoCzIOLmxvZ3V0aWwuRXZlbnQiYgolUmVmcmVzaFRhYmxldFJlcGxpY2F0aW9uU291cmNlUmVxdWVzdBIkCgVhbGlhcxgBIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEhMKC2NsdXN0ZXJfaWRzGAIgAygJIpQBCiZSZWZyZXNoVGFibGV0UmVwbGljYXRpb25Tb3VyY2VSZXNwb25zZRIQCghrZXlzcGFjZRgBIAEoCRINCgVzaGFyZBgCIAEoCRImCgdwcmltYXJ5GAMgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSIQoHY2x1c3RlchgEIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlciJxChlSZW1vdmVLZXlzcGFjZUNlbGxSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSDAoEY2VsbBgDIAEoCRINCgVmb3JjZRgEIAEoCBIRCglyZWN1cnNpdmUYBSABKAgiLAoaUmVtb3ZlS2V5c3BhY2VDZWxsUmVzcG9uc2USDgoGc3RhdHVzGAEgASgJImoKG1JldHJ5U2NoZW1hTWlncmF0aW9uUmVxdWVzdBISCgpjbHVzdGVyX2lkGAEgASgJEjcKB3JlcXVlc3QYAiABKAsyJi52dGN0bGRhdGEuUmV0cnlTY2hlbWFNaWdyYXRpb25SZXF1ZXN0IlIKFVJ1bkhlYWx0aENoZWNrUmVxdWVzdBIkCgVhbGlhcxgBIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEhMKC2NsdXN0ZXJfaWRzGAIgAygJIksKFlJ1bkhlYWx0aENoZWNrUmVzcG9uc2USDgoGc3RhdHVzGAEgASgJEiEKB2NsdXN0ZXIYAiABKAsyEC52dGFkbWluLkNsdXN0ZXIiTwoSU2V0UmVhZE9ubHlSZXF1ZXN0EiQKBWFsaWFzGAEgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSEwoLY2x1c3Rlcl9pZHMYAiADKAkiFQoTU2V0UmVhZE9ubHlSZXNwb25zZSJQChNTZXRSZWFkV3JpdGVSZXF1ZXN0EiQKBWFsaWFzGAEgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSEwoLY2x1c3Rlcl9pZHMYAiADKAkiFgoUU2V0UmVhZFdyaXRlUmVzcG9uc2UiVAoXU3RhcnRSZXBsaWNhdGlvblJlcXVlc3QSJAoFYWxpYXMYASABKAsyFS50b3BvZGF0YS5UYWJsZXRBbGlhcxITCgtjbHVzdGVyX2lkcxgCIAMoCSJNChhTdGFydFJlcGxpY2F0aW9uUmVzcG9uc2USDgoGc3RhdHVzGAEgASgJEiEKB2NsdXN0ZXIYAiABKAsyEC52dGFkbWluLkNsdXN0ZXIiUwoWU3RvcFJlcGxpY2F0aW9uUmVxdWVzdBIkCgVhbGlhcxgBIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEhMKC2NsdXN0ZXJfaWRzGAIgAygJIkwKF1N0b3BSZXBsaWNhdGlvblJlc3BvbnNlEg4KBnN0YXR1cxgBIAEoCRIhCgdjbHVzdGVyGAIgASgLMhAudnRhZG1pbi5DbHVzdGVyIlwKH1RhYmxldEV4dGVybmFsbHlQcm9tb3RlZFJlcXVlc3QSJAoFYWxpYXMYASABKAsyFS50b3BvZGF0YS5UYWJsZXRBbGlhcxITCgtjbHVzdGVyX2lkcxgCIAMoCSK+AQogVGFibGV0RXh0ZXJuYWxseVByb21vdGVkUmVzcG9uc2USIQoHY2x1c3RlchgBIAEoCzIQLnZ0YWRtaW4uQ2x1c3RlchIQCghrZXlzcGFjZRgCIAEoCRINCgVzaGFyZBgDIAEoCRIqCgtuZXdfcHJpbWFyeRgEIAEoCzIVLnRvcG9kYXRhLlRhYmxldEFsaWFzEioKC29sZF9wcmltYXJ5GAUgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMiXgohVGFibGV0RXh0ZXJuYWxseVJlcGFyZW50ZWRSZXF1ZXN0EiQKBWFsaWFzGAEgASgLMhUudG9wb2RhdGEuVGFibGV0QWxpYXMSEwoLY2x1c3Rlcl9pZHMYAiADKAkiOwoPVmFsaWRhdGVSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSFAoMcGluZ190YWJsZXRzGAIgASgIIlUKF1ZhbGlkYXRlS2V5c3BhY2VSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSFAoMcGluZ190YWJsZXRzGAMgASgIIkUKHVZhbGlkYXRlU2NoZW1hS2V5c3BhY2VSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkiYQoUVmFsaWRhdGVTaGFyZFJlcXVlc3QSEgoKY2x1c3Rlcl9pZBgBIAEoCRIQCghrZXlzcGFjZRgCIAEoCRINCgVzaGFyZBgDIAEoCRIUCgxwaW5nX3RhYmxldHMYBCABKAgiRgoeVmFsaWRhdGVWZXJzaW9uS2V5c3BhY2VSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkiUgobVmFsaWRhdGVWZXJzaW9uU2hhcmRSZXF1ZXN0EhIKCmNsdXN0ZXJfaWQYASABKAkSEAoIa2V5c3BhY2UYAiABKAkSDQoFc2hhcmQYAyABKAkiQgoQVlRFeHBsYWluUmVxdWVzdBIPCgdjbHVzdGVyGAEgASgJEhAKCGtleXNwYWNlGAIgASgJEgsKA3NxbBgDIAEoCSIlChFWVEV4cGxhaW5SZXNwb25zZRIQCghyZXNwb25zZRgBIAEoCTLrKwoHVlRBZG1pbhJMCgtBcHBseVNjaGVtYRIbLnZ0YWRtaW4uQXBwbHlTY2hlbWFSZXF1ZXN0Gh4udnRjdGxkYXRhLkFwcGx5U2NoZW1hUmVzcG9uc2UiABJqChVDYW5jZWxTY2hlbWFNaWdyYXRpb24SJS52dGFkbWluLkNhbmNlbFNjaGVtYU1pZ3JhdGlvblJlcXVlc3QaKC52dGN0bGRhdGEuQ2FuY2VsU2NoZW1hTWlncmF0aW9uUmVzcG9uc2UiABJtChZDbGVhbnVwU2NoZW1hTWlncmF0aW9uEiYudnRhZG1pbi5DbGVhbnVwU2NoZW1hTWlncmF0aW9uUmVxdWVzdBopLnZ0Y3RsZGF0YS5DbGVhbnVwU2NoZW1hTWlncmF0aW9uUmVzcG9uc2UiABJwChdDb21wbGV0ZVNjaGVtYU1pZ3JhdGlvbhInLnZ0YWRtaW4uQ29tcGxldGVTY2hlbWFNaWdyYXRpb25SZXF1ZXN0GioudnRjdGxkYXRhLkNvbXBsZXRlU2NoZW1hTWlncmF0aW9uUmVzcG9uc2UiABJkChNDb25jbHVkZVRyYW5zYWN0aW9uEiMudnRhZG1pbi5Db25jbHVkZVRyYW5zYWN0aW9uUmVxdWVzdBomLnZ0Y3RsZGF0YS5Db25jbHVkZVRyYW5zYWN0aW9uUmVzcG9uc2UiABJTCg5DcmVhdGVLZXlzcGFjZRIeLnZ0YWRtaW4uQ3JlYXRlS2V5c3BhY2VSZXF1ZXN0Gh8udnRhZG1pbi5DcmVhdGVLZXlzcGFjZVJlc3BvbnNlIgASTAoLQ3JlYXRlU2hhcmQSGy52dGFkbWluLkNyZWF0ZVNoYXJkUmVxdWVzdBoeLnZ0Y3RsZGF0YS5DcmVhdGVTaGFyZFJlc3BvbnNlIgASVQoORGVsZXRlS2V5c3BhY2USHi52dGFkbWluLkRlbGV0ZUtleXNwYWNlUmVxdWVzdBohLnZ0Y3RsZGF0YS5EZWxldGVLZXlzcGFjZVJlc3BvbnNlIgASTwoMRGVsZXRlU2hhcmRzEhwudnRhZG1pbi5EZWxldGVTaGFyZHNSZXF1ZXN0Gh8udnRjdGxkYXRhLkRlbGV0ZVNoYXJkc1Jlc3BvbnNlIgASTQoMRGVsZXRlVGFibGV0EhwudnRhZG1pbi5EZWxldGVUYWJsZXRSZXF1ZXN0Gh0udnRhZG1pbi5EZWxldGVUYWJsZXRSZXNwb25zZSIAEmsKFkVtZXJnZW5jeUZhaWxvdmVyU2hhcmQSJi52dGFkbWluLkVtZXJnZW5jeUZhaWxvdmVyU2hhcmRSZXF1ZXN0GicudnRhZG1pbi5FbWVyZ2VuY3lGYWlsb3ZlclNoYXJkUmVzcG9uc2UiABI7CgpGaW5kU2NoZW1hEhoudnRhZG1pbi5GaW5kU2NoZW1hUmVxdWVzdBoPLnZ0YWRtaW4uU2NoZW1hIgASRwoKR2V0QmFja3VwcxIaLnZ0YWRtaW4uR2V0QmFja3Vwc1JlcXVlc3QaGy52dGFkbWluLkdldEJhY2t1cHNSZXNwb25zZSIAEk0KDEdldENlbGxJbmZvcxIcLnZ0YWRtaW4uR2V0Q2VsbEluZm9zUmVxdWVzdBodLnZ0YWRtaW4uR2V0Q2VsbEluZm9zUmVzcG9uc2UiABJWCg9HZXRDZWxsc0FsaWFzZXMSHy52dGFkbWluLkdldENlbGxzQWxpYXNlc1JlcXVlc3QaIC52dGFkbWluLkdldENlbGxzQWxpYXNlc1Jlc3BvbnNlIgASSgoLR2V0Q2x1c3RlcnMSGy52dGFkbWluLkdldENsdXN0ZXJzUmVxdWVzdBocLnZ0YWRtaW4uR2V0Q2x1c3RlcnNSZXNwb25zZSIAElIKDUdldEZ1bGxTdGF0dXMSHS52dGFkbWluLkdldEZ1bGxTdGF0dXNSZXF1ZXN0GiAudnRjdGxkYXRhLkdldEZ1bGxTdGF0dXNSZXNwb25zZSIAEkEKCEdldEdhdGVzEhgudnRhZG1pbi5HZXRHYXRlc1JlcXVlc3QaGS52dGFkbWluLkdldEdhdGVzUmVzcG9uc2UiABI/CgtHZXRLZXlzcGFjZRIbLnZ0YWRtaW4uR2V0S2V5c3BhY2VSZXF1ZXN0GhEudnRhZG1pbi5LZXlzcGFjZSIAEk0KDEdldEtleXNwYWNlcxIcLnZ0YWRtaW4uR2V0S2V5c3BhY2VzUmVxdWVzdBodLnZ0YWRtaW4uR2V0S2V5c3BhY2VzUmVzcG9uc2UiABI5CglHZXRTY2hlbWESGS52dGFkbWluLkdldFNjaGVtYVJlcXVlc3QaDy52dGFkbWluLlNjaGVtYSIAEkcKCkdldFNjaGVtYXMSGi52dGFkbWluLkdldFNjaGVtYXNSZXF1ZXN0GhsudnRhZG1pbi5HZXRTY2hlbWFzUmVzcG9uc2UiABJiChNHZXRTY2hlbWFNaWdyYXRpb25zEiMudnRhZG1pbi5HZXRTY2hlbWFNaWdyYXRpb25zUmVxdWVzdBokLnZ0YWRtaW4uR2V0U2NoZW1hTWlncmF0aW9uc1Jlc3BvbnNlIgASfQocR2V0U2hhcmRSZXBsaWNhdGlvblBvc2l0aW9ucxIsLnZ0YWRtaW4uR2V0U2hhcmRSZXBsaWNhdGlvblBvc2l0aW9uc1JlcXVlc3QaLS52dGFkbWluLkdldFNoYXJkUmVwbGljYXRpb25Qb3NpdGlvbnNSZXNwb25zZSIAElYKDkdldFNydktleXNwYWNlEh4udnRhZG1pbi5HZXRTcnZLZXlzcGFjZVJlcXVlc3QaIi52dGN0bGRhdGEuR2V0U3J2S2V5c3BhY2VzUmVzcG9uc2UiABJWCg9HZXRTcnZLZXlzcGFjZXMSHy52dGFkbWluLkdldFNydktleXNwYWNlc1JlcXVlc3QaIC52dGFkbWluLkdldFNydktleXNwYWNlc1Jlc3BvbnNlIgASRQoNR2V0U3J2VlNjaGVtYRIdLnZ0YWRtaW4uR2V0U3J2VlNjaGVtYVJlcXVlc3QaEy52dGFkbWluLlNydlZTY2hlbWEiABJTCg5HZXRTcnZWU2NoZW1hcxIeLnZ0YWRtaW4uR2V0U3J2VlNjaGVtYXNSZXF1ZXN0Gh8udnRhZG1pbi5HZXRTcnZWU2NoZW1hc1Jlc3BvbnNlIgASOQoJR2V0VGFibGV0EhkudnRhZG1pbi5HZXRUYWJsZXRSZXF1ZXN0Gg8udnRhZG1pbi5UYWJsZXQiABJHCgpHZXRUYWJsZXRzEhoudnRhZG1pbi5HZXRUYWJsZXRzUmVxdWVzdBobLnZ0YWRtaW4uR2V0VGFibGV0c1Jlc3BvbnNlIgASWAoPR2V0VG9wb2xvZ3lQYXRoEh8udnRhZG1pbi5HZXRUb3BvbG9neVBhdGhSZXF1ZXN0GiIudnRjdGxkYXRhLkdldFRvcG9sb2d5UGF0aFJlc3BvbnNlIgASdgoZR2V0VW5yZXNvbHZlZFRyYW5zYWN0aW9ucxIpLnZ0YWRtaW4uR2V0VW5yZXNvbHZlZFRyYW5zYWN0aW9uc1JlcXVlc3QaLC52dGN0bGRhdGEuR2V0VW5yZXNvbHZlZFRyYW5zYWN0aW9uc1Jlc3BvbnNlIgASPAoKR2V0VlNjaGVtYRIaLnZ0YWRtaW4uR2V0VlNjaGVtYVJlcXVlc3QaEC52dGFkbWluLlZTY2hlbWEiABJKCgtHZXRWU2NoZW1hcxIbLnZ0YWRtaW4uR2V0VlNjaGVtYXNSZXF1ZXN0GhwudnRhZG1pbi5HZXRWU2NoZW1hc1Jlc3BvbnNlIgASRwoKR2V0VnRjdGxkcxIaLnZ0YWRtaW4uR2V0VnRjdGxkc1JlcXVlc3QaGy52dGFkbWluLkdldFZ0Y3RsZHNSZXNwb25zZSIAEj8KC0dldFdvcmtmbG93EhsudnRhZG1pbi5HZXRXb3JrZmxvd1JlcXVlc3QaES52dGFkbWluLldvcmtmbG93IgASTQoMR2V0V29ya2Zsb3dzEhwudnRhZG1pbi5HZXRXb3JrZmxvd3NSZXF1ZXN0Gh0udnRhZG1pbi5HZXRXb3JrZmxvd3NSZXNwb25zZSIAElsKEUdldFdvcmtmbG93U3RhdHVzEiEudnRhZG1pbi5HZXRXb3JrZmxvd1N0YXR1c1JlcXVlc3QaIS52dGN0bGRhdGEuV29ya2Zsb3dTdGF0dXNSZXNwb25zZSIAElMKDVN0YXJ0V29ya2Zsb3cSHS52dGFkbWluLlN0YXJ0V29ya2Zsb3dSZXF1ZXN0GiEudnRjdGxkYXRhLldvcmtmbG93VXBkYXRlUmVzcG9uc2UiABJRCgxTdG9wV29ya2Zsb3cSHC52dGFkbWluLlN0b3BXb3JrZmxvd1JlcXVlc3QaIS52dGN0bGRhdGEuV29ya2Zsb3dVcGRhdGVSZXNwb25zZSIAEmoKFUxhdW5jaFNjaGVtYU1pZ3JhdGlvbhIlLnZ0YWRtaW4uTGF1bmNoU2NoZW1hTWlncmF0aW9uUmVxdWVzdBooLnZ0Y3RsZGF0YS5MYXVuY2hTY2hlbWFNaWdyYXRpb25SZXNwb25zZSIAElkKEE1vdmVUYWJsZXNDcmVhdGUSIC52dGFkbWluLk1vdmVUYWJsZXNDcmVhdGVSZXF1ZXN0GiEudnRjdGxkYXRhLldvcmtmbG93U3RhdHVzUmVzcG9uc2UiABJHCgpQaW5nVGFibGV0EhoudnRhZG1pbi5QaW5nVGFibGV0UmVxdWVzdBobLnZ0YWRtaW4uUGluZ1RhYmxldFJlc3BvbnNlIgASZQoUUGxhbm5lZEZhaWxvdmVyU2hhcmQSJC52dGFkbWluLlBsYW5uZWRGYWlsb3ZlclNoYXJkUmVxdWVzdBolLnZ0YWRtaW4uUGxhbm5lZEZhaWxvdmVyU2hhcmRSZXNwb25zZSIAEmUKFFJlYnVpbGRLZXlzcGFjZUdyYXBoEiQudnRhZG1pbi5SZWJ1aWxkS2V5c3BhY2VHcmFwaFJlcXVlc3QaJS52dGFkbWluLlJlYnVpbGRLZXlzcGFjZUdyYXBoUmVzcG9uc2UiABJNCgxSZWZyZXNoU3RhdGUSHC52dGFkbWluLlJlZnJlc2hTdGF0ZVJlcXVlc3QaHS52dGFkbWluLlJlZnJlc2hTdGF0ZVJlc3BvbnNlIgASgwEKHlJlZnJlc2hUYWJsZXRSZXBsaWNhdGlvblNvdXJjZRIuLnZ0YWRtaW4uUmVmcmVzaFRhYmxldFJlcGxpY2F0aW9uU291cmNlUmVxdWVzdBovLnZ0YWRtaW4uUmVmcmVzaFRhYmxldFJlcGxpY2F0aW9uU291cmNlUmVzcG9uc2UiABJQCg1SZWxvYWRTY2hlbWFzEh0udnRhZG1pbi5SZWxvYWRTY2hlbWFzUmVxdWVzdBoeLnZ0YWRtaW4uUmVsb2FkU2NoZW1hc1Jlc3BvbnNlIgASXAoRUmVsb2FkU2NoZW1hU2hhcmQSIS52dGFkbWluLlJlbG9hZFNjaGVtYVNoYXJkUmVxdWVzdBoiLnZ0YWRtaW4uUmVsb2FkU2NoZW1hU2hhcmRSZXNwb25zZSIAEl8KElJlbW92ZUtleXNwYWNlQ2VsbBIiLnZ0YWRtaW4uUmVtb3ZlS2V5c3BhY2VDZWxsUmVxdWVzdBojLnZ0YWRtaW4uUmVtb3ZlS2V5c3BhY2VDZWxsUmVzcG9uc2UiABJnChRSZXRyeVNjaGVtYU1pZ3JhdGlvbhIkLnZ0YWRtaW4uUmV0cnlTY2hlbWFNaWdyYXRpb25SZXF1ZXN0GicudnRjdGxkYXRhLlJldHJ5U2NoZW1hTWlncmF0aW9uUmVzcG9uc2UiABJTCg5SdW5IZWFsdGhDaGVjaxIeLnZ0YWRtaW4uUnVuSGVhbHRoQ2hlY2tSZXF1ZXN0Gh8udnRhZG1pbi5SdW5IZWFsdGhDaGVja1Jlc3BvbnNlIgASSgoLU2V0UmVhZE9ubHkSGy52dGFkbWluLlNldFJlYWRPbmx5UmVxdWVzdBocLnZ0YWRtaW4uU2V0UmVhZE9ubHlSZXNwb25zZSIAEk0KDFNldFJlYWRXcml0ZRIcLnZ0YWRtaW4uU2V0UmVhZFdyaXRlUmVxdWVzdBodLnZ0YWRtaW4uU2V0UmVhZFdyaXRlUmVzcG9uc2UiABJZChBTdGFydFJlcGxpY2F0aW9uEiAudnRhZG1pbi5TdGFydFJlcGxpY2F0aW9uUmVxdWVzdBohLnZ0YWRtaW4uU3RhcnRSZXBsaWNhdGlvblJlc3BvbnNlIgASVgoPU3RvcFJlcGxpY2F0aW9uEh8udnRhZG1pbi5TdG9wUmVwbGljYXRpb25SZXF1ZXN0GiAudnRhZG1pbi5TdG9wUmVwbGljYXRpb25SZXNwb25zZSIAEnEKGFRhYmxldEV4dGVybmFsbHlQcm9tb3RlZBIoLnZ0YWRtaW4uVGFibGV0RXh0ZXJuYWxseVByb21vdGVkUmVxdWVzdBopLnZ0YWRtaW4uVGFibGV0RXh0ZXJuYWxseVByb21vdGVkUmVzcG9uc2UiABJDCghWYWxpZGF0ZRIYLnZ0YWRtaW4uVmFsaWRhdGVSZXF1ZXN0GhsudnRjdGxkYXRhLlZhbGlkYXRlUmVzcG9uc2UiABJbChBWYWxpZGF0ZUtleXNwYWNlEiAudnRhZG1pbi5WYWxpZGF0ZUtleXNwYWNlUmVxdWVzdBojLnZ0Y3RsZGF0YS5WYWxpZGF0ZUtleXNwYWNlUmVzcG9uc2UiABJtChZWYWxpZGF0ZVNjaGVtYUtleXNwYWNlEiYudnRhZG1pbi5WYWxpZGF0ZVNjaGVtYUtleXNwYWNlUmVxdWVzdBopLnZ0Y3RsZGF0YS5WYWxpZGF0ZVNjaGVtYUtleXNwYWNlUmVzcG9uc2UiABJSCg1WYWxpZGF0ZVNoYXJkEh0udnRhZG1pbi5WYWxpZGF0ZVNoYXJkUmVxdWVzdBogLnZ0Y3RsZGF0YS5WYWxpZGF0ZVNoYXJkUmVzcG9uc2UiABJwChdWYWxpZGF0ZVZlcnNpb25LZXlzcGFjZRInLnZ0YWRtaW4uVmFsaWRhdGVWZXJzaW9uS2V5c3BhY2VSZXF1ZXN0GioudnRjdGxkYXRhLlZhbGlkYXRlVmVyc2lvbktleXNwYWNlUmVzcG9uc2UiABJnChRWYWxpZGF0ZVZlcnNpb25TaGFyZBIkLnZ0YWRtaW4uVmFsaWRhdGVWZXJzaW9uU2hhcmRSZXF1ZXN0GicudnRjdGxkYXRhLlZhbGlkYXRlVmVyc2lvblNoYXJkUmVzcG9uc2UiABJECglWVEV4cGxhaW4SGS52dGFkbWluLlZURXhwbGFpblJlcXVlc3QaGi52dGFkbWluLlZURXhwbGFpblJlc3BvbnNlIgBCJlokdml0ZXNzLmlvL3ZpdGVzcy9nby92dC9wcm90by92dGFkbWluYgZwcm90bzM", [file_logutil, file_mysqlctl, file_tabletmanagerdata, file_topodata, file_vschema, file_vtctldata]);

/**
 * Cluster represents information about a Vitess cluster.
 *
 * @generated from message vtadmin.Cluster
 */
export type Cluster = Message<"vtadmin.Cluster"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;
};

/**
 * Cluster represents information about a Vitess cluster.
 *
 * @generated from message vtadmin.Cluster
 */
export type ClusterJson = {
  /**
   * @generated from field: string id = 1;
   */
  id?: string;

  /**
   * @generated from field: string name = 2;
   */
  name?: string;
};

/**
 * Describes the message vtadmin.Cluster.
 * Use `create(ClusterSchema)` to create a new message.
 */
export const ClusterSchema: GenMessage<Cluster, ClusterJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 0);

/**
 * @generated from message vtadmin.ClusterBackup
 */
export type ClusterBackup = Message<"vtadmin.ClusterBackup"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: mysqlctl.BackupInfo backup = 2;
   */
  backup?: BackupInfo;
};

/**
 * @generated from message vtadmin.ClusterBackup
 */
export type ClusterBackupJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: mysqlctl.BackupInfo backup = 2;
   */
  backup?: BackupInfoJson;
};

/**
 * Describes the message vtadmin.ClusterBackup.
 * Use `create(ClusterBackupSchema)` to create a new message.
 */
export const ClusterBackupSchema: GenMessage<ClusterBackup, ClusterBackupJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 1);

/**
 * @generated from message vtadmin.ClusterCellsAliases
 */
export type ClusterCellsAliases = Message<"vtadmin.ClusterCellsAliases"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: map<string, topodata.CellsAlias> aliases = 2;
   */
  aliases: { [key: string]: CellsAlias };
};

/**
 * @generated from message vtadmin.ClusterCellsAliases
 */
export type ClusterCellsAliasesJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: map<string, topodata.CellsAlias> aliases = 2;
   */
  aliases?: { [key: string]: CellsAliasJson };
};

/**
 * Describes the message vtadmin.ClusterCellsAliases.
 * Use `create(ClusterCellsAliasesSchema)` to create a new message.
 */
export const ClusterCellsAliasesSchema: GenMessage<ClusterCellsAliases, ClusterCellsAliasesJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 2);

/**
 * @generated from message vtadmin.ClusterCellInfo
 */
export type ClusterCellInfo = Message<"vtadmin.ClusterCellInfo"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * CellInfo contains the data for the cell.
   *
   * It may be nil if the GetCellsInfosRequest specified NamesOnly.
   *
   * @generated from field: topodata.CellInfo cell_info = 3;
   */
  cellInfo?: CellInfo;
};

/**
 * @generated from message vtadmin.ClusterCellInfo
 */
export type ClusterCellInfoJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * CellInfo contains the data for the cell.
   *
   * It may be nil if the GetCellsInfosRequest specified NamesOnly.
   *
   * @generated from field: topodata.CellInfo cell_info = 3;
   */
  cellInfo?: CellInfoJson;
};

/**
 * Describes the message vtadmin.ClusterCellInfo.
 * Use `create(ClusterCellInfoSchema)` to create a new message.
 */
export const ClusterCellInfoSchema: GenMessage<ClusterCellInfo, ClusterCellInfoJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 3);

/**
 * @generated from message vtadmin.ClusterShardReplicationPosition
 */
export type ClusterShardReplicationPosition = Message<"vtadmin.ClusterShardReplicationPosition"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;

  /**
   * @generated from field: vtctldata.ShardReplicationPositionsResponse position_info = 4;
   */
  positionInfo?: ShardReplicationPositionsResponse;
};

/**
 * @generated from message vtadmin.ClusterShardReplicationPosition
 */
export type ClusterShardReplicationPositionJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;

  /**
   * @generated from field: vtctldata.ShardReplicationPositionsResponse position_info = 4;
   */
  positionInfo?: ShardReplicationPositionsResponseJson;
};

/**
 * Describes the message vtadmin.ClusterShardReplicationPosition.
 * Use `create(ClusterShardReplicationPositionSchema)` to create a new message.
 */
export const ClusterShardReplicationPositionSchema: GenMessage<ClusterShardReplicationPosition, ClusterShardReplicationPositionJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 4);

/**
 * @generated from message vtadmin.ClusterWorkflows
 */
export type ClusterWorkflows = Message<"vtadmin.ClusterWorkflows"> & {
  /**
   * @generated from field: repeated vtadmin.Workflow workflows = 1;
   */
  workflows: Workflow[];

  /**
   * Warnings is a list of non-fatal errors encountered when fetching
   * workflows for a particular cluster.
   *
   * @generated from field: repeated string warnings = 2;
   */
  warnings: string[];
};

/**
 * @generated from message vtadmin.ClusterWorkflows
 */
export type ClusterWorkflowsJson = {
  /**
   * @generated from field: repeated vtadmin.Workflow workflows = 1;
   */
  workflows?: WorkflowJson[];

  /**
   * Warnings is a list of non-fatal errors encountered when fetching
   * workflows for a particular cluster.
   *
   * @generated from field: repeated string warnings = 2;
   */
  warnings?: string[];
};

/**
 * Describes the message vtadmin.ClusterWorkflows.
 * Use `create(ClusterWorkflowsSchema)` to create a new message.
 */
export const ClusterWorkflowsSchema: GenMessage<ClusterWorkflows, ClusterWorkflowsJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 5);

/**
 * Keyspace represents information about a keyspace in a particular Vitess
 * cluster.
 *
 * @generated from message vtadmin.Keyspace
 */
export type Keyspace = Message<"vtadmin.Keyspace"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: vtctldata.Keyspace keyspace = 2;
   */
  keyspace?: Keyspace$1;

  /**
   * @generated from field: map<string, vtctldata.Shard> shards = 3;
   */
  shards: { [key: string]: Shard$1 };
};

/**
 * Keyspace represents information about a keyspace in a particular Vitess
 * cluster.
 *
 * @generated from message vtadmin.Keyspace
 */
export type KeyspaceJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: vtctldata.Keyspace keyspace = 2;
   */
  keyspace?: KeyspaceJson$1;

  /**
   * @generated from field: map<string, vtctldata.Shard> shards = 3;
   */
  shards?: { [key: string]: ShardJson$1 };
};

/**
 * Describes the message vtadmin.Keyspace.
 * Use `create(KeyspaceSchema)` to create a new message.
 */
export const KeyspaceSchema: GenMessage<Keyspace, KeyspaceJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 6);

/**
 * @generated from message vtadmin.Schema
 */
export type Schema = Message<"vtadmin.Schema"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: repeated tabletmanagerdata.TableDefinition table_definitions = 3;
   */
  tableDefinitions: TableDefinition[];

  /**
   * TableSizes is a mapping of table name to TableSize information.
   *
   * @generated from field: map<string, vtadmin.Schema.TableSize> table_sizes = 4;
   */
  tableSizes: { [key: string]: Schema_TableSize };
};

/**
 * @generated from message vtadmin.Schema
 */
export type SchemaJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: repeated tabletmanagerdata.TableDefinition table_definitions = 3;
   */
  tableDefinitions?: TableDefinitionJson[];

  /**
   * TableSizes is a mapping of table name to TableSize information.
   *
   * @generated from field: map<string, vtadmin.Schema.TableSize> table_sizes = 4;
   */
  tableSizes?: { [key: string]: Schema_TableSizeJson };
};

/**
 * Describes the message vtadmin.Schema.
 * Use `create(SchemaSchema)` to create a new message.
 */
export const SchemaSchema: GenMessage<Schema, SchemaJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 7);

/**
 * @generated from message vtadmin.Schema.ShardTableSize
 */
export type Schema_ShardTableSize = Message<"vtadmin.Schema.ShardTableSize"> & {
  /**
   * @generated from field: uint64 row_count = 1;
   */
  rowCount: bigint;

  /**
   * @generated from field: uint64 data_length = 2;
   */
  dataLength: bigint;
};

/**
 * @generated from message vtadmin.Schema.ShardTableSize
 */
export type Schema_ShardTableSizeJson = {
  /**
   * @generated from field: uint64 row_count = 1;
   */
  rowCount?: string;

  /**
   * @generated from field: uint64 data_length = 2;
   */
  dataLength?: string;
};

/**
 * Describes the message vtadmin.Schema.ShardTableSize.
 * Use `create(Schema_ShardTableSizeSchema)` to create a new message.
 */
export const Schema_ShardTableSizeSchema: GenMessage<Schema_ShardTableSize, Schema_ShardTableSizeJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 7, 0);

/**
 * TableSize aggregates table size information across all shards containing
 * in the given keyspace and cluster, as well as per-shard size information.
 *
 * @generated from message vtadmin.Schema.TableSize
 */
export type Schema_TableSize = Message<"vtadmin.Schema.TableSize"> & {
  /**
   * @generated from field: uint64 row_count = 1;
   */
  rowCount: bigint;

  /**
   * @generated from field: uint64 data_length = 2;
   */
  dataLength: bigint;

  /**
   * @generated from field: map<string, vtadmin.Schema.ShardTableSize> by_shard = 3;
   */
  byShard: { [key: string]: Schema_ShardTableSize };
};

/**
 * TableSize aggregates table size information across all shards containing
 * in the given keyspace and cluster, as well as per-shard size information.
 *
 * @generated from message vtadmin.Schema.TableSize
 */
export type Schema_TableSizeJson = {
  /**
   * @generated from field: uint64 row_count = 1;
   */
  rowCount?: string;

  /**
   * @generated from field: uint64 data_length = 2;
   */
  dataLength?: string;

  /**
   * @generated from field: map<string, vtadmin.Schema.ShardTableSize> by_shard = 3;
   */
  byShard?: { [key: string]: Schema_ShardTableSizeJson };
};

/**
 * Describes the message vtadmin.Schema.TableSize.
 * Use `create(Schema_TableSizeSchema)` to create a new message.
 */
export const Schema_TableSizeSchema: GenMessage<Schema_TableSize, Schema_TableSizeJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 7, 1);

/**
 * @generated from message vtadmin.SchemaMigration
 */
export type SchemaMigration = Message<"vtadmin.SchemaMigration"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: vtctldata.SchemaMigration schema_migration = 2;
   */
  schemaMigration?: SchemaMigration$1;
};

/**
 * @generated from message vtadmin.SchemaMigration
 */
export type SchemaMigrationJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: vtctldata.SchemaMigration schema_migration = 2;
   */
  schemaMigration?: SchemaMigrationJson$1;
};

/**
 * Describes the message vtadmin.SchemaMigration.
 * Use `create(SchemaMigrationSchema)` to create a new message.
 */
export const SchemaMigrationSchema: GenMessage<SchemaMigration, SchemaMigrationJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 8);

/**
 * Shard groups the vtctldata information about a shard record together with
 * the Vitess cluster it belongs to.
 *
 * @generated from message vtadmin.Shard
 */
export type Shard = Message<"vtadmin.Shard"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: vtctldata.Shard shard = 2;
   */
  shard?: Shard$1;
};

/**
 * Shard groups the vtctldata information about a shard record together with
 * the Vitess cluster it belongs to.
 *
 * @generated from message vtadmin.Shard
 */
export type ShardJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: vtctldata.Shard shard = 2;
   */
  shard?: ShardJson$1;
};

/**
 * Describes the message vtadmin.Shard.
 * Use `create(ShardSchema)` to create a new message.
 */
export const ShardSchema: GenMessage<Shard, ShardJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 9);

/**
 * @generated from message vtadmin.SrvVSchema
 */
export type SrvVSchema = Message<"vtadmin.SrvVSchema"> & {
  /**
   * @generated from field: string cell = 1;
   */
  cell: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;

  /**
   * @generated from field: vschema.SrvVSchema srv_v_schema = 3;
   */
  srvVSchema?: SrvVSchema$1;
};

/**
 * @generated from message vtadmin.SrvVSchema
 */
export type SrvVSchemaJson = {
  /**
   * @generated from field: string cell = 1;
   */
  cell?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: vschema.SrvVSchema srv_v_schema = 3;
   */
  srvVSchema?: SrvVSchemaJson$1;
};

/**
 * Describes the message vtadmin.SrvVSchema.
 * Use `create(SrvVSchemaSchema)` to create a new message.
 */
export const SrvVSchemaSchema: GenMessage<SrvVSchema, SrvVSchemaJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 10);

/**
 * Tablet groups the topo information of a tablet together with the Vitess
 * cluster it belongs to.
 *
 * @generated from message vtadmin.Tablet
 */
export type Tablet = Message<"vtadmin.Tablet"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: topodata.Tablet tablet = 2;
   */
  tablet?: Tablet$1;

  /**
   * @generated from field: vtadmin.Tablet.ServingState state = 3;
   */
  state: Tablet_ServingState;

  /**
   * @generated from field: string FQDN = 4;
   */
  FQDN: string;
};

/**
 * Tablet groups the topo information of a tablet together with the Vitess
 * cluster it belongs to.
 *
 * @generated from message vtadmin.Tablet
 */
export type TabletJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: topodata.Tablet tablet = 2;
   */
  tablet?: TabletJson$1;

  /**
   * @generated from field: vtadmin.Tablet.ServingState state = 3;
   */
  state?: Tablet_ServingStateJson;

  /**
   * @generated from field: string FQDN = 4;
   */
  FQDN?: string;
};

/**
 * Describes the message vtadmin.Tablet.
 * Use `create(TabletSchema)` to create a new message.
 */
export const TabletSchema: GenMessage<Tablet, TabletJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 11);

/**
 * @generated from enum vtadmin.Tablet.ServingState
 */
export enum Tablet_ServingState {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SERVING = 1;
   */
  SERVING = 1,

  /**
   * @generated from enum value: NOT_SERVING = 2;
   */
  NOT_SERVING = 2,
}

/**
 * @generated from enum vtadmin.Tablet.ServingState
 */
export type Tablet_ServingStateJson = "UNKNOWN" | "SERVING" | "NOT_SERVING";

/**
 * Describes the enum vtadmin.Tablet.ServingState.
 */
export const Tablet_ServingStateSchema: GenEnum<Tablet_ServingState, Tablet_ServingStateJson> = /*@__PURE__*/
  enumDesc(file_vtadmin, 11, 0);

/**
 * VSchema represents the vschema for a keyspace in the cluster it belongs to.
 *
 * @generated from message vtadmin.VSchema
 */
export type VSchema = Message<"vtadmin.VSchema"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * Name is the name of the keyspace this VSchema is for.
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: vschema.Keyspace v_schema = 3;
   */
  vSchema?: Keyspace$2;
};

/**
 * VSchema represents the vschema for a keyspace in the cluster it belongs to.
 *
 * @generated from message vtadmin.VSchema
 */
export type VSchemaJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * Name is the name of the keyspace this VSchema is for.
   *
   * @generated from field: string name = 2;
   */
  name?: string;

  /**
   * @generated from field: vschema.Keyspace v_schema = 3;
   */
  vSchema?: KeyspaceJson$2;
};

/**
 * Describes the message vtadmin.VSchema.
 * Use `create(VSchemaSchema)` to create a new message.
 */
export const VSchemaSchema: GenMessage<VSchema, VSchemaJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 12);

/**
 * Vtctld represents information about a single Vtctld host.
 *
 * @generated from message vtadmin.Vtctld
 */
export type Vtctld = Message<"vtadmin.Vtctld"> & {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string FQDN = 3;
   */
  FQDN: string;
};

/**
 * Vtctld represents information about a single Vtctld host.
 *
 * @generated from message vtadmin.Vtctld
 */
export type VtctldJson = {
  /**
   * @generated from field: string hostname = 1;
   */
  hostname?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string FQDN = 3;
   */
  FQDN?: string;
};

/**
 * Describes the message vtadmin.Vtctld.
 * Use `create(VtctldSchema)` to create a new message.
 */
export const VtctldSchema: GenMessage<Vtctld, VtctldJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 13);

/**
 * VTGate represents information about a single VTGate host.
 *
 * @generated from message vtadmin.VTGate
 */
export type VTGate = Message<"vtadmin.VTGate"> & {
  /**
   * Hostname is the shortname of the VTGate.
   *
   * @generated from field: string hostname = 1;
   */
  hostname: string;

  /**
   * Pool is group the VTGate serves queries for. Some deployments segment
   * VTGates into groups or pools, based on the workloads they serve queries
   * for. Use of this field is optional.
   *
   * @generated from field: string pool = 2;
   */
  pool: string;

  /**
   * Cell is the topology cell the VTGate is in.
   *
   * @generated from field: string cell = 3;
   */
  cell: string;

  /**
   * Cluster is the cluster the VTGate serves.
   *
   * @generated from field: vtadmin.Cluster cluster = 4;
   */
  cluster?: Cluster;

  /**
   * Keyspaces is the list of keyspaces-to-watch for the VTGate.
   *
   * @generated from field: repeated string keyspaces = 5;
   */
  keyspaces: string[];

  /**
   * @generated from field: string FQDN = 6;
   */
  FQDN: string;
};

/**
 * VTGate represents information about a single VTGate host.
 *
 * @generated from message vtadmin.VTGate
 */
export type VTGateJson = {
  /**
   * Hostname is the shortname of the VTGate.
   *
   * @generated from field: string hostname = 1;
   */
  hostname?: string;

  /**
   * Pool is group the VTGate serves queries for. Some deployments segment
   * VTGates into groups or pools, based on the workloads they serve queries
   * for. Use of this field is optional.
   *
   * @generated from field: string pool = 2;
   */
  pool?: string;

  /**
   * Cell is the topology cell the VTGate is in.
   *
   * @generated from field: string cell = 3;
   */
  cell?: string;

  /**
   * Cluster is the cluster the VTGate serves.
   *
   * @generated from field: vtadmin.Cluster cluster = 4;
   */
  cluster?: ClusterJson;

  /**
   * Keyspaces is the list of keyspaces-to-watch for the VTGate.
   *
   * @generated from field: repeated string keyspaces = 5;
   */
  keyspaces?: string[];

  /**
   * @generated from field: string FQDN = 6;
   */
  FQDN?: string;
};

/**
 * Describes the message vtadmin.VTGate.
 * Use `create(VTGateSchema)` to create a new message.
 */
export const VTGateSchema: GenMessage<VTGate, VTGateJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 14);

/**
 * @generated from message vtadmin.Workflow
 */
export type Workflow = Message<"vtadmin.Workflow"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: vtctldata.Workflow workflow = 3;
   */
  workflow?: Workflow$1;
};

/**
 * @generated from message vtadmin.Workflow
 */
export type WorkflowJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: vtctldata.Workflow workflow = 3;
   */
  workflow?: WorkflowJson$1;
};

/**
 * Describes the message vtadmin.Workflow.
 * Use `create(WorkflowSchema)` to create a new message.
 */
export const WorkflowSchema: GenMessage<Workflow, WorkflowJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 15);

/**
 * @generated from message vtadmin.ApplySchemaRequest
 */
export type ApplySchemaRequest = Message<"vtadmin.ApplySchemaRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.ApplySchemaRequest request = 2;
   */
  request?: ApplySchemaRequest$1;
};

/**
 * @generated from message vtadmin.ApplySchemaRequest
 */
export type ApplySchemaRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.ApplySchemaRequest request = 2;
   */
  request?: ApplySchemaRequestJson$1;
};

/**
 * Describes the message vtadmin.ApplySchemaRequest.
 * Use `create(ApplySchemaRequestSchema)` to create a new message.
 */
export const ApplySchemaRequestSchema: GenMessage<ApplySchemaRequest, ApplySchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 16);

/**
 * @generated from message vtadmin.CancelSchemaMigrationRequest
 */
export type CancelSchemaMigrationRequest = Message<"vtadmin.CancelSchemaMigrationRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.CancelSchemaMigrationRequest request = 2;
   */
  request?: CancelSchemaMigrationRequest$1;
};

/**
 * @generated from message vtadmin.CancelSchemaMigrationRequest
 */
export type CancelSchemaMigrationRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.CancelSchemaMigrationRequest request = 2;
   */
  request?: CancelSchemaMigrationRequestJson$1;
};

/**
 * Describes the message vtadmin.CancelSchemaMigrationRequest.
 * Use `create(CancelSchemaMigrationRequestSchema)` to create a new message.
 */
export const CancelSchemaMigrationRequestSchema: GenMessage<CancelSchemaMigrationRequest, CancelSchemaMigrationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 17);

/**
 * @generated from message vtadmin.CleanupSchemaMigrationRequest
 */
export type CleanupSchemaMigrationRequest = Message<"vtadmin.CleanupSchemaMigrationRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.CleanupSchemaMigrationRequest request = 2;
   */
  request?: CleanupSchemaMigrationRequest$1;
};

/**
 * @generated from message vtadmin.CleanupSchemaMigrationRequest
 */
export type CleanupSchemaMigrationRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.CleanupSchemaMigrationRequest request = 2;
   */
  request?: CleanupSchemaMigrationRequestJson$1;
};

/**
 * Describes the message vtadmin.CleanupSchemaMigrationRequest.
 * Use `create(CleanupSchemaMigrationRequestSchema)` to create a new message.
 */
export const CleanupSchemaMigrationRequestSchema: GenMessage<CleanupSchemaMigrationRequest, CleanupSchemaMigrationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 18);

/**
 * @generated from message vtadmin.CompleteSchemaMigrationRequest
 */
export type CompleteSchemaMigrationRequest = Message<"vtadmin.CompleteSchemaMigrationRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.CompleteSchemaMigrationRequest request = 2;
   */
  request?: CompleteSchemaMigrationRequest$1;
};

/**
 * @generated from message vtadmin.CompleteSchemaMigrationRequest
 */
export type CompleteSchemaMigrationRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.CompleteSchemaMigrationRequest request = 2;
   */
  request?: CompleteSchemaMigrationRequestJson$1;
};

/**
 * Describes the message vtadmin.CompleteSchemaMigrationRequest.
 * Use `create(CompleteSchemaMigrationRequestSchema)` to create a new message.
 */
export const CompleteSchemaMigrationRequestSchema: GenMessage<CompleteSchemaMigrationRequest, CompleteSchemaMigrationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 19);

/**
 * @generated from message vtadmin.ConcludeTransactionRequest
 */
export type ConcludeTransactionRequest = Message<"vtadmin.ConcludeTransactionRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string dtid = 2;
   */
  dtid: string;
};

/**
 * @generated from message vtadmin.ConcludeTransactionRequest
 */
export type ConcludeTransactionRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string dtid = 2;
   */
  dtid?: string;
};

/**
 * Describes the message vtadmin.ConcludeTransactionRequest.
 * Use `create(ConcludeTransactionRequestSchema)` to create a new message.
 */
export const ConcludeTransactionRequestSchema: GenMessage<ConcludeTransactionRequest, ConcludeTransactionRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 20);

/**
 * @generated from message vtadmin.CreateKeyspaceRequest
 */
export type CreateKeyspaceRequest = Message<"vtadmin.CreateKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.CreateKeyspaceRequest options = 2;
   */
  options?: CreateKeyspaceRequest$1;
};

/**
 * @generated from message vtadmin.CreateKeyspaceRequest
 */
export type CreateKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.CreateKeyspaceRequest options = 2;
   */
  options?: CreateKeyspaceRequestJson$1;
};

/**
 * Describes the message vtadmin.CreateKeyspaceRequest.
 * Use `create(CreateKeyspaceRequestSchema)` to create a new message.
 */
export const CreateKeyspaceRequestSchema: GenMessage<CreateKeyspaceRequest, CreateKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 21);

/**
 * @generated from message vtadmin.CreateKeyspaceResponse
 */
export type CreateKeyspaceResponse = Message<"vtadmin.CreateKeyspaceResponse"> & {
  /**
   * @generated from field: vtadmin.Keyspace keyspace = 1;
   */
  keyspace?: Keyspace;
};

/**
 * @generated from message vtadmin.CreateKeyspaceResponse
 */
export type CreateKeyspaceResponseJson = {
  /**
   * @generated from field: vtadmin.Keyspace keyspace = 1;
   */
  keyspace?: KeyspaceJson;
};

/**
 * Describes the message vtadmin.CreateKeyspaceResponse.
 * Use `create(CreateKeyspaceResponseSchema)` to create a new message.
 */
export const CreateKeyspaceResponseSchema: GenMessage<CreateKeyspaceResponse, CreateKeyspaceResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 22);

/**
 * @generated from message vtadmin.CreateShardRequest
 */
export type CreateShardRequest = Message<"vtadmin.CreateShardRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.CreateShardRequest options = 2;
   */
  options?: CreateShardRequest$1;
};

/**
 * @generated from message vtadmin.CreateShardRequest
 */
export type CreateShardRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.CreateShardRequest options = 2;
   */
  options?: CreateShardRequestJson$1;
};

/**
 * Describes the message vtadmin.CreateShardRequest.
 * Use `create(CreateShardRequestSchema)` to create a new message.
 */
export const CreateShardRequestSchema: GenMessage<CreateShardRequest, CreateShardRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 23);

/**
 * @generated from message vtadmin.DeleteKeyspaceRequest
 */
export type DeleteKeyspaceRequest = Message<"vtadmin.DeleteKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.DeleteKeyspaceRequest options = 2;
   */
  options?: DeleteKeyspaceRequest$1;
};

/**
 * @generated from message vtadmin.DeleteKeyspaceRequest
 */
export type DeleteKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.DeleteKeyspaceRequest options = 2;
   */
  options?: DeleteKeyspaceRequestJson$1;
};

/**
 * Describes the message vtadmin.DeleteKeyspaceRequest.
 * Use `create(DeleteKeyspaceRequestSchema)` to create a new message.
 */
export const DeleteKeyspaceRequestSchema: GenMessage<DeleteKeyspaceRequest, DeleteKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 24);

/**
 * @generated from message vtadmin.DeleteShardsRequest
 */
export type DeleteShardsRequest = Message<"vtadmin.DeleteShardsRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.DeleteShardsRequest options = 2;
   */
  options?: DeleteShardsRequest$1;
};

/**
 * @generated from message vtadmin.DeleteShardsRequest
 */
export type DeleteShardsRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.DeleteShardsRequest options = 2;
   */
  options?: DeleteShardsRequestJson$1;
};

/**
 * Describes the message vtadmin.DeleteShardsRequest.
 * Use `create(DeleteShardsRequestSchema)` to create a new message.
 */
export const DeleteShardsRequestSchema: GenMessage<DeleteShardsRequest, DeleteShardsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 25);

/**
 * @generated from message vtadmin.DeleteTabletRequest
 */
export type DeleteTabletRequest = Message<"vtadmin.DeleteTabletRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];

  /**
   * @generated from field: bool allow_primary = 3;
   */
  allowPrimary: boolean;
};

/**
 * @generated from message vtadmin.DeleteTabletRequest
 */
export type DeleteTabletRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];

  /**
   * @generated from field: bool allow_primary = 3;
   */
  allowPrimary?: boolean;
};

/**
 * Describes the message vtadmin.DeleteTabletRequest.
 * Use `create(DeleteTabletRequestSchema)` to create a new message.
 */
export const DeleteTabletRequestSchema: GenMessage<DeleteTabletRequest, DeleteTabletRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 26);

/**
 * @generated from message vtadmin.DeleteTabletResponse
 */
export type DeleteTabletResponse = Message<"vtadmin.DeleteTabletResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.DeleteTabletResponse
 */
export type DeleteTabletResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.DeleteTabletResponse.
 * Use `create(DeleteTabletResponseSchema)` to create a new message.
 */
export const DeleteTabletResponseSchema: GenMessage<DeleteTabletResponse, DeleteTabletResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 27);

/**
 * @generated from message vtadmin.EmergencyFailoverShardRequest
 */
export type EmergencyFailoverShardRequest = Message<"vtadmin.EmergencyFailoverShardRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.EmergencyReparentShardRequest options = 2;
   */
  options?: EmergencyReparentShardRequest;
};

/**
 * @generated from message vtadmin.EmergencyFailoverShardRequest
 */
export type EmergencyFailoverShardRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.EmergencyReparentShardRequest options = 2;
   */
  options?: EmergencyReparentShardRequestJson;
};

/**
 * Describes the message vtadmin.EmergencyFailoverShardRequest.
 * Use `create(EmergencyFailoverShardRequestSchema)` to create a new message.
 */
export const EmergencyFailoverShardRequestSchema: GenMessage<EmergencyFailoverShardRequest, EmergencyFailoverShardRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 28);

/**
 * @generated from message vtadmin.EmergencyFailoverShardResponse
 */
export type EmergencyFailoverShardResponse = Message<"vtadmin.EmergencyFailoverShardResponse"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;

  /**
   * PromotedPrimary is the tablet alias that was promoted to shard primary.
   * If NewPrimary was set in the request options, then this will be the
   * same tablet alias. Otherwise, it will be the alias of the tablet found
   * to be most up-to-date in the shard.
   *
   * @generated from field: topodata.TabletAlias promoted_primary = 4;
   */
  promotedPrimary?: TabletAlias;

  /**
   * @generated from field: repeated logutil.Event events = 5;
   */
  events: Event[];
};

/**
 * @generated from message vtadmin.EmergencyFailoverShardResponse
 */
export type EmergencyFailoverShardResponseJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;

  /**
   * PromotedPrimary is the tablet alias that was promoted to shard primary.
   * If NewPrimary was set in the request options, then this will be the
   * same tablet alias. Otherwise, it will be the alias of the tablet found
   * to be most up-to-date in the shard.
   *
   * @generated from field: topodata.TabletAlias promoted_primary = 4;
   */
  promotedPrimary?: TabletAliasJson;

  /**
   * @generated from field: repeated logutil.Event events = 5;
   */
  events?: EventJson[];
};

/**
 * Describes the message vtadmin.EmergencyFailoverShardResponse.
 * Use `create(EmergencyFailoverShardResponseSchema)` to create a new message.
 */
export const EmergencyFailoverShardResponseSchema: GenMessage<EmergencyFailoverShardResponse, EmergencyFailoverShardResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 29);

/**
 * @generated from message vtadmin.FindSchemaRequest
 */
export type FindSchemaRequest = Message<"vtadmin.FindSchemaRequest"> & {
  /**
   * @generated from field: string table = 1;
   */
  table: string;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];

  /**
   * @generated from field: vtadmin.GetSchemaTableSizeOptions table_size_options = 3;
   */
  tableSizeOptions?: GetSchemaTableSizeOptions;
};

/**
 * @generated from message vtadmin.FindSchemaRequest
 */
export type FindSchemaRequestJson = {
  /**
   * @generated from field: string table = 1;
   */
  table?: string;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];

  /**
   * @generated from field: vtadmin.GetSchemaTableSizeOptions table_size_options = 3;
   */
  tableSizeOptions?: GetSchemaTableSizeOptionsJson;
};

/**
 * Describes the message vtadmin.FindSchemaRequest.
 * Use `create(FindSchemaRequestSchema)` to create a new message.
 */
export const FindSchemaRequestSchema: GenMessage<FindSchemaRequest, FindSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 30);

/**
 * @generated from message vtadmin.GetBackupsRequest
 */
export type GetBackupsRequest = Message<"vtadmin.GetBackupsRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * Keyspaces, if set, limits backups to just the specified keyspaces.
   * Applies to all clusters in the request.
   *
   * @generated from field: repeated string keyspaces = 2;
   */
  keyspaces: string[];

  /**
   * KeyspaceShards, if set, limits backups to just the specified
   * keyspace/shards. Applies to all clusters in the request.
   *
   * This field takes precedence over Keyspaces. If KeyspaceShards is set,
   * Keyspaces is ignored.
   *
   * @generated from field: repeated string keyspace_shards = 3;
   */
  keyspaceShards: string[];

  /**
   * RequestOptions controls the per-shard request options when making
   * GetBackups requests to vtctlds. Note that the Keyspace and Shard fields
   * of this field are ignored; it is used only to specify Limit and Detailed
   * fields.
   *
   * @generated from field: vtctldata.GetBackupsRequest request_options = 4;
   */
  requestOptions?: GetBackupsRequest$1;
};

/**
 * @generated from message vtadmin.GetBackupsRequest
 */
export type GetBackupsRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * Keyspaces, if set, limits backups to just the specified keyspaces.
   * Applies to all clusters in the request.
   *
   * @generated from field: repeated string keyspaces = 2;
   */
  keyspaces?: string[];

  /**
   * KeyspaceShards, if set, limits backups to just the specified
   * keyspace/shards. Applies to all clusters in the request.
   *
   * This field takes precedence over Keyspaces. If KeyspaceShards is set,
   * Keyspaces is ignored.
   *
   * @generated from field: repeated string keyspace_shards = 3;
   */
  keyspaceShards?: string[];

  /**
   * RequestOptions controls the per-shard request options when making
   * GetBackups requests to vtctlds. Note that the Keyspace and Shard fields
   * of this field are ignored; it is used only to specify Limit and Detailed
   * fields.
   *
   * @generated from field: vtctldata.GetBackupsRequest request_options = 4;
   */
  requestOptions?: GetBackupsRequestJson$1;
};

/**
 * Describes the message vtadmin.GetBackupsRequest.
 * Use `create(GetBackupsRequestSchema)` to create a new message.
 */
export const GetBackupsRequestSchema: GenMessage<GetBackupsRequest, GetBackupsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 31);

/**
 * @generated from message vtadmin.GetBackupsResponse
 */
export type GetBackupsResponse = Message<"vtadmin.GetBackupsResponse"> & {
  /**
   * @generated from field: repeated vtadmin.ClusterBackup backups = 1;
   */
  backups: ClusterBackup[];
};

/**
 * @generated from message vtadmin.GetBackupsResponse
 */
export type GetBackupsResponseJson = {
  /**
   * @generated from field: repeated vtadmin.ClusterBackup backups = 1;
   */
  backups?: ClusterBackupJson[];
};

/**
 * Describes the message vtadmin.GetBackupsResponse.
 * Use `create(GetBackupsResponseSchema)` to create a new message.
 */
export const GetBackupsResponseSchema: GenMessage<GetBackupsResponse, GetBackupsResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 32);

/**
 * @generated from message vtadmin.GetCellInfosRequest
 */
export type GetCellInfosRequest = Message<"vtadmin.GetCellInfosRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * Cells, if specified, limits the response to include only CellInfo objects
   * with those names. If omitted, all CellInfo objects in each cluster are
   * returned.
   *
   * Mutually-exclusive with NamesOnly. If both are set, this field takes
   * precedence.
   *
   * @generated from field: repeated string cells = 2;
   */
  cells: string[];

  /**
   * Return only the cell names in each cluster; the actual CellInfo objects
   * will be empty.
   *
   * @generated from field: bool names_only = 3;
   */
  namesOnly: boolean;
};

/**
 * @generated from message vtadmin.GetCellInfosRequest
 */
export type GetCellInfosRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * Cells, if specified, limits the response to include only CellInfo objects
   * with those names. If omitted, all CellInfo objects in each cluster are
   * returned.
   *
   * Mutually-exclusive with NamesOnly. If both are set, this field takes
   * precedence.
   *
   * @generated from field: repeated string cells = 2;
   */
  cells?: string[];

  /**
   * Return only the cell names in each cluster; the actual CellInfo objects
   * will be empty.
   *
   * @generated from field: bool names_only = 3;
   */
  namesOnly?: boolean;
};

/**
 * Describes the message vtadmin.GetCellInfosRequest.
 * Use `create(GetCellInfosRequestSchema)` to create a new message.
 */
export const GetCellInfosRequestSchema: GenMessage<GetCellInfosRequest, GetCellInfosRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 33);

/**
 * @generated from message vtadmin.GetCellInfosResponse
 */
export type GetCellInfosResponse = Message<"vtadmin.GetCellInfosResponse"> & {
  /**
   * @generated from field: repeated vtadmin.ClusterCellInfo cell_infos = 1;
   */
  cellInfos: ClusterCellInfo[];
};

/**
 * @generated from message vtadmin.GetCellInfosResponse
 */
export type GetCellInfosResponseJson = {
  /**
   * @generated from field: repeated vtadmin.ClusterCellInfo cell_infos = 1;
   */
  cellInfos?: ClusterCellInfoJson[];
};

/**
 * Describes the message vtadmin.GetCellInfosResponse.
 * Use `create(GetCellInfosResponseSchema)` to create a new message.
 */
export const GetCellInfosResponseSchema: GenMessage<GetCellInfosResponse, GetCellInfosResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 34);

/**
 * @generated from message vtadmin.GetCellsAliasesRequest
 */
export type GetCellsAliasesRequest = Message<"vtadmin.GetCellsAliasesRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetCellsAliasesRequest
 */
export type GetCellsAliasesRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetCellsAliasesRequest.
 * Use `create(GetCellsAliasesRequestSchema)` to create a new message.
 */
export const GetCellsAliasesRequestSchema: GenMessage<GetCellsAliasesRequest, GetCellsAliasesRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 35);

/**
 * @generated from message vtadmin.GetCellsAliasesResponse
 */
export type GetCellsAliasesResponse = Message<"vtadmin.GetCellsAliasesResponse"> & {
  /**
   * @generated from field: repeated vtadmin.ClusterCellsAliases aliases = 1;
   */
  aliases: ClusterCellsAliases[];
};

/**
 * @generated from message vtadmin.GetCellsAliasesResponse
 */
export type GetCellsAliasesResponseJson = {
  /**
   * @generated from field: repeated vtadmin.ClusterCellsAliases aliases = 1;
   */
  aliases?: ClusterCellsAliasesJson[];
};

/**
 * Describes the message vtadmin.GetCellsAliasesResponse.
 * Use `create(GetCellsAliasesResponseSchema)` to create a new message.
 */
export const GetCellsAliasesResponseSchema: GenMessage<GetCellsAliasesResponse, GetCellsAliasesResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 36);

/**
 * @generated from message vtadmin.GetClustersRequest
 */
export type GetClustersRequest = Message<"vtadmin.GetClustersRequest"> & {
};

/**
 * @generated from message vtadmin.GetClustersRequest
 */
export type GetClustersRequestJson = {
};

/**
 * Describes the message vtadmin.GetClustersRequest.
 * Use `create(GetClustersRequestSchema)` to create a new message.
 */
export const GetClustersRequestSchema: GenMessage<GetClustersRequest, GetClustersRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 37);

/**
 * @generated from message vtadmin.GetClustersResponse
 */
export type GetClustersResponse = Message<"vtadmin.GetClustersResponse"> & {
  /**
   * @generated from field: repeated vtadmin.Cluster clusters = 1;
   */
  clusters: Cluster[];
};

/**
 * @generated from message vtadmin.GetClustersResponse
 */
export type GetClustersResponseJson = {
  /**
   * @generated from field: repeated vtadmin.Cluster clusters = 1;
   */
  clusters?: ClusterJson[];
};

/**
 * Describes the message vtadmin.GetClustersResponse.
 * Use `create(GetClustersResponseSchema)` to create a new message.
 */
export const GetClustersResponseSchema: GenMessage<GetClustersResponse, GetClustersResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 38);

/**
 * @generated from message vtadmin.GetFullStatusRequest
 */
export type GetFullStatusRequest = Message<"vtadmin.GetFullStatusRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: topodata.TabletAlias alias = 2;
   */
  alias?: TabletAlias;
};

/**
 * @generated from message vtadmin.GetFullStatusRequest
 */
export type GetFullStatusRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: topodata.TabletAlias alias = 2;
   */
  alias?: TabletAliasJson;
};

/**
 * Describes the message vtadmin.GetFullStatusRequest.
 * Use `create(GetFullStatusRequestSchema)` to create a new message.
 */
export const GetFullStatusRequestSchema: GenMessage<GetFullStatusRequest, GetFullStatusRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 39);

/**
 * @generated from message vtadmin.GetGatesRequest
 */
export type GetGatesRequest = Message<"vtadmin.GetGatesRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetGatesRequest
 */
export type GetGatesRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetGatesRequest.
 * Use `create(GetGatesRequestSchema)` to create a new message.
 */
export const GetGatesRequestSchema: GenMessage<GetGatesRequest, GetGatesRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 40);

/**
 * @generated from message vtadmin.GetGatesResponse
 */
export type GetGatesResponse = Message<"vtadmin.GetGatesResponse"> & {
  /**
   * @generated from field: repeated vtadmin.VTGate gates = 1;
   */
  gates: VTGate[];
};

/**
 * @generated from message vtadmin.GetGatesResponse
 */
export type GetGatesResponseJson = {
  /**
   * @generated from field: repeated vtadmin.VTGate gates = 1;
   */
  gates?: VTGateJson[];
};

/**
 * Describes the message vtadmin.GetGatesResponse.
 * Use `create(GetGatesResponseSchema)` to create a new message.
 */
export const GetGatesResponseSchema: GenMessage<GetGatesResponse, GetGatesResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 41);

/**
 * @generated from message vtadmin.GetKeyspaceRequest
 */
export type GetKeyspaceRequest = Message<"vtadmin.GetKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;
};

/**
 * @generated from message vtadmin.GetKeyspaceRequest
 */
export type GetKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;
};

/**
 * Describes the message vtadmin.GetKeyspaceRequest.
 * Use `create(GetKeyspaceRequestSchema)` to create a new message.
 */
export const GetKeyspaceRequestSchema: GenMessage<GetKeyspaceRequest, GetKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 42);

/**
 * @generated from message vtadmin.GetKeyspacesRequest
 */
export type GetKeyspacesRequest = Message<"vtadmin.GetKeyspacesRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetKeyspacesRequest
 */
export type GetKeyspacesRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetKeyspacesRequest.
 * Use `create(GetKeyspacesRequestSchema)` to create a new message.
 */
export const GetKeyspacesRequestSchema: GenMessage<GetKeyspacesRequest, GetKeyspacesRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 43);

/**
 * @generated from message vtadmin.GetKeyspacesResponse
 */
export type GetKeyspacesResponse = Message<"vtadmin.GetKeyspacesResponse"> & {
  /**
   * @generated from field: repeated vtadmin.Keyspace keyspaces = 1;
   */
  keyspaces: Keyspace[];
};

/**
 * @generated from message vtadmin.GetKeyspacesResponse
 */
export type GetKeyspacesResponseJson = {
  /**
   * @generated from field: repeated vtadmin.Keyspace keyspaces = 1;
   */
  keyspaces?: KeyspaceJson[];
};

/**
 * Describes the message vtadmin.GetKeyspacesResponse.
 * Use `create(GetKeyspacesResponseSchema)` to create a new message.
 */
export const GetKeyspacesResponseSchema: GenMessage<GetKeyspacesResponse, GetKeyspacesResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 44);

/**
 * @generated from message vtadmin.GetSchemaRequest
 */
export type GetSchemaRequest = Message<"vtadmin.GetSchemaRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string table = 3;
   */
  table: string;

  /**
   * @generated from field: vtadmin.GetSchemaTableSizeOptions table_size_options = 4;
   */
  tableSizeOptions?: GetSchemaTableSizeOptions;
};

/**
 * @generated from message vtadmin.GetSchemaRequest
 */
export type GetSchemaRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string table = 3;
   */
  table?: string;

  /**
   * @generated from field: vtadmin.GetSchemaTableSizeOptions table_size_options = 4;
   */
  tableSizeOptions?: GetSchemaTableSizeOptionsJson;
};

/**
 * Describes the message vtadmin.GetSchemaRequest.
 * Use `create(GetSchemaRequestSchema)` to create a new message.
 */
export const GetSchemaRequestSchema: GenMessage<GetSchemaRequest, GetSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 45);

/**
 * @generated from message vtadmin.GetSchemasRequest
 */
export type GetSchemasRequest = Message<"vtadmin.GetSchemasRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * @generated from field: vtadmin.GetSchemaTableSizeOptions table_size_options = 2;
   */
  tableSizeOptions?: GetSchemaTableSizeOptions;
};

/**
 * @generated from message vtadmin.GetSchemasRequest
 */
export type GetSchemasRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * @generated from field: vtadmin.GetSchemaTableSizeOptions table_size_options = 2;
   */
  tableSizeOptions?: GetSchemaTableSizeOptionsJson;
};

/**
 * Describes the message vtadmin.GetSchemasRequest.
 * Use `create(GetSchemasRequestSchema)` to create a new message.
 */
export const GetSchemasRequestSchema: GenMessage<GetSchemasRequest, GetSchemasRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 46);

/**
 * @generated from message vtadmin.GetSchemasResponse
 */
export type GetSchemasResponse = Message<"vtadmin.GetSchemasResponse"> & {
  /**
   * @generated from field: repeated vtadmin.Schema schemas = 1;
   */
  schemas: Schema[];
};

/**
 * @generated from message vtadmin.GetSchemasResponse
 */
export type GetSchemasResponseJson = {
  /**
   * @generated from field: repeated vtadmin.Schema schemas = 1;
   */
  schemas?: SchemaJson[];
};

/**
 * Describes the message vtadmin.GetSchemasResponse.
 * Use `create(GetSchemasResponseSchema)` to create a new message.
 */
export const GetSchemasResponseSchema: GenMessage<GetSchemasResponse, GetSchemasResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 47);

/**
 * @generated from message vtadmin.GetSchemaMigrationsRequest
 */
export type GetSchemaMigrationsRequest = Message<"vtadmin.GetSchemaMigrationsRequest"> & {
  /**
   * @generated from field: repeated vtadmin.GetSchemaMigrationsRequest.ClusterRequest cluster_requests = 1;
   */
  clusterRequests: GetSchemaMigrationsRequest_ClusterRequest[];
};

/**
 * @generated from message vtadmin.GetSchemaMigrationsRequest
 */
export type GetSchemaMigrationsRequestJson = {
  /**
   * @generated from field: repeated vtadmin.GetSchemaMigrationsRequest.ClusterRequest cluster_requests = 1;
   */
  clusterRequests?: GetSchemaMigrationsRequest_ClusterRequestJson[];
};

/**
 * Describes the message vtadmin.GetSchemaMigrationsRequest.
 * Use `create(GetSchemaMigrationsRequestSchema)` to create a new message.
 */
export const GetSchemaMigrationsRequestSchema: GenMessage<GetSchemaMigrationsRequest, GetSchemaMigrationsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 48);

/**
 * @generated from message vtadmin.GetSchemaMigrationsRequest.ClusterRequest
 */
export type GetSchemaMigrationsRequest_ClusterRequest = Message<"vtadmin.GetSchemaMigrationsRequest.ClusterRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.GetSchemaMigrationsRequest request = 2;
   */
  request?: GetSchemaMigrationsRequest$1;
};

/**
 * @generated from message vtadmin.GetSchemaMigrationsRequest.ClusterRequest
 */
export type GetSchemaMigrationsRequest_ClusterRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.GetSchemaMigrationsRequest request = 2;
   */
  request?: GetSchemaMigrationsRequestJson$1;
};

/**
 * Describes the message vtadmin.GetSchemaMigrationsRequest.ClusterRequest.
 * Use `create(GetSchemaMigrationsRequest_ClusterRequestSchema)` to create a new message.
 */
export const GetSchemaMigrationsRequest_ClusterRequestSchema: GenMessage<GetSchemaMigrationsRequest_ClusterRequest, GetSchemaMigrationsRequest_ClusterRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 48, 0);

/**
 * @generated from message vtadmin.GetSchemaMigrationsResponse
 */
export type GetSchemaMigrationsResponse = Message<"vtadmin.GetSchemaMigrationsResponse"> & {
  /**
   * @generated from field: repeated vtadmin.SchemaMigration schema_migrations = 1;
   */
  schemaMigrations: SchemaMigration[];
};

/**
 * @generated from message vtadmin.GetSchemaMigrationsResponse
 */
export type GetSchemaMigrationsResponseJson = {
  /**
   * @generated from field: repeated vtadmin.SchemaMigration schema_migrations = 1;
   */
  schemaMigrations?: SchemaMigrationJson[];
};

/**
 * Describes the message vtadmin.GetSchemaMigrationsResponse.
 * Use `create(GetSchemaMigrationsResponseSchema)` to create a new message.
 */
export const GetSchemaMigrationsResponseSchema: GenMessage<GetSchemaMigrationsResponse, GetSchemaMigrationsResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 49);

/**
 * @generated from message vtadmin.GetShardReplicationPositionsRequest
 */
export type GetShardReplicationPositionsRequest = Message<"vtadmin.GetShardReplicationPositionsRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * Keyspaces, if set, limits replication positions to just the specified
   * keyspaces. Applies to all clusters in the request.
   *
   * @generated from field: repeated string keyspaces = 2;
   */
  keyspaces: string[];

  /**
   * KeyspaceShards, if set, limits replicatin positions to just the specified
   * keyspace/shards. Applies to all clusters in the request.
   *
   * This field takes precedence over Keyspaces. If KeyspaceShards is set,
   * Keyspaces is ignored.
   *
   * @generated from field: repeated string keyspace_shards = 3;
   */
  keyspaceShards: string[];
};

/**
 * @generated from message vtadmin.GetShardReplicationPositionsRequest
 */
export type GetShardReplicationPositionsRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * Keyspaces, if set, limits replication positions to just the specified
   * keyspaces. Applies to all clusters in the request.
   *
   * @generated from field: repeated string keyspaces = 2;
   */
  keyspaces?: string[];

  /**
   * KeyspaceShards, if set, limits replicatin positions to just the specified
   * keyspace/shards. Applies to all clusters in the request.
   *
   * This field takes precedence over Keyspaces. If KeyspaceShards is set,
   * Keyspaces is ignored.
   *
   * @generated from field: repeated string keyspace_shards = 3;
   */
  keyspaceShards?: string[];
};

/**
 * Describes the message vtadmin.GetShardReplicationPositionsRequest.
 * Use `create(GetShardReplicationPositionsRequestSchema)` to create a new message.
 */
export const GetShardReplicationPositionsRequestSchema: GenMessage<GetShardReplicationPositionsRequest, GetShardReplicationPositionsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 50);

/**
 * @generated from message vtadmin.GetShardReplicationPositionsResponse
 */
export type GetShardReplicationPositionsResponse = Message<"vtadmin.GetShardReplicationPositionsResponse"> & {
  /**
   * @generated from field: repeated vtadmin.ClusterShardReplicationPosition replication_positions = 1;
   */
  replicationPositions: ClusterShardReplicationPosition[];
};

/**
 * @generated from message vtadmin.GetShardReplicationPositionsResponse
 */
export type GetShardReplicationPositionsResponseJson = {
  /**
   * @generated from field: repeated vtadmin.ClusterShardReplicationPosition replication_positions = 1;
   */
  replicationPositions?: ClusterShardReplicationPositionJson[];
};

/**
 * Describes the message vtadmin.GetShardReplicationPositionsResponse.
 * Use `create(GetShardReplicationPositionsResponseSchema)` to create a new message.
 */
export const GetShardReplicationPositionsResponseSchema: GenMessage<GetShardReplicationPositionsResponse, GetShardReplicationPositionsResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 51);

/**
 * @generated from message vtadmin.GetSrvKeyspaceRequest
 */
export type GetSrvKeyspaceRequest = Message<"vtadmin.GetSrvKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
   * equivalent to specifying all cells in the topo.
   *
   * @generated from field: repeated string cells = 3;
   */
  cells: string[];
};

/**
 * @generated from message vtadmin.GetSrvKeyspaceRequest
 */
export type GetSrvKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
   * equivalent to specifying all cells in the topo.
   *
   * @generated from field: repeated string cells = 3;
   */
  cells?: string[];
};

/**
 * Describes the message vtadmin.GetSrvKeyspaceRequest.
 * Use `create(GetSrvKeyspaceRequestSchema)` to create a new message.
 */
export const GetSrvKeyspaceRequestSchema: GenMessage<GetSrvKeyspaceRequest, GetSrvKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 52);

/**
 * @generated from message vtadmin.GetSrvKeyspacesRequest
 */
export type GetSrvKeyspacesRequest = Message<"vtadmin.GetSrvKeyspacesRequest"> & {
  /**
   * An optional list of cluster IDs to filter specific clusters
   *
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
   * equivalent to specifying all cells in the topo.
   *
   * @generated from field: repeated string cells = 2;
   */
  cells: string[];
};

/**
 * @generated from message vtadmin.GetSrvKeyspacesRequest
 */
export type GetSrvKeyspacesRequestJson = {
  /**
   * An optional list of cluster IDs to filter specific clusters
   *
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * Cells is a list of cells to lookup a SrvKeyspace for. Leaving this empty is
   * equivalent to specifying all cells in the topo.
   *
   * @generated from field: repeated string cells = 2;
   */
  cells?: string[];
};

/**
 * Describes the message vtadmin.GetSrvKeyspacesRequest.
 * Use `create(GetSrvKeyspacesRequestSchema)` to create a new message.
 */
export const GetSrvKeyspacesRequestSchema: GenMessage<GetSrvKeyspacesRequest, GetSrvKeyspacesRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 53);

/**
 * @generated from message vtadmin.GetSrvKeyspacesResponse
 */
export type GetSrvKeyspacesResponse = Message<"vtadmin.GetSrvKeyspacesResponse"> & {
  /**
   * GetSrvKeyspaces responses for each keyspace
   *
   * @generated from field: map<string, vtctldata.GetSrvKeyspacesResponse> srv_keyspaces = 1;
   */
  srvKeyspaces: { [key: string]: GetSrvKeyspacesResponse$1 };
};

/**
 * @generated from message vtadmin.GetSrvKeyspacesResponse
 */
export type GetSrvKeyspacesResponseJson = {
  /**
   * GetSrvKeyspaces responses for each keyspace
   *
   * @generated from field: map<string, vtctldata.GetSrvKeyspacesResponse> srv_keyspaces = 1;
   */
  srvKeyspaces?: { [key: string]: GetSrvKeyspacesResponseJson$1 };
};

/**
 * Describes the message vtadmin.GetSrvKeyspacesResponse.
 * Use `create(GetSrvKeyspacesResponseSchema)` to create a new message.
 */
export const GetSrvKeyspacesResponseSchema: GenMessage<GetSrvKeyspacesResponse, GetSrvKeyspacesResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 54);

/**
 * @generated from message vtadmin.GetSrvVSchemaRequest
 */
export type GetSrvVSchemaRequest = Message<"vtadmin.GetSrvVSchemaRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string cell = 2;
   */
  cell: string;
};

/**
 * @generated from message vtadmin.GetSrvVSchemaRequest
 */
export type GetSrvVSchemaRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string cell = 2;
   */
  cell?: string;
};

/**
 * Describes the message vtadmin.GetSrvVSchemaRequest.
 * Use `create(GetSrvVSchemaRequestSchema)` to create a new message.
 */
export const GetSrvVSchemaRequestSchema: GenMessage<GetSrvVSchemaRequest, GetSrvVSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 55);

/**
 * @generated from message vtadmin.GetSrvVSchemasRequest
 */
export type GetSrvVSchemasRequest = Message<"vtadmin.GetSrvVSchemasRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * @generated from field: repeated string cells = 2;
   */
  cells: string[];
};

/**
 * @generated from message vtadmin.GetSrvVSchemasRequest
 */
export type GetSrvVSchemasRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * @generated from field: repeated string cells = 2;
   */
  cells?: string[];
};

/**
 * Describes the message vtadmin.GetSrvVSchemasRequest.
 * Use `create(GetSrvVSchemasRequestSchema)` to create a new message.
 */
export const GetSrvVSchemasRequestSchema: GenMessage<GetSrvVSchemasRequest, GetSrvVSchemasRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 56);

/**
 * @generated from message vtadmin.GetSrvVSchemasResponse
 */
export type GetSrvVSchemasResponse = Message<"vtadmin.GetSrvVSchemasResponse"> & {
  /**
   * @generated from field: repeated vtadmin.SrvVSchema srv_v_schemas = 1;
   */
  srvVSchemas: SrvVSchema[];
};

/**
 * @generated from message vtadmin.GetSrvVSchemasResponse
 */
export type GetSrvVSchemasResponseJson = {
  /**
   * @generated from field: repeated vtadmin.SrvVSchema srv_v_schemas = 1;
   */
  srvVSchemas?: SrvVSchemaJson[];
};

/**
 * Describes the message vtadmin.GetSrvVSchemasResponse.
 * Use `create(GetSrvVSchemasResponseSchema)` to create a new message.
 */
export const GetSrvVSchemasResponseSchema: GenMessage<GetSrvVSchemasResponse, GetSrvVSchemasResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 57);

/**
 * @generated from message vtadmin.GetSchemaTableSizeOptions
 */
export type GetSchemaTableSizeOptions = Message<"vtadmin.GetSchemaTableSizeOptions"> & {
  /**
   * @generated from field: bool aggregate_sizes = 1;
   */
  aggregateSizes: boolean;

  /**
   * @generated from field: bool include_non_serving_shards = 2;
   */
  includeNonServingShards: boolean;
};

/**
 * @generated from message vtadmin.GetSchemaTableSizeOptions
 */
export type GetSchemaTableSizeOptionsJson = {
  /**
   * @generated from field: bool aggregate_sizes = 1;
   */
  aggregateSizes?: boolean;

  /**
   * @generated from field: bool include_non_serving_shards = 2;
   */
  includeNonServingShards?: boolean;
};

/**
 * Describes the message vtadmin.GetSchemaTableSizeOptions.
 * Use `create(GetSchemaTableSizeOptionsSchema)` to create a new message.
 */
export const GetSchemaTableSizeOptionsSchema: GenMessage<GetSchemaTableSizeOptions, GetSchemaTableSizeOptionsJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 58);

/**
 * @generated from message vtadmin.GetTabletRequest
 */
export type GetTabletRequest = Message<"vtadmin.GetTabletRequest"> & {
  /**
   * Unique (per cluster) tablet alias.
   *
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * ClusterIDs is an optional parameter to narrow the scope of the search, if
   * the caller knows which cluster the tablet may be in, or, to disambiguate
   * if multiple clusters have a tablet with the same hostname.
   *
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetTabletRequest
 */
export type GetTabletRequestJson = {
  /**
   * Unique (per cluster) tablet alias.
   *
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * ClusterIDs is an optional parameter to narrow the scope of the search, if
   * the caller knows which cluster the tablet may be in, or, to disambiguate
   * if multiple clusters have a tablet with the same hostname.
   *
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetTabletRequest.
 * Use `create(GetTabletRequestSchema)` to create a new message.
 */
export const GetTabletRequestSchema: GenMessage<GetTabletRequest, GetTabletRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 59);

/**
 * @generated from message vtadmin.GetTabletsRequest
 */
export type GetTabletsRequest = Message<"vtadmin.GetTabletsRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetTabletsRequest
 */
export type GetTabletsRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetTabletsRequest.
 * Use `create(GetTabletsRequestSchema)` to create a new message.
 */
export const GetTabletsRequestSchema: GenMessage<GetTabletsRequest, GetTabletsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 60);

/**
 * @generated from message vtadmin.GetTabletsResponse
 */
export type GetTabletsResponse = Message<"vtadmin.GetTabletsResponse"> & {
  /**
   * @generated from field: repeated vtadmin.Tablet tablets = 1;
   */
  tablets: Tablet[];
};

/**
 * @generated from message vtadmin.GetTabletsResponse
 */
export type GetTabletsResponseJson = {
  /**
   * @generated from field: repeated vtadmin.Tablet tablets = 1;
   */
  tablets?: TabletJson[];
};

/**
 * Describes the message vtadmin.GetTabletsResponse.
 * Use `create(GetTabletsResponseSchema)` to create a new message.
 */
export const GetTabletsResponseSchema: GenMessage<GetTabletsResponse, GetTabletsResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 61);

/**
 * @generated from message vtadmin.GetTopologyPathRequest
 */
export type GetTopologyPathRequest = Message<"vtadmin.GetTopologyPathRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string path = 2;
   */
  path: string;
};

/**
 * @generated from message vtadmin.GetTopologyPathRequest
 */
export type GetTopologyPathRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string path = 2;
   */
  path?: string;
};

/**
 * Describes the message vtadmin.GetTopologyPathRequest.
 * Use `create(GetTopologyPathRequestSchema)` to create a new message.
 */
export const GetTopologyPathRequestSchema: GenMessage<GetTopologyPathRequest, GetTopologyPathRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 62);

/**
 * @generated from message vtadmin.GetUnresolvedTransactionsRequest
 */
export type GetUnresolvedTransactionsRequest = Message<"vtadmin.GetUnresolvedTransactionsRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: int64 abandon_age = 3;
   */
  abandonAge: bigint;
};

/**
 * @generated from message vtadmin.GetUnresolvedTransactionsRequest
 */
export type GetUnresolvedTransactionsRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: int64 abandon_age = 3;
   */
  abandonAge?: string;
};

/**
 * Describes the message vtadmin.GetUnresolvedTransactionsRequest.
 * Use `create(GetUnresolvedTransactionsRequestSchema)` to create a new message.
 */
export const GetUnresolvedTransactionsRequestSchema: GenMessage<GetUnresolvedTransactionsRequest, GetUnresolvedTransactionsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 63);

/**
 * @generated from message vtadmin.GetVSchemaRequest
 */
export type GetVSchemaRequest = Message<"vtadmin.GetVSchemaRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;
};

/**
 * @generated from message vtadmin.GetVSchemaRequest
 */
export type GetVSchemaRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;
};

/**
 * Describes the message vtadmin.GetVSchemaRequest.
 * Use `create(GetVSchemaRequestSchema)` to create a new message.
 */
export const GetVSchemaRequestSchema: GenMessage<GetVSchemaRequest, GetVSchemaRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 64);

/**
 * @generated from message vtadmin.GetVSchemasRequest
 */
export type GetVSchemasRequest = Message<"vtadmin.GetVSchemasRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetVSchemasRequest
 */
export type GetVSchemasRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetVSchemasRequest.
 * Use `create(GetVSchemasRequestSchema)` to create a new message.
 */
export const GetVSchemasRequestSchema: GenMessage<GetVSchemasRequest, GetVSchemasRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 65);

/**
 * @generated from message vtadmin.GetVSchemasResponse
 */
export type GetVSchemasResponse = Message<"vtadmin.GetVSchemasResponse"> & {
  /**
   * @generated from field: repeated vtadmin.VSchema v_schemas = 1;
   */
  vSchemas: VSchema[];
};

/**
 * @generated from message vtadmin.GetVSchemasResponse
 */
export type GetVSchemasResponseJson = {
  /**
   * @generated from field: repeated vtadmin.VSchema v_schemas = 1;
   */
  vSchemas?: VSchemaJson[];
};

/**
 * Describes the message vtadmin.GetVSchemasResponse.
 * Use `create(GetVSchemasResponseSchema)` to create a new message.
 */
export const GetVSchemasResponseSchema: GenMessage<GetVSchemasResponse, GetVSchemasResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 66);

/**
 * @generated from message vtadmin.GetVtctldsRequest
 */
export type GetVtctldsRequest = Message<"vtadmin.GetVtctldsRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.GetVtctldsRequest
 */
export type GetVtctldsRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.GetVtctldsRequest.
 * Use `create(GetVtctldsRequestSchema)` to create a new message.
 */
export const GetVtctldsRequestSchema: GenMessage<GetVtctldsRequest, GetVtctldsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 67);

/**
 * @generated from message vtadmin.GetVtctldsResponse
 */
export type GetVtctldsResponse = Message<"vtadmin.GetVtctldsResponse"> & {
  /**
   * @generated from field: repeated vtadmin.Vtctld vtctlds = 1;
   */
  vtctlds: Vtctld[];
};

/**
 * @generated from message vtadmin.GetVtctldsResponse
 */
export type GetVtctldsResponseJson = {
  /**
   * @generated from field: repeated vtadmin.Vtctld vtctlds = 1;
   */
  vtctlds?: VtctldJson[];
};

/**
 * Describes the message vtadmin.GetVtctldsResponse.
 * Use `create(GetVtctldsResponseSchema)` to create a new message.
 */
export const GetVtctldsResponseSchema: GenMessage<GetVtctldsResponse, GetVtctldsResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 68);

/**
 * @generated from message vtadmin.GetWorkflowRequest
 */
export type GetWorkflowRequest = Message<"vtadmin.GetWorkflowRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: bool active_only = 4;
   */
  activeOnly: boolean;
};

/**
 * @generated from message vtadmin.GetWorkflowRequest
 */
export type GetWorkflowRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string name = 3;
   */
  name?: string;

  /**
   * @generated from field: bool active_only = 4;
   */
  activeOnly?: boolean;
};

/**
 * Describes the message vtadmin.GetWorkflowRequest.
 * Use `create(GetWorkflowRequestSchema)` to create a new message.
 */
export const GetWorkflowRequestSchema: GenMessage<GetWorkflowRequest, GetWorkflowRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 69);

/**
 * @generated from message vtadmin.GetWorkflowStatusRequest
 */
export type GetWorkflowStatusRequest = Message<"vtadmin.GetWorkflowStatusRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string name = 3;
   */
  name: string;
};

/**
 * @generated from message vtadmin.GetWorkflowStatusRequest
 */
export type GetWorkflowStatusRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string name = 3;
   */
  name?: string;
};

/**
 * Describes the message vtadmin.GetWorkflowStatusRequest.
 * Use `create(GetWorkflowStatusRequestSchema)` to create a new message.
 */
export const GetWorkflowStatusRequestSchema: GenMessage<GetWorkflowStatusRequest, GetWorkflowStatusRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 70);

/**
 * @generated from message vtadmin.StartWorkflowRequest
 */
export type StartWorkflowRequest = Message<"vtadmin.StartWorkflowRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string workflow = 3;
   */
  workflow: string;
};

/**
 * @generated from message vtadmin.StartWorkflowRequest
 */
export type StartWorkflowRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string workflow = 3;
   */
  workflow?: string;
};

/**
 * Describes the message vtadmin.StartWorkflowRequest.
 * Use `create(StartWorkflowRequestSchema)` to create a new message.
 */
export const StartWorkflowRequestSchema: GenMessage<StartWorkflowRequest, StartWorkflowRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 71);

/**
 * @generated from message vtadmin.StopWorkflowRequest
 */
export type StopWorkflowRequest = Message<"vtadmin.StopWorkflowRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string workflow = 3;
   */
  workflow: string;
};

/**
 * @generated from message vtadmin.StopWorkflowRequest
 */
export type StopWorkflowRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string workflow = 3;
   */
  workflow?: string;
};

/**
 * Describes the message vtadmin.StopWorkflowRequest.
 * Use `create(StopWorkflowRequestSchema)` to create a new message.
 */
export const StopWorkflowRequestSchema: GenMessage<StopWorkflowRequest, StopWorkflowRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 72);

/**
 * @generated from message vtadmin.GetWorkflowsRequest
 */
export type GetWorkflowsRequest = Message<"vtadmin.GetWorkflowsRequest"> & {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds: string[];

  /**
   * ActiveOnly specifies whether to return workflows that are currently
   * active (running or paused) instead of all workflows.
   *
   * @generated from field: bool active_only = 2;
   */
  activeOnly: boolean;

  /**
   * Keyspaces is a list of keyspaces to restrict the workflow search to. Note
   * that the keyspaces list applies across all cluster IDs in the request.
   *
   * If, for example, you have two clusters, each with a keyspace called "foo"
   * and want the workflows from "foo" in cluster1 but not from cluster2, you
   * must make two requests.
   *
   * Keyspaces and IgnoreKeyspaces are mutually-exclusive, and Keyspaces takes
   * precedence; if Keyspaces is a non-empty list, then IgnoreKeyspaces is
   * ignored completely.
   *
   * @generated from field: repeated string keyspaces = 3;
   */
  keyspaces: string[];

  /**
   * IgnoreKeyspaces is a list of keyspaces to skip during the workflow
   * search. It has the same semantics as the Keyspaces parameter, so refer to
   * that documentation for more details.
   *
   * @generated from field: repeated string ignore_keyspaces = 4;
   */
  ignoreKeyspaces: string[];
};

/**
 * @generated from message vtadmin.GetWorkflowsRequest
 */
export type GetWorkflowsRequestJson = {
  /**
   * @generated from field: repeated string cluster_ids = 1;
   */
  clusterIds?: string[];

  /**
   * ActiveOnly specifies whether to return workflows that are currently
   * active (running or paused) instead of all workflows.
   *
   * @generated from field: bool active_only = 2;
   */
  activeOnly?: boolean;

  /**
   * Keyspaces is a list of keyspaces to restrict the workflow search to. Note
   * that the keyspaces list applies across all cluster IDs in the request.
   *
   * If, for example, you have two clusters, each with a keyspace called "foo"
   * and want the workflows from "foo" in cluster1 but not from cluster2, you
   * must make two requests.
   *
   * Keyspaces and IgnoreKeyspaces are mutually-exclusive, and Keyspaces takes
   * precedence; if Keyspaces is a non-empty list, then IgnoreKeyspaces is
   * ignored completely.
   *
   * @generated from field: repeated string keyspaces = 3;
   */
  keyspaces?: string[];

  /**
   * IgnoreKeyspaces is a list of keyspaces to skip during the workflow
   * search. It has the same semantics as the Keyspaces parameter, so refer to
   * that documentation for more details.
   *
   * @generated from field: repeated string ignore_keyspaces = 4;
   */
  ignoreKeyspaces?: string[];
};

/**
 * Describes the message vtadmin.GetWorkflowsRequest.
 * Use `create(GetWorkflowsRequestSchema)` to create a new message.
 */
export const GetWorkflowsRequestSchema: GenMessage<GetWorkflowsRequest, GetWorkflowsRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 73);

/**
 * @generated from message vtadmin.GetWorkflowsResponse
 */
export type GetWorkflowsResponse = Message<"vtadmin.GetWorkflowsResponse"> & {
  /**
   * @generated from field: map<string, vtadmin.ClusterWorkflows> workflows_by_cluster = 1;
   */
  workflowsByCluster: { [key: string]: ClusterWorkflows };
};

/**
 * @generated from message vtadmin.GetWorkflowsResponse
 */
export type GetWorkflowsResponseJson = {
  /**
   * @generated from field: map<string, vtadmin.ClusterWorkflows> workflows_by_cluster = 1;
   */
  workflowsByCluster?: { [key: string]: ClusterWorkflowsJson };
};

/**
 * Describes the message vtadmin.GetWorkflowsResponse.
 * Use `create(GetWorkflowsResponseSchema)` to create a new message.
 */
export const GetWorkflowsResponseSchema: GenMessage<GetWorkflowsResponse, GetWorkflowsResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 74);

/**
 * @generated from message vtadmin.LaunchSchemaMigrationRequest
 */
export type LaunchSchemaMigrationRequest = Message<"vtadmin.LaunchSchemaMigrationRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.LaunchSchemaMigrationRequest request = 2;
   */
  request?: LaunchSchemaMigrationRequest$1;
};

/**
 * @generated from message vtadmin.LaunchSchemaMigrationRequest
 */
export type LaunchSchemaMigrationRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.LaunchSchemaMigrationRequest request = 2;
   */
  request?: LaunchSchemaMigrationRequestJson$1;
};

/**
 * Describes the message vtadmin.LaunchSchemaMigrationRequest.
 * Use `create(LaunchSchemaMigrationRequestSchema)` to create a new message.
 */
export const LaunchSchemaMigrationRequestSchema: GenMessage<LaunchSchemaMigrationRequest, LaunchSchemaMigrationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 75);

/**
 * @generated from message vtadmin.MoveTablesCreateRequest
 */
export type MoveTablesCreateRequest = Message<"vtadmin.MoveTablesCreateRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.MoveTablesCreateRequest request = 2;
   */
  request?: MoveTablesCreateRequest$1;
};

/**
 * @generated from message vtadmin.MoveTablesCreateRequest
 */
export type MoveTablesCreateRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.MoveTablesCreateRequest request = 2;
   */
  request?: MoveTablesCreateRequestJson$1;
};

/**
 * Describes the message vtadmin.MoveTablesCreateRequest.
 * Use `create(MoveTablesCreateRequestSchema)` to create a new message.
 */
export const MoveTablesCreateRequestSchema: GenMessage<MoveTablesCreateRequest, MoveTablesCreateRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 76);

/**
 * @generated from message vtadmin.PingTabletRequest
 */
export type PingTabletRequest = Message<"vtadmin.PingTabletRequest"> & {
  /**
   * Unique (per cluster) tablet alias of the standard form: "$cell-$uid"
   *
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * ClusterIDs is an optional parameter to narrow the scope of the search, if
   * the caller knows which cluster the tablet may be in, or, to disambiguate
   * if multiple clusters have a tablet with the same hostname.
   *
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.PingTabletRequest
 */
export type PingTabletRequestJson = {
  /**
   * Unique (per cluster) tablet alias of the standard form: "$cell-$uid"
   *
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * ClusterIDs is an optional parameter to narrow the scope of the search, if
   * the caller knows which cluster the tablet may be in, or, to disambiguate
   * if multiple clusters have a tablet with the same hostname.
   *
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.PingTabletRequest.
 * Use `create(PingTabletRequestSchema)` to create a new message.
 */
export const PingTabletRequestSchema: GenMessage<PingTabletRequest, PingTabletRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 77);

/**
 * @generated from message vtadmin.PingTabletResponse
 */
export type PingTabletResponse = Message<"vtadmin.PingTabletResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.PingTabletResponse
 */
export type PingTabletResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.PingTabletResponse.
 * Use `create(PingTabletResponseSchema)` to create a new message.
 */
export const PingTabletResponseSchema: GenMessage<PingTabletResponse, PingTabletResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 78);

/**
 * @generated from message vtadmin.PlannedFailoverShardRequest
 */
export type PlannedFailoverShardRequest = Message<"vtadmin.PlannedFailoverShardRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.PlannedReparentShardRequest options = 2;
   */
  options?: PlannedReparentShardRequest;
};

/**
 * @generated from message vtadmin.PlannedFailoverShardRequest
 */
export type PlannedFailoverShardRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.PlannedReparentShardRequest options = 2;
   */
  options?: PlannedReparentShardRequestJson;
};

/**
 * Describes the message vtadmin.PlannedFailoverShardRequest.
 * Use `create(PlannedFailoverShardRequestSchema)` to create a new message.
 */
export const PlannedFailoverShardRequestSchema: GenMessage<PlannedFailoverShardRequest, PlannedFailoverShardRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 79);

/**
 * @generated from message vtadmin.PlannedFailoverShardResponse
 */
export type PlannedFailoverShardResponse = Message<"vtadmin.PlannedFailoverShardResponse"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;

  /**
   * PromotedPrimary is the tablet alias that was promoted to shard primary.
   * If NewPrimary was set in the request options, then this will be the
   * same tablet alias. Otherwise, it will be the alias of the tablet found
   * to be most up-to-date in the shard.
   *
   * @generated from field: topodata.TabletAlias promoted_primary = 4;
   */
  promotedPrimary?: TabletAlias;

  /**
   * @generated from field: repeated logutil.Event events = 5;
   */
  events: Event[];
};

/**
 * @generated from message vtadmin.PlannedFailoverShardResponse
 */
export type PlannedFailoverShardResponseJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;

  /**
   * PromotedPrimary is the tablet alias that was promoted to shard primary.
   * If NewPrimary was set in the request options, then this will be the
   * same tablet alias. Otherwise, it will be the alias of the tablet found
   * to be most up-to-date in the shard.
   *
   * @generated from field: topodata.TabletAlias promoted_primary = 4;
   */
  promotedPrimary?: TabletAliasJson;

  /**
   * @generated from field: repeated logutil.Event events = 5;
   */
  events?: EventJson[];
};

/**
 * Describes the message vtadmin.PlannedFailoverShardResponse.
 * Use `create(PlannedFailoverShardResponseSchema)` to create a new message.
 */
export const PlannedFailoverShardResponseSchema: GenMessage<PlannedFailoverShardResponse, PlannedFailoverShardResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 80);

/**
 * @generated from message vtadmin.RebuildKeyspaceGraphRequest
 */
export type RebuildKeyspaceGraphRequest = Message<"vtadmin.RebuildKeyspaceGraphRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: repeated string cells = 3;
   */
  cells: string[];

  /**
   * @generated from field: bool allow_partial = 4;
   */
  allowPartial: boolean;
};

/**
 * @generated from message vtadmin.RebuildKeyspaceGraphRequest
 */
export type RebuildKeyspaceGraphRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: repeated string cells = 3;
   */
  cells?: string[];

  /**
   * @generated from field: bool allow_partial = 4;
   */
  allowPartial?: boolean;
};

/**
 * Describes the message vtadmin.RebuildKeyspaceGraphRequest.
 * Use `create(RebuildKeyspaceGraphRequestSchema)` to create a new message.
 */
export const RebuildKeyspaceGraphRequestSchema: GenMessage<RebuildKeyspaceGraphRequest, RebuildKeyspaceGraphRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 81);

/**
 * @generated from message vtadmin.RebuildKeyspaceGraphResponse
 */
export type RebuildKeyspaceGraphResponse = Message<"vtadmin.RebuildKeyspaceGraphResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;
};

/**
 * @generated from message vtadmin.RebuildKeyspaceGraphResponse
 */
export type RebuildKeyspaceGraphResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;
};

/**
 * Describes the message vtadmin.RebuildKeyspaceGraphResponse.
 * Use `create(RebuildKeyspaceGraphResponseSchema)` to create a new message.
 */
export const RebuildKeyspaceGraphResponseSchema: GenMessage<RebuildKeyspaceGraphResponse, RebuildKeyspaceGraphResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 82);

/**
 * @generated from message vtadmin.RefreshStateRequest
 */
export type RefreshStateRequest = Message<"vtadmin.RefreshStateRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.RefreshStateRequest
 */
export type RefreshStateRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.RefreshStateRequest.
 * Use `create(RefreshStateRequestSchema)` to create a new message.
 */
export const RefreshStateRequestSchema: GenMessage<RefreshStateRequest, RefreshStateRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 83);

/**
 * @generated from message vtadmin.RefreshStateResponse
 */
export type RefreshStateResponse = Message<"vtadmin.RefreshStateResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.RefreshStateResponse
 */
export type RefreshStateResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.RefreshStateResponse.
 * Use `create(RefreshStateResponseSchema)` to create a new message.
 */
export const RefreshStateResponseSchema: GenMessage<RefreshStateResponse, RefreshStateResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 84);

/**
 * @generated from message vtadmin.ReloadSchemasRequest
 */
export type ReloadSchemasRequest = Message<"vtadmin.ReloadSchemasRequest"> & {
  /**
   * Keyspaces, if set, will reload schemas across one or more keyspaces. A
   * keyspace not existing in a cluster will not fail the overall request.
   *
   * Superceded by KeyspaceShards and Tablets, in that order.
   *
   * @generated from field: repeated string keyspaces = 1;
   */
  keyspaces: string[];

  /**
   * KeyspaceShards, if set, will reload schemas across one or more shards.
   * Each element must be a valid keyspace/shard according to
   * topoproto.ParseKeyspaceShard. A shard not existing in a cluster will not
   * fail the overall request.
   *
   * Supercedes Keyspaces, and is superceded by Tablets.
   *
   * @generated from field: repeated string keyspace_shards = 2;
   */
  keyspaceShards: string[];

  /**
   * Tablets, if set will reload schemas across one or more tablets.
   * Supercedes both Keyspaces and KeyspaceShards.
   *
   * @generated from field: repeated topodata.TabletAlias tablets = 3;
   */
  tablets: TabletAlias[];

  /**
   * ClusterIds optionally restricts the reload operation to clusters with
   * the specified IDs. An empty list of ClusterIds will operate on all
   * clusters.
   *
   * @generated from field: repeated string cluster_ids = 4;
   */
  clusterIds: string[];

  /**
   * Concurrency controls the number of tablets to reload at any given time.
   * Its semantics depend on whether the request is for keyspace, shard, or
   * tablet mode.
   *
   * In Keyspaces mode, Concurrency is the number of tablets to reload at once
   * *per keyspace*.
   *
   * In KeyspaceShards mode, Concurrency is the number of tablets to reload at
   * once *per shard*.
   *
   * In Tablets mode, Concurrency is the number of tablets to reload at once
   * *per cluster*.
   *
   * @generated from field: int32 concurrency = 5;
   */
  concurrency: number;

  /**
   * WaitPosition is the replication position that replicating tablets should
   * reach prior to reloading their schemas.
   *
   * Does not apply in Tablets mode.
   *
   * @generated from field: string wait_position = 6;
   */
  waitPosition: string;

  /**
   * IncludePrimary, if set, will reload the schemas on PRIMARY tablets as
   * well as REPLICA and RDONLY.
   *
   * Does not apply in Tablets mode.
   *
   * @generated from field: bool include_primary = 7;
   */
  includePrimary: boolean;
};

/**
 * @generated from message vtadmin.ReloadSchemasRequest
 */
export type ReloadSchemasRequestJson = {
  /**
   * Keyspaces, if set, will reload schemas across one or more keyspaces. A
   * keyspace not existing in a cluster will not fail the overall request.
   *
   * Superceded by KeyspaceShards and Tablets, in that order.
   *
   * @generated from field: repeated string keyspaces = 1;
   */
  keyspaces?: string[];

  /**
   * KeyspaceShards, if set, will reload schemas across one or more shards.
   * Each element must be a valid keyspace/shard according to
   * topoproto.ParseKeyspaceShard. A shard not existing in a cluster will not
   * fail the overall request.
   *
   * Supercedes Keyspaces, and is superceded by Tablets.
   *
   * @generated from field: repeated string keyspace_shards = 2;
   */
  keyspaceShards?: string[];

  /**
   * Tablets, if set will reload schemas across one or more tablets.
   * Supercedes both Keyspaces and KeyspaceShards.
   *
   * @generated from field: repeated topodata.TabletAlias tablets = 3;
   */
  tablets?: TabletAliasJson[];

  /**
   * ClusterIds optionally restricts the reload operation to clusters with
   * the specified IDs. An empty list of ClusterIds will operate on all
   * clusters.
   *
   * @generated from field: repeated string cluster_ids = 4;
   */
  clusterIds?: string[];

  /**
   * Concurrency controls the number of tablets to reload at any given time.
   * Its semantics depend on whether the request is for keyspace, shard, or
   * tablet mode.
   *
   * In Keyspaces mode, Concurrency is the number of tablets to reload at once
   * *per keyspace*.
   *
   * In KeyspaceShards mode, Concurrency is the number of tablets to reload at
   * once *per shard*.
   *
   * In Tablets mode, Concurrency is the number of tablets to reload at once
   * *per cluster*.
   *
   * @generated from field: int32 concurrency = 5;
   */
  concurrency?: number;

  /**
   * WaitPosition is the replication position that replicating tablets should
   * reach prior to reloading their schemas.
   *
   * Does not apply in Tablets mode.
   *
   * @generated from field: string wait_position = 6;
   */
  waitPosition?: string;

  /**
   * IncludePrimary, if set, will reload the schemas on PRIMARY tablets as
   * well as REPLICA and RDONLY.
   *
   * Does not apply in Tablets mode.
   *
   * @generated from field: bool include_primary = 7;
   */
  includePrimary?: boolean;
};

/**
 * Describes the message vtadmin.ReloadSchemasRequest.
 * Use `create(ReloadSchemasRequestSchema)` to create a new message.
 */
export const ReloadSchemasRequestSchema: GenMessage<ReloadSchemasRequest, ReloadSchemasRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 85);

/**
 * @generated from message vtadmin.ReloadSchemasResponse
 */
export type ReloadSchemasResponse = Message<"vtadmin.ReloadSchemasResponse"> & {
  /**
   * KeyspaceResults is the list of KeyspaceResult objects for a ReloadSchemas
   * operation. It is only set when the request mandates Keyspaces mode (see
   * ReloadSchemasRequest).
   *
   * @generated from field: repeated vtadmin.ReloadSchemasResponse.KeyspaceResult keyspace_results = 1;
   */
  keyspaceResults: ReloadSchemasResponse_KeyspaceResult[];

  /**
   * ShardResults is the list of ShardResult objects for a ReloadSchemas
   * operation. It is only set when the request mandates KeyspaceShards mode
   * (see ReloadSchemasRequest).
   *
   * @generated from field: repeated vtadmin.ReloadSchemasResponse.ShardResult shard_results = 2;
   */
  shardResults: ReloadSchemasResponse_ShardResult[];

  /**
   * TabletResults is the list of TabletResult objects for a ReloadSchemas
   * operation. It is only set when the request mandates Tablets mode (see
   * ReloadSchemasRequest).
   *
   * @generated from field: repeated vtadmin.ReloadSchemasResponse.TabletResult tablet_results = 3;
   */
  tabletResults: ReloadSchemasResponse_TabletResult[];
};

/**
 * @generated from message vtadmin.ReloadSchemasResponse
 */
export type ReloadSchemasResponseJson = {
  /**
   * KeyspaceResults is the list of KeyspaceResult objects for a ReloadSchemas
   * operation. It is only set when the request mandates Keyspaces mode (see
   * ReloadSchemasRequest).
   *
   * @generated from field: repeated vtadmin.ReloadSchemasResponse.KeyspaceResult keyspace_results = 1;
   */
  keyspaceResults?: ReloadSchemasResponse_KeyspaceResultJson[];

  /**
   * ShardResults is the list of ShardResult objects for a ReloadSchemas
   * operation. It is only set when the request mandates KeyspaceShards mode
   * (see ReloadSchemasRequest).
   *
   * @generated from field: repeated vtadmin.ReloadSchemasResponse.ShardResult shard_results = 2;
   */
  shardResults?: ReloadSchemasResponse_ShardResultJson[];

  /**
   * TabletResults is the list of TabletResult objects for a ReloadSchemas
   * operation. It is only set when the request mandates Tablets mode (see
   * ReloadSchemasRequest).
   *
   * @generated from field: repeated vtadmin.ReloadSchemasResponse.TabletResult tablet_results = 3;
   */
  tabletResults?: ReloadSchemasResponse_TabletResultJson[];
};

/**
 * Describes the message vtadmin.ReloadSchemasResponse.
 * Use `create(ReloadSchemasResponseSchema)` to create a new message.
 */
export const ReloadSchemasResponseSchema: GenMessage<ReloadSchemasResponse, ReloadSchemasResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 86);

/**
 * KeyspaceResult is a grouping of a Keyspace and any log events that
 * occurred in that keyspace during a schema reload (usually associated with
 * partial errors - ReloadSchemas requests are best-effort).
 *
 * It is only set when a ReloadSchemas request mandates Keyspaces mode
 * (see ReloadSchemasRequest).
 *
 * @generated from message vtadmin.ReloadSchemasResponse.KeyspaceResult
 */
export type ReloadSchemasResponse_KeyspaceResult = Message<"vtadmin.ReloadSchemasResponse.KeyspaceResult"> & {
  /**
   * @generated from field: vtadmin.Keyspace keyspace = 1;
   */
  keyspace?: Keyspace;

  /**
   * @generated from field: repeated logutil.Event events = 2;
   */
  events: Event[];
};

/**
 * KeyspaceResult is a grouping of a Keyspace and any log events that
 * occurred in that keyspace during a schema reload (usually associated with
 * partial errors - ReloadSchemas requests are best-effort).
 *
 * It is only set when a ReloadSchemas request mandates Keyspaces mode
 * (see ReloadSchemasRequest).
 *
 * @generated from message vtadmin.ReloadSchemasResponse.KeyspaceResult
 */
export type ReloadSchemasResponse_KeyspaceResultJson = {
  /**
   * @generated from field: vtadmin.Keyspace keyspace = 1;
   */
  keyspace?: KeyspaceJson;

  /**
   * @generated from field: repeated logutil.Event events = 2;
   */
  events?: EventJson[];
};

/**
 * Describes the message vtadmin.ReloadSchemasResponse.KeyspaceResult.
 * Use `create(ReloadSchemasResponse_KeyspaceResultSchema)` to create a new message.
 */
export const ReloadSchemasResponse_KeyspaceResultSchema: GenMessage<ReloadSchemasResponse_KeyspaceResult, ReloadSchemasResponse_KeyspaceResultJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 86, 0);

/**
 * ShardResult is a grouping of a Shard and any log events that occurred in
 * that shard during a schema reload (usually associated with partial
 * errors - ReloadSchemas requests are best-effort).
 *
 * It is only set when a ReloadSchemas request mandates KeyspaceShards mode
 * (see ReloadSchemasRequest).
 *
 * @generated from message vtadmin.ReloadSchemasResponse.ShardResult
 */
export type ReloadSchemasResponse_ShardResult = Message<"vtadmin.ReloadSchemasResponse.ShardResult"> & {
  /**
   * @generated from field: vtadmin.Shard shard = 1;
   */
  shard?: Shard;

  /**
   * @generated from field: repeated logutil.Event events = 2;
   */
  events: Event[];
};

/**
 * ShardResult is a grouping of a Shard and any log events that occurred in
 * that shard during a schema reload (usually associated with partial
 * errors - ReloadSchemas requests are best-effort).
 *
 * It is only set when a ReloadSchemas request mandates KeyspaceShards mode
 * (see ReloadSchemasRequest).
 *
 * @generated from message vtadmin.ReloadSchemasResponse.ShardResult
 */
export type ReloadSchemasResponse_ShardResultJson = {
  /**
   * @generated from field: vtadmin.Shard shard = 1;
   */
  shard?: ShardJson;

  /**
   * @generated from field: repeated logutil.Event events = 2;
   */
  events?: EventJson[];
};

/**
 * Describes the message vtadmin.ReloadSchemasResponse.ShardResult.
 * Use `create(ReloadSchemasResponse_ShardResultSchema)` to create a new message.
 */
export const ReloadSchemasResponse_ShardResultSchema: GenMessage<ReloadSchemasResponse_ShardResult, ReloadSchemasResponse_ShardResultJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 86, 1);

/**
 * TabletResult is a grouping of a Tablet and the result of reloading that
 * Tablet's schema. Result will either be the string "ok", or the error
 * message from that tablet. Note ReloadSchemas is best-effort, so tablet's
 * failing to reload is not treated as an overall failure.
 *
 * It is only set when a ReloadSchemas request mandates Tablets mode (see
 * ReloadSchemasRequest).
 *
 * @generated from message vtadmin.ReloadSchemasResponse.TabletResult
 */
export type ReloadSchemasResponse_TabletResult = Message<"vtadmin.ReloadSchemasResponse.TabletResult"> & {
  /**
   * @generated from field: vtadmin.Tablet tablet = 1;
   */
  tablet?: Tablet;

  /**
   * @generated from field: string result = 2;
   */
  result: string;
};

/**
 * TabletResult is a grouping of a Tablet and the result of reloading that
 * Tablet's schema. Result will either be the string "ok", or the error
 * message from that tablet. Note ReloadSchemas is best-effort, so tablet's
 * failing to reload is not treated as an overall failure.
 *
 * It is only set when a ReloadSchemas request mandates Tablets mode (see
 * ReloadSchemasRequest).
 *
 * @generated from message vtadmin.ReloadSchemasResponse.TabletResult
 */
export type ReloadSchemasResponse_TabletResultJson = {
  /**
   * @generated from field: vtadmin.Tablet tablet = 1;
   */
  tablet?: TabletJson;

  /**
   * @generated from field: string result = 2;
   */
  result?: string;
};

/**
 * Describes the message vtadmin.ReloadSchemasResponse.TabletResult.
 * Use `create(ReloadSchemasResponse_TabletResultSchema)` to create a new message.
 */
export const ReloadSchemasResponse_TabletResultSchema: GenMessage<ReloadSchemasResponse_TabletResult, ReloadSchemasResponse_TabletResultJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 86, 2);

/**
 * @generated from message vtadmin.ReloadSchemaShardRequest
 */
export type ReloadSchemaShardRequest = Message<"vtadmin.ReloadSchemaShardRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;

  /**
   * @generated from field: string wait_position = 4;
   */
  waitPosition: string;

  /**
   * @generated from field: bool include_primary = 5;
   */
  includePrimary: boolean;

  /**
   * @generated from field: int32 concurrency = 6;
   */
  concurrency: number;
};

/**
 * @generated from message vtadmin.ReloadSchemaShardRequest
 */
export type ReloadSchemaShardRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;

  /**
   * @generated from field: string wait_position = 4;
   */
  waitPosition?: string;

  /**
   * @generated from field: bool include_primary = 5;
   */
  includePrimary?: boolean;

  /**
   * @generated from field: int32 concurrency = 6;
   */
  concurrency?: number;
};

/**
 * Describes the message vtadmin.ReloadSchemaShardRequest.
 * Use `create(ReloadSchemaShardRequestSchema)` to create a new message.
 */
export const ReloadSchemaShardRequestSchema: GenMessage<ReloadSchemaShardRequest, ReloadSchemaShardRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 87);

/**
 * @generated from message vtadmin.ReloadSchemaShardResponse
 */
export type ReloadSchemaShardResponse = Message<"vtadmin.ReloadSchemaShardResponse"> & {
  /**
   * @generated from field: repeated logutil.Event events = 1;
   */
  events: Event[];
};

/**
 * @generated from message vtadmin.ReloadSchemaShardResponse
 */
export type ReloadSchemaShardResponseJson = {
  /**
   * @generated from field: repeated logutil.Event events = 1;
   */
  events?: EventJson[];
};

/**
 * Describes the message vtadmin.ReloadSchemaShardResponse.
 * Use `create(ReloadSchemaShardResponseSchema)` to create a new message.
 */
export const ReloadSchemaShardResponseSchema: GenMessage<ReloadSchemaShardResponse, ReloadSchemaShardResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 88);

/**
 * @generated from message vtadmin.RefreshTabletReplicationSourceRequest
 */
export type RefreshTabletReplicationSourceRequest = Message<"vtadmin.RefreshTabletReplicationSourceRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.RefreshTabletReplicationSourceRequest
 */
export type RefreshTabletReplicationSourceRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.RefreshTabletReplicationSourceRequest.
 * Use `create(RefreshTabletReplicationSourceRequestSchema)` to create a new message.
 */
export const RefreshTabletReplicationSourceRequestSchema: GenMessage<RefreshTabletReplicationSourceRequest, RefreshTabletReplicationSourceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 89);

/**
 * @generated from message vtadmin.RefreshTabletReplicationSourceResponse
 */
export type RefreshTabletReplicationSourceResponse = Message<"vtadmin.RefreshTabletReplicationSourceResponse"> & {
  /**
   * @generated from field: string keyspace = 1;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 2;
   */
  shard: string;

  /**
   * @generated from field: topodata.TabletAlias primary = 3;
   */
  primary?: TabletAlias;

  /**
   * @generated from field: vtadmin.Cluster cluster = 4;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.RefreshTabletReplicationSourceResponse
 */
export type RefreshTabletReplicationSourceResponseJson = {
  /**
   * @generated from field: string keyspace = 1;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 2;
   */
  shard?: string;

  /**
   * @generated from field: topodata.TabletAlias primary = 3;
   */
  primary?: TabletAliasJson;

  /**
   * @generated from field: vtadmin.Cluster cluster = 4;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.RefreshTabletReplicationSourceResponse.
 * Use `create(RefreshTabletReplicationSourceResponseSchema)` to create a new message.
 */
export const RefreshTabletReplicationSourceResponseSchema: GenMessage<RefreshTabletReplicationSourceResponse, RefreshTabletReplicationSourceResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 90);

/**
 * @generated from message vtadmin.RemoveKeyspaceCellRequest
 */
export type RemoveKeyspaceCellRequest = Message<"vtadmin.RemoveKeyspaceCellRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string cell = 3;
   */
  cell: string;

  /**
   * @generated from field: bool force = 4;
   */
  force: boolean;

  /**
   * @generated from field: bool recursive = 5;
   */
  recursive: boolean;
};

/**
 * @generated from message vtadmin.RemoveKeyspaceCellRequest
 */
export type RemoveKeyspaceCellRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string cell = 3;
   */
  cell?: string;

  /**
   * @generated from field: bool force = 4;
   */
  force?: boolean;

  /**
   * @generated from field: bool recursive = 5;
   */
  recursive?: boolean;
};

/**
 * Describes the message vtadmin.RemoveKeyspaceCellRequest.
 * Use `create(RemoveKeyspaceCellRequestSchema)` to create a new message.
 */
export const RemoveKeyspaceCellRequestSchema: GenMessage<RemoveKeyspaceCellRequest, RemoveKeyspaceCellRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 91);

/**
 * @generated from message vtadmin.RemoveKeyspaceCellResponse
 */
export type RemoveKeyspaceCellResponse = Message<"vtadmin.RemoveKeyspaceCellResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;
};

/**
 * @generated from message vtadmin.RemoveKeyspaceCellResponse
 */
export type RemoveKeyspaceCellResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;
};

/**
 * Describes the message vtadmin.RemoveKeyspaceCellResponse.
 * Use `create(RemoveKeyspaceCellResponseSchema)` to create a new message.
 */
export const RemoveKeyspaceCellResponseSchema: GenMessage<RemoveKeyspaceCellResponse, RemoveKeyspaceCellResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 92);

/**
 * @generated from message vtadmin.RetrySchemaMigrationRequest
 */
export type RetrySchemaMigrationRequest = Message<"vtadmin.RetrySchemaMigrationRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: vtctldata.RetrySchemaMigrationRequest request = 2;
   */
  request?: RetrySchemaMigrationRequest$1;
};

/**
 * @generated from message vtadmin.RetrySchemaMigrationRequest
 */
export type RetrySchemaMigrationRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: vtctldata.RetrySchemaMigrationRequest request = 2;
   */
  request?: RetrySchemaMigrationRequestJson$1;
};

/**
 * Describes the message vtadmin.RetrySchemaMigrationRequest.
 * Use `create(RetrySchemaMigrationRequestSchema)` to create a new message.
 */
export const RetrySchemaMigrationRequestSchema: GenMessage<RetrySchemaMigrationRequest, RetrySchemaMigrationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 93);

/**
 * @generated from message vtadmin.RunHealthCheckRequest
 */
export type RunHealthCheckRequest = Message<"vtadmin.RunHealthCheckRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.RunHealthCheckRequest
 */
export type RunHealthCheckRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.RunHealthCheckRequest.
 * Use `create(RunHealthCheckRequestSchema)` to create a new message.
 */
export const RunHealthCheckRequestSchema: GenMessage<RunHealthCheckRequest, RunHealthCheckRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 94);

/**
 * @generated from message vtadmin.RunHealthCheckResponse
 */
export type RunHealthCheckResponse = Message<"vtadmin.RunHealthCheckResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.RunHealthCheckResponse
 */
export type RunHealthCheckResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.RunHealthCheckResponse.
 * Use `create(RunHealthCheckResponseSchema)` to create a new message.
 */
export const RunHealthCheckResponseSchema: GenMessage<RunHealthCheckResponse, RunHealthCheckResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 95);

/**
 * @generated from message vtadmin.SetReadOnlyRequest
 */
export type SetReadOnlyRequest = Message<"vtadmin.SetReadOnlyRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.SetReadOnlyRequest
 */
export type SetReadOnlyRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.SetReadOnlyRequest.
 * Use `create(SetReadOnlyRequestSchema)` to create a new message.
 */
export const SetReadOnlyRequestSchema: GenMessage<SetReadOnlyRequest, SetReadOnlyRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 96);

/**
 * @generated from message vtadmin.SetReadOnlyResponse
 */
export type SetReadOnlyResponse = Message<"vtadmin.SetReadOnlyResponse"> & {
};

/**
 * @generated from message vtadmin.SetReadOnlyResponse
 */
export type SetReadOnlyResponseJson = {
};

/**
 * Describes the message vtadmin.SetReadOnlyResponse.
 * Use `create(SetReadOnlyResponseSchema)` to create a new message.
 */
export const SetReadOnlyResponseSchema: GenMessage<SetReadOnlyResponse, SetReadOnlyResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 97);

/**
 * @generated from message vtadmin.SetReadWriteRequest
 */
export type SetReadWriteRequest = Message<"vtadmin.SetReadWriteRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.SetReadWriteRequest
 */
export type SetReadWriteRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.SetReadWriteRequest.
 * Use `create(SetReadWriteRequestSchema)` to create a new message.
 */
export const SetReadWriteRequestSchema: GenMessage<SetReadWriteRequest, SetReadWriteRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 98);

/**
 * @generated from message vtadmin.SetReadWriteResponse
 */
export type SetReadWriteResponse = Message<"vtadmin.SetReadWriteResponse"> & {
};

/**
 * @generated from message vtadmin.SetReadWriteResponse
 */
export type SetReadWriteResponseJson = {
};

/**
 * Describes the message vtadmin.SetReadWriteResponse.
 * Use `create(SetReadWriteResponseSchema)` to create a new message.
 */
export const SetReadWriteResponseSchema: GenMessage<SetReadWriteResponse, SetReadWriteResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 99);

/**
 * @generated from message vtadmin.StartReplicationRequest
 */
export type StartReplicationRequest = Message<"vtadmin.StartReplicationRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.StartReplicationRequest
 */
export type StartReplicationRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.StartReplicationRequest.
 * Use `create(StartReplicationRequestSchema)` to create a new message.
 */
export const StartReplicationRequestSchema: GenMessage<StartReplicationRequest, StartReplicationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 100);

/**
 * @generated from message vtadmin.StartReplicationResponse
 */
export type StartReplicationResponse = Message<"vtadmin.StartReplicationResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.StartReplicationResponse
 */
export type StartReplicationResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.StartReplicationResponse.
 * Use `create(StartReplicationResponseSchema)` to create a new message.
 */
export const StartReplicationResponseSchema: GenMessage<StartReplicationResponse, StartReplicationResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 101);

/**
 * @generated from message vtadmin.StopReplicationRequest
 */
export type StopReplicationRequest = Message<"vtadmin.StopReplicationRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.StopReplicationRequest
 */
export type StopReplicationRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.StopReplicationRequest.
 * Use `create(StopReplicationRequestSchema)` to create a new message.
 */
export const StopReplicationRequestSchema: GenMessage<StopReplicationRequest, StopReplicationRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 102);

/**
 * @generated from message vtadmin.StopReplicationResponse
 */
export type StopReplicationResponse = Message<"vtadmin.StopReplicationResponse"> & {
  /**
   * @generated from field: string status = 1;
   */
  status: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: Cluster;
};

/**
 * @generated from message vtadmin.StopReplicationResponse
 */
export type StopReplicationResponseJson = {
  /**
   * @generated from field: string status = 1;
   */
  status?: string;

  /**
   * @generated from field: vtadmin.Cluster cluster = 2;
   */
  cluster?: ClusterJson;
};

/**
 * Describes the message vtadmin.StopReplicationResponse.
 * Use `create(StopReplicationResponseSchema)` to create a new message.
 */
export const StopReplicationResponseSchema: GenMessage<StopReplicationResponse, StopReplicationResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 103);

/**
 * @generated from message vtadmin.TabletExternallyPromotedRequest
 */
export type TabletExternallyPromotedRequest = Message<"vtadmin.TabletExternallyPromotedRequest"> & {
  /**
   * Tablet is the alias of the tablet that was promoted externally and should
   * be updated to the shard primary in the topo.
   *
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.TabletExternallyPromotedRequest
 */
export type TabletExternallyPromotedRequestJson = {
  /**
   * Tablet is the alias of the tablet that was promoted externally and should
   * be updated to the shard primary in the topo.
   *
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.TabletExternallyPromotedRequest.
 * Use `create(TabletExternallyPromotedRequestSchema)` to create a new message.
 */
export const TabletExternallyPromotedRequestSchema: GenMessage<TabletExternallyPromotedRequest, TabletExternallyPromotedRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 104);

/**
 * @generated from message vtadmin.TabletExternallyPromotedResponse
 */
export type TabletExternallyPromotedResponse = Message<"vtadmin.TabletExternallyPromotedResponse"> & {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: Cluster;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;

  /**
   * @generated from field: topodata.TabletAlias new_primary = 4;
   */
  newPrimary?: TabletAlias;

  /**
   * @generated from field: topodata.TabletAlias old_primary = 5;
   */
  oldPrimary?: TabletAlias;
};

/**
 * @generated from message vtadmin.TabletExternallyPromotedResponse
 */
export type TabletExternallyPromotedResponseJson = {
  /**
   * @generated from field: vtadmin.Cluster cluster = 1;
   */
  cluster?: ClusterJson;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;

  /**
   * @generated from field: topodata.TabletAlias new_primary = 4;
   */
  newPrimary?: TabletAliasJson;

  /**
   * @generated from field: topodata.TabletAlias old_primary = 5;
   */
  oldPrimary?: TabletAliasJson;
};

/**
 * Describes the message vtadmin.TabletExternallyPromotedResponse.
 * Use `create(TabletExternallyPromotedResponseSchema)` to create a new message.
 */
export const TabletExternallyPromotedResponseSchema: GenMessage<TabletExternallyPromotedResponse, TabletExternallyPromotedResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 105);

/**
 * @generated from message vtadmin.TabletExternallyReparentedRequest
 */
export type TabletExternallyReparentedRequest = Message<"vtadmin.TabletExternallyReparentedRequest"> & {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAlias;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds: string[];
};

/**
 * @generated from message vtadmin.TabletExternallyReparentedRequest
 */
export type TabletExternallyReparentedRequestJson = {
  /**
   * @generated from field: topodata.TabletAlias alias = 1;
   */
  alias?: TabletAliasJson;

  /**
   * @generated from field: repeated string cluster_ids = 2;
   */
  clusterIds?: string[];
};

/**
 * Describes the message vtadmin.TabletExternallyReparentedRequest.
 * Use `create(TabletExternallyReparentedRequestSchema)` to create a new message.
 */
export const TabletExternallyReparentedRequestSchema: GenMessage<TabletExternallyReparentedRequest, TabletExternallyReparentedRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 106);

/**
 * @generated from message vtadmin.ValidateRequest
 */
export type ValidateRequest = Message<"vtadmin.ValidateRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: bool ping_tablets = 2;
   */
  pingTablets: boolean;
};

/**
 * @generated from message vtadmin.ValidateRequest
 */
export type ValidateRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: bool ping_tablets = 2;
   */
  pingTablets?: boolean;
};

/**
 * Describes the message vtadmin.ValidateRequest.
 * Use `create(ValidateRequestSchema)` to create a new message.
 */
export const ValidateRequestSchema: GenMessage<ValidateRequest, ValidateRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 107);

/**
 * @generated from message vtadmin.ValidateKeyspaceRequest
 */
export type ValidateKeyspaceRequest = Message<"vtadmin.ValidateKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: bool ping_tablets = 3;
   */
  pingTablets: boolean;
};

/**
 * @generated from message vtadmin.ValidateKeyspaceRequest
 */
export type ValidateKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: bool ping_tablets = 3;
   */
  pingTablets?: boolean;
};

/**
 * Describes the message vtadmin.ValidateKeyspaceRequest.
 * Use `create(ValidateKeyspaceRequestSchema)` to create a new message.
 */
export const ValidateKeyspaceRequestSchema: GenMessage<ValidateKeyspaceRequest, ValidateKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 108);

/**
 * @generated from message vtadmin.ValidateSchemaKeyspaceRequest
 */
export type ValidateSchemaKeyspaceRequest = Message<"vtadmin.ValidateSchemaKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;
};

/**
 * @generated from message vtadmin.ValidateSchemaKeyspaceRequest
 */
export type ValidateSchemaKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;
};

/**
 * Describes the message vtadmin.ValidateSchemaKeyspaceRequest.
 * Use `create(ValidateSchemaKeyspaceRequestSchema)` to create a new message.
 */
export const ValidateSchemaKeyspaceRequestSchema: GenMessage<ValidateSchemaKeyspaceRequest, ValidateSchemaKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 109);

/**
 * @generated from message vtadmin.ValidateShardRequest
 */
export type ValidateShardRequest = Message<"vtadmin.ValidateShardRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;

  /**
   * @generated from field: bool ping_tablets = 4;
   */
  pingTablets: boolean;
};

/**
 * @generated from message vtadmin.ValidateShardRequest
 */
export type ValidateShardRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;

  /**
   * @generated from field: bool ping_tablets = 4;
   */
  pingTablets?: boolean;
};

/**
 * Describes the message vtadmin.ValidateShardRequest.
 * Use `create(ValidateShardRequestSchema)` to create a new message.
 */
export const ValidateShardRequestSchema: GenMessage<ValidateShardRequest, ValidateShardRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 110);

/**
 * @generated from message vtadmin.ValidateVersionKeyspaceRequest
 */
export type ValidateVersionKeyspaceRequest = Message<"vtadmin.ValidateVersionKeyspaceRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;
};

/**
 * @generated from message vtadmin.ValidateVersionKeyspaceRequest
 */
export type ValidateVersionKeyspaceRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;
};

/**
 * Describes the message vtadmin.ValidateVersionKeyspaceRequest.
 * Use `create(ValidateVersionKeyspaceRequestSchema)` to create a new message.
 */
export const ValidateVersionKeyspaceRequestSchema: GenMessage<ValidateVersionKeyspaceRequest, ValidateVersionKeyspaceRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 111);

/**
 * @generated from message vtadmin.ValidateVersionShardRequest
 */
export type ValidateVersionShardRequest = Message<"vtadmin.ValidateVersionShardRequest"> & {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard: string;
};

/**
 * @generated from message vtadmin.ValidateVersionShardRequest
 */
export type ValidateVersionShardRequestJson = {
  /**
   * @generated from field: string cluster_id = 1;
   */
  clusterId?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string shard = 3;
   */
  shard?: string;
};

/**
 * Describes the message vtadmin.ValidateVersionShardRequest.
 * Use `create(ValidateVersionShardRequestSchema)` to create a new message.
 */
export const ValidateVersionShardRequestSchema: GenMessage<ValidateVersionShardRequest, ValidateVersionShardRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 112);

/**
 * @generated from message vtadmin.VTExplainRequest
 */
export type VTExplainRequest = Message<"vtadmin.VTExplainRequest"> & {
  /**
   * @generated from field: string cluster = 1;
   */
  cluster: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace: string;

  /**
   * @generated from field: string sql = 3;
   */
  sql: string;
};

/**
 * @generated from message vtadmin.VTExplainRequest
 */
export type VTExplainRequestJson = {
  /**
   * @generated from field: string cluster = 1;
   */
  cluster?: string;

  /**
   * @generated from field: string keyspace = 2;
   */
  keyspace?: string;

  /**
   * @generated from field: string sql = 3;
   */
  sql?: string;
};

/**
 * Describes the message vtadmin.VTExplainRequest.
 * Use `create(VTExplainRequestSchema)` to create a new message.
 */
export const VTExplainRequestSchema: GenMessage<VTExplainRequest, VTExplainRequestJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 113);

/**
 * @generated from message vtadmin.VTExplainResponse
 */
export type VTExplainResponse = Message<"vtadmin.VTExplainResponse"> & {
  /**
   * @generated from field: string response = 1;
   */
  response: string;
};

/**
 * @generated from message vtadmin.VTExplainResponse
 */
export type VTExplainResponseJson = {
  /**
   * @generated from field: string response = 1;
   */
  response?: string;
};

/**
 * Describes the message vtadmin.VTExplainResponse.
 * Use `create(VTExplainResponseSchema)` to create a new message.
 */
export const VTExplainResponseSchema: GenMessage<VTExplainResponse, VTExplainResponseJson> = /*@__PURE__*/
  messageDesc(file_vtadmin, 114);

/**
 * VTAdmin is the Vitess Admin API service. It provides RPCs that operate on
 * across a range of Vitess clusters.
 *
 * @generated from service vtadmin.VTAdmin
 */
export const VTAdmin: GenService<{
  /**
   * ApplySchema applies a schema to a keyspace in the given cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.ApplySchema
   */
  applySchema: {
    methodKind: "unary";
    input: typeof ApplySchemaRequestSchema;
    output: typeof ApplySchemaResponseSchema;
  },
  /**
   * CancelSchemaMigration cancels one or all schema migrations in the given
   * cluster, terminating any running ones as needed.
   *
   * @generated from rpc vtadmin.VTAdmin.CancelSchemaMigration
   */
  cancelSchemaMigration: {
    methodKind: "unary";
    input: typeof CancelSchemaMigrationRequestSchema;
    output: typeof CancelSchemaMigrationResponseSchema;
  },
  /**
   * CleanupSchemaMigration marks a schema migration in the given cluster as
   * ready for artifact cleanup.
   *
   * @generated from rpc vtadmin.VTAdmin.CleanupSchemaMigration
   */
  cleanupSchemaMigration: {
    methodKind: "unary";
    input: typeof CleanupSchemaMigrationRequestSchema;
    output: typeof CleanupSchemaMigrationResponseSchema;
  },
  /**
   * CompleteSchemaMigration completes one or all migrations in the given
   * cluster executed with --postpone-completion.
   *
   * @generated from rpc vtadmin.VTAdmin.CompleteSchemaMigration
   */
  completeSchemaMigration: {
    methodKind: "unary";
    input: typeof CompleteSchemaMigrationRequestSchema;
    output: typeof CompleteSchemaMigrationResponseSchema;
  },
  /**
   * ConcludeTransaction concludes a distributed transaction identified by the provided dtid.
   *
   * @generated from rpc vtadmin.VTAdmin.ConcludeTransaction
   */
  concludeTransaction: {
    methodKind: "unary";
    input: typeof ConcludeTransactionRequestSchema;
    output: typeof ConcludeTransactionResponseSchema;
  },
  /**
   * CreateKeyspace creates a new keyspace in the given cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.CreateKeyspace
   */
  createKeyspace: {
    methodKind: "unary";
    input: typeof CreateKeyspaceRequestSchema;
    output: typeof CreateKeyspaceResponseSchema;
  },
  /**
   * CreateShard creates a new shard in the given cluster and keyspace.
   *
   * @generated from rpc vtadmin.VTAdmin.CreateShard
   */
  createShard: {
    methodKind: "unary";
    input: typeof CreateShardRequestSchema;
    output: typeof CreateShardResponseSchema;
  },
  /**
   * DeleteKeyspace deletes a keyspace in the given cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.DeleteKeyspace
   */
  deleteKeyspace: {
    methodKind: "unary";
    input: typeof DeleteKeyspaceRequestSchema;
    output: typeof DeleteKeyspaceResponseSchema;
  },
  /**
   * DeleteShard deletes one or more shards in the given cluster and keyspace.
   *
   * @generated from rpc vtadmin.VTAdmin.DeleteShards
   */
  deleteShards: {
    methodKind: "unary";
    input: typeof DeleteShardsRequestSchema;
    output: typeof DeleteShardsResponseSchema;
  },
  /**
   * DeleteTablet deletes a tablet from the topology
   *
   * @generated from rpc vtadmin.VTAdmin.DeleteTablet
   */
  deleteTablet: {
    methodKind: "unary";
    input: typeof DeleteTabletRequestSchema;
    output: typeof DeleteTabletResponseSchema;
  },
  /**
   * EmergencyFailoverShard fails over a shard to a new primary. It assumes
   * the old primary is dead or otherwise not responding.
   *
   * @generated from rpc vtadmin.VTAdmin.EmergencyFailoverShard
   */
  emergencyFailoverShard: {
    methodKind: "unary";
    input: typeof EmergencyFailoverShardRequestSchema;
    output: typeof EmergencyFailoverShardResponseSchema;
  },
  /**
   * FindSchema returns a single Schema that matches the provided table name
   * across all specified clusters IDs. Not specifying a set of cluster IDs
   * causes the search to span all configured clusters.
   *
   * An error occurs if either no table exists across any of the clusters with
   * the specified table name, or if multiple tables exist with that name.
   *
   * @generated from rpc vtadmin.VTAdmin.FindSchema
   */
  findSchema: {
    methodKind: "unary";
    input: typeof FindSchemaRequestSchema;
    output: typeof SchemaSchema;
  },
  /**
   * GetBackups returns backups grouped by cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.GetBackups
   */
  getBackups: {
    methodKind: "unary";
    input: typeof GetBackupsRequestSchema;
    output: typeof GetBackupsResponseSchema;
  },
  /**
   * GetCellInfos returns the CellInfo objects for the specified clusters.
   *
   * Callers may optionally restrict the set of CellInfos, or restrict the
   * response to include only cell names.
   *
   * @generated from rpc vtadmin.VTAdmin.GetCellInfos
   */
  getCellInfos: {
    methodKind: "unary";
    input: typeof GetCellInfosRequestSchema;
    output: typeof GetCellInfosResponseSchema;
  },
  /**
   * GetCellsAliases returns the CellsAliases data for the specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetCellsAliases
   */
  getCellsAliases: {
    methodKind: "unary";
    input: typeof GetCellsAliasesRequestSchema;
    output: typeof GetCellsAliasesResponseSchema;
  },
  /**
   * GetClusters returns all configured clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetClusters
   */
  getClusters: {
    methodKind: "unary";
    input: typeof GetClustersRequestSchema;
    output: typeof GetClustersResponseSchema;
  },
  /**
   * GetFullStatus returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
   *
   * @generated from rpc vtadmin.VTAdmin.GetFullStatus
   */
  getFullStatus: {
    methodKind: "unary";
    input: typeof GetFullStatusRequestSchema;
    output: typeof GetFullStatusResponseSchema;
  },
  /**
   * GetGates returns all gates across all the specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetGates
   */
  getGates: {
    methodKind: "unary";
    input: typeof GetGatesRequestSchema;
    output: typeof GetGatesResponseSchema;
  },
  /**
   * GetKeyspace returns a keyspace by name in the specified cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.GetKeyspace
   */
  getKeyspace: {
    methodKind: "unary";
    input: typeof GetKeyspaceRequestSchema;
    output: typeof KeyspaceSchema;
  },
  /**
   * GetKeyspaces returns all keyspaces across the specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetKeyspaces
   */
  getKeyspaces: {
    methodKind: "unary";
    input: typeof GetKeyspacesRequestSchema;
    output: typeof GetKeyspacesResponseSchema;
  },
  /**
   * GetSchema returns the schema for the specified (cluster, keyspace, table)
   * tuple.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSchema
   */
  getSchema: {
    methodKind: "unary";
    input: typeof GetSchemaRequestSchema;
    output: typeof SchemaSchema;
  },
  /**
   * GetSchemas returns all schemas across the specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSchemas
   */
  getSchemas: {
    methodKind: "unary";
    input: typeof GetSchemasRequestSchema;
    output: typeof GetSchemasResponseSchema;
  },
  /**
   * GetSchemaMigrations returns one or more online schema migrations for the
   * set of keyspaces (or all keyspaces) in the given clusters, analagous to
   * repeated executions of `SHOW VITESS_MIGRATIONS`.
   *
   * Different fields in the request message result in different behaviors.
   * See the documentation on vtctldata.GetSchemaMigrationsRequest for details.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSchemaMigrations
   */
  getSchemaMigrations: {
    methodKind: "unary";
    input: typeof GetSchemaMigrationsRequestSchema;
    output: typeof GetSchemaMigrationsResponseSchema;
  },
  /**
   * GetShardReplicationPositions returns shard replication positions grouped
   * by cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.GetShardReplicationPositions
   */
  getShardReplicationPositions: {
    methodKind: "unary";
    input: typeof GetShardReplicationPositionsRequestSchema;
    output: typeof GetShardReplicationPositionsResponseSchema;
  },
  /**
   * GetSrvKeyspace returns the SrvKeyspace for a keyspace in one or more cells.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSrvKeyspace
   */
  getSrvKeyspace: {
    methodKind: "unary";
    input: typeof GetSrvKeyspaceRequestSchema;
    output: typeof GetSrvKeyspacesResponseSchema$1;
  },
  /**
   * GetSrvKeyspaces returns the SrvKeyspaces for all keyspaces across all the specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSrvKeyspaces
   */
  getSrvKeyspaces: {
    methodKind: "unary";
    input: typeof GetSrvKeyspacesRequestSchema;
    output: typeof GetSrvKeyspacesResponseSchema;
  },
  /**
   * GetSrvVSchema returns the SrvVSchema for the given cluster and cell.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSrvVSchema
   */
  getSrvVSchema: {
    methodKind: "unary";
    input: typeof GetSrvVSchemaRequestSchema;
    output: typeof SrvVSchemaSchema;
  },
  /**
   * GetSrvVSchemas returns all SrvVSchemas across all (or specified) clusters
   * and cells.
   *
   * @generated from rpc vtadmin.VTAdmin.GetSrvVSchemas
   */
  getSrvVSchemas: {
    methodKind: "unary";
    input: typeof GetSrvVSchemasRequestSchema;
    output: typeof GetSrvVSchemasResponseSchema;
  },
  /**
   * GetTablet looks up a tablet by hostname across all clusters and returns
   * the result.
   *
   * @generated from rpc vtadmin.VTAdmin.GetTablet
   */
  getTablet: {
    methodKind: "unary";
    input: typeof GetTabletRequestSchema;
    output: typeof TabletSchema;
  },
  /**
   * GetTablets returns all tablets across all the specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetTablets
   */
  getTablets: {
    methodKind: "unary";
    input: typeof GetTabletsRequestSchema;
    output: typeof GetTabletsResponseSchema;
  },
  /**
   * GetTopologyPath returns the cell located at the specified path in the topology server.
   *
   * @generated from rpc vtadmin.VTAdmin.GetTopologyPath
   */
  getTopologyPath: {
    methodKind: "unary";
    input: typeof GetTopologyPathRequestSchema;
    output: typeof GetTopologyPathResponseSchema;
  },
  /**
   * GetUnresolvedTransactions returns the unresolved transactions for the request.
   *
   * @generated from rpc vtadmin.VTAdmin.GetUnresolvedTransactions
   */
  getUnresolvedTransactions: {
    methodKind: "unary";
    input: typeof GetUnresolvedTransactionsRequestSchema;
    output: typeof GetUnresolvedTransactionsResponseSchema;
  },
  /**
   * GetVSchema returns a VSchema for the specified keyspace in the specified
   * cluster.
   *
   * @generated from rpc vtadmin.VTAdmin.GetVSchema
   */
  getVSchema: {
    methodKind: "unary";
    input: typeof GetVSchemaRequestSchema;
    output: typeof VSchemaSchema;
  },
  /**
   * GetVSchemas returns the VSchemas for all specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetVSchemas
   */
  getVSchemas: {
    methodKind: "unary";
    input: typeof GetVSchemasRequestSchema;
    output: typeof GetVSchemasResponseSchema;
  },
  /**
   * GetVtctlds returns the Vtctlds for all specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetVtctlds
   */
  getVtctlds: {
    methodKind: "unary";
    input: typeof GetVtctldsRequestSchema;
    output: typeof GetVtctldsResponseSchema;
  },
  /**
   * GetWorkflow returns a single Workflow for a given cluster, keyspace, and
   * workflow name.
   *
   * @generated from rpc vtadmin.VTAdmin.GetWorkflow
   */
  getWorkflow: {
    methodKind: "unary";
    input: typeof GetWorkflowRequestSchema;
    output: typeof WorkflowSchema;
  },
  /**
   * GetWorkflows returns the Workflows for all specified clusters.
   *
   * @generated from rpc vtadmin.VTAdmin.GetWorkflows
   */
  getWorkflows: {
    methodKind: "unary";
    input: typeof GetWorkflowsRequestSchema;
    output: typeof GetWorkflowsResponseSchema;
  },
  /**
   * GetWorkflowStatus returns the status for a specific workflow.
   *
   * @generated from rpc vtadmin.VTAdmin.GetWorkflowStatus
   */
  getWorkflowStatus: {
    methodKind: "unary";
    input: typeof GetWorkflowStatusRequestSchema;
    output: typeof WorkflowStatusResponseSchema;
  },
  /**
   * StartWorkflow starts a vreplication workflow.
   *
   * @generated from rpc vtadmin.VTAdmin.StartWorkflow
   */
  startWorkflow: {
    methodKind: "unary";
    input: typeof StartWorkflowRequestSchema;
    output: typeof WorkflowUpdateResponseSchema;
  },
  /**
   * StopWorkflow stops a vreplication workflow.
   *
   * @generated from rpc vtadmin.VTAdmin.StopWorkflow
   */
  stopWorkflow: {
    methodKind: "unary";
    input: typeof StopWorkflowRequestSchema;
    output: typeof WorkflowUpdateResponseSchema;
  },
  /**
   * LaunchSchemaMigration launches one or all migrations in the given
   * cluster executed with --postpone-launch.
   *
   * @generated from rpc vtadmin.VTAdmin.LaunchSchemaMigration
   */
  launchSchemaMigration: {
    methodKind: "unary";
    input: typeof LaunchSchemaMigrationRequestSchema;
    output: typeof LaunchSchemaMigrationResponseSchema;
  },
  /**
   * MoveTablesCreate creates a workflow which moves one or more tables from a
   * source keyspace to a target keyspace.
   *
   * @generated from rpc vtadmin.VTAdmin.MoveTablesCreate
   */
  moveTablesCreate: {
    methodKind: "unary";
    input: typeof MoveTablesCreateRequestSchema;
    output: typeof WorkflowStatusResponseSchema;
  },
  /**
   * PingTablet checks that the specified tablet is awake and responding to
   * RPCs. This command can be blocked by other in-flight operations.
   *
   * @generated from rpc vtadmin.VTAdmin.PingTablet
   */
  pingTablet: {
    methodKind: "unary";
    input: typeof PingTabletRequestSchema;
    output: typeof PingTabletResponseSchema;
  },
  /**
   * PlannedFailoverShard fails over the shard to a new primary, or away from
   * an old primary. Both the old and new primaries must be reachable and
   * running.
   *
   * NOTE: A planned failover will not consider replicas outside the current
   * shard primary's cell as promotion candidates unless NewPrimary is
   * explicitly provided in the request.
   *
   * @generated from rpc vtadmin.VTAdmin.PlannedFailoverShard
   */
  plannedFailoverShard: {
    methodKind: "unary";
    input: typeof PlannedFailoverShardRequestSchema;
    output: typeof PlannedFailoverShardResponseSchema;
  },
  /**
   * RebuildKeyspaceGraph rebuilds the serving data for a keyspace.
   *
   * @generated from rpc vtadmin.VTAdmin.RebuildKeyspaceGraph
   */
  rebuildKeyspaceGraph: {
    methodKind: "unary";
    input: typeof RebuildKeyspaceGraphRequestSchema;
    output: typeof RebuildKeyspaceGraphResponseSchema;
  },
  /**
   * RefreshState reloads the tablet record on the specified tablet.
   *
   * @generated from rpc vtadmin.VTAdmin.RefreshState
   */
  refreshState: {
    methodKind: "unary";
    input: typeof RefreshStateRequestSchema;
    output: typeof RefreshStateResponseSchema;
  },
  /**
   * RefreshTabletReplicationSource performs a `CHANGE REPLICATION SOURCE TO`
   * on a tablet to replicate from the current primary in the shard.
   *
   * @generated from rpc vtadmin.VTAdmin.RefreshTabletReplicationSource
   */
  refreshTabletReplicationSource: {
    methodKind: "unary";
    input: typeof RefreshTabletReplicationSourceRequestSchema;
    output: typeof RefreshTabletReplicationSourceResponseSchema;
  },
  /**
   * ReloadSchemas reloads the schema definition across keyspaces, shards, or
   * tablets in one or more clusters, depending on the request fields (see
   * ReloadSchemasRequest for details).
   *
   * @generated from rpc vtadmin.VTAdmin.ReloadSchemas
   */
  reloadSchemas: {
    methodKind: "unary";
    input: typeof ReloadSchemasRequestSchema;
    output: typeof ReloadSchemasResponseSchema;
  },
  /**
   * ReloadSchemaShard reloads the schema on all tablets in a shard. This is done on a best-effort basis.
   *
   * @generated from rpc vtadmin.VTAdmin.ReloadSchemaShard
   */
  reloadSchemaShard: {
    methodKind: "unary";
    input: typeof ReloadSchemaShardRequestSchema;
    output: typeof ReloadSchemaShardResponseSchema;
  },
  /**
   * RemoveKeyspaceCell removes the cell from the Cells list for all shards in the keyspace, and the SrvKeyspace for that keyspace in that cell.
   *
   * @generated from rpc vtadmin.VTAdmin.RemoveKeyspaceCell
   */
  removeKeyspaceCell: {
    methodKind: "unary";
    input: typeof RemoveKeyspaceCellRequestSchema;
    output: typeof RemoveKeyspaceCellResponseSchema;
  },
  /**
   * RetrySchemaMigration marks a given schema migration in the given cluster
   * for retry.
   *
   * @generated from rpc vtadmin.VTAdmin.RetrySchemaMigration
   */
  retrySchemaMigration: {
    methodKind: "unary";
    input: typeof RetrySchemaMigrationRequestSchema;
    output: typeof RetrySchemaMigrationResponseSchema;
  },
  /**
   * RunHealthCheck runs a healthcheck on the tablet.
   *
   * @generated from rpc vtadmin.VTAdmin.RunHealthCheck
   */
  runHealthCheck: {
    methodKind: "unary";
    input: typeof RunHealthCheckRequestSchema;
    output: typeof RunHealthCheckResponseSchema;
  },
  /**
   * SetReadOnly sets the tablet to read-only mode.
   *
   * @generated from rpc vtadmin.VTAdmin.SetReadOnly
   */
  setReadOnly: {
    methodKind: "unary";
    input: typeof SetReadOnlyRequestSchema;
    output: typeof SetReadOnlyResponseSchema;
  },
  /**
   * SetReadWrite sets the tablet to read-write mode.
   *
   * @generated from rpc vtadmin.VTAdmin.SetReadWrite
   */
  setReadWrite: {
    methodKind: "unary";
    input: typeof SetReadWriteRequestSchema;
    output: typeof SetReadWriteResponseSchema;
  },
  /**
   * StartReplication runs the underlying database command to start
   * replication on a tablet.
   *
   * @generated from rpc vtadmin.VTAdmin.StartReplication
   */
  startReplication: {
    methodKind: "unary";
    input: typeof StartReplicationRequestSchema;
    output: typeof StartReplicationResponseSchema;
  },
  /**
   * StopReplication runs the underlying database command to stop replication
   * on a tablet
   *
   * @generated from rpc vtadmin.VTAdmin.StopReplication
   */
  stopReplication: {
    methodKind: "unary";
    input: typeof StopReplicationRequestSchema;
    output: typeof StopReplicationResponseSchema;
  },
  /**
   * TabletExternallyPromoted updates the metadata in a cluster's topology
   * to acknowledge a shard primary change performed by an external tool
   * (e.g. orchestrator*).
   *
   * See the Reparenting guide for more information:
   * https://vitess.io/docs/user-guides/configuration-advanced/reparenting/#external-reparenting.
   *
   * * "orchestrator" here refers to external orchestrator, not the newer,
   * Vitess-aware orchestrator, VTOrc.
   *
   * @generated from rpc vtadmin.VTAdmin.TabletExternallyPromoted
   */
  tabletExternallyPromoted: {
    methodKind: "unary";
    input: typeof TabletExternallyPromotedRequestSchema;
    output: typeof TabletExternallyPromotedResponseSchema;
  },
  /**
   * Validate validates all nodes in a cluster that are reachable from the global replication graph,
   * as well as all tablets in discoverable cells, are consistent
   *
   * @generated from rpc vtadmin.VTAdmin.Validate
   */
  validate: {
    methodKind: "unary";
    input: typeof ValidateRequestSchema;
    output: typeof ValidateResponseSchema;
  },
  /**
   * ValidateKeyspace validates that all nodes reachable from the specified
   * keyspace are consistent.
   *
   * @generated from rpc vtadmin.VTAdmin.ValidateKeyspace
   */
  validateKeyspace: {
    methodKind: "unary";
    input: typeof ValidateKeyspaceRequestSchema;
    output: typeof ValidateKeyspaceResponseSchema;
  },
  /**
   * ValidateSchemaKeyspace validates that the schema on the primary tablet
   * for shard 0 matches the schema on all of the other tablets in the
   * keyspace.
   *
   * @generated from rpc vtadmin.VTAdmin.ValidateSchemaKeyspace
   */
  validateSchemaKeyspace: {
    methodKind: "unary";
    input: typeof ValidateSchemaKeyspaceRequestSchema;
    output: typeof ValidateSchemaKeyspaceResponseSchema;
  },
  /**
   * ValidateShard validates that that all nodes reachable from the specified shard are consistent.
   *
   * @generated from rpc vtadmin.VTAdmin.ValidateShard
   */
  validateShard: {
    methodKind: "unary";
    input: typeof ValidateShardRequestSchema;
    output: typeof ValidateShardResponseSchema;
  },
  /**
   * ValidateVersionKeyspace validates that the version on the primary of
   * shard 0 matches all of the other tablets in the keyspace.
   *
   * @generated from rpc vtadmin.VTAdmin.ValidateVersionKeyspace
   */
  validateVersionKeyspace: {
    methodKind: "unary";
    input: typeof ValidateVersionKeyspaceRequestSchema;
    output: typeof ValidateVersionKeyspaceResponseSchema;
  },
  /**
   * ValidateVersionShard validates that the version on the primary matches all of the replicas.
   *
   * @generated from rpc vtadmin.VTAdmin.ValidateVersionShard
   */
  validateVersionShard: {
    methodKind: "unary";
    input: typeof ValidateVersionShardRequestSchema;
    output: typeof ValidateVersionShardResponseSchema;
  },
  /**
   * VTExplain provides information on how Vitess plans to execute a
   * particular query.
   *
   * @generated from rpc vtadmin.VTAdmin.VTExplain
   */
  vTExplain: {
    methodKind: "unary";
    input: typeof VTExplainRequestSchema;
    output: typeof VTExplainResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_vtadmin, 0);

