// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "binlogservice.proto" (package "binlogservice", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This file contains the UpdateStream service definition, necessary
// to make RPC calls to VtTablet for the binlog protocol, used by
// filtered replication only.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UpdateStream } from "./binlogservice";
import type { StreamTablesResponse } from "./binlogdata";
import type { StreamTablesRequest } from "./binlogdata";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamKeyRangeResponse } from "./binlogdata";
import type { StreamKeyRangeRequest } from "./binlogdata";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * UpdateStream is the RPC version of binlog.UpdateStream.
 *
 * @generated from protobuf service binlogservice.UpdateStream
 */
export interface IUpdateStreamClient {
    /**
     * StreamKeyRange returns the binlog transactions related to
     * the specified Keyrange.
     *
     * @generated from protobuf rpc: StreamKeyRange(binlogdata.StreamKeyRangeRequest) returns (stream binlogdata.StreamKeyRangeResponse);
     */
    streamKeyRange(input: StreamKeyRangeRequest, options?: RpcOptions): ServerStreamingCall<StreamKeyRangeRequest, StreamKeyRangeResponse>;
    /**
     * StreamTables returns the binlog transactions related to
     * the specified Tables.
     *
     * @generated from protobuf rpc: StreamTables(binlogdata.StreamTablesRequest) returns (stream binlogdata.StreamTablesResponse);
     */
    streamTables(input: StreamTablesRequest, options?: RpcOptions): ServerStreamingCall<StreamTablesRequest, StreamTablesResponse>;
}
/**
 * UpdateStream is the RPC version of binlog.UpdateStream.
 *
 * @generated from protobuf service binlogservice.UpdateStream
 */
export class UpdateStreamClient implements IUpdateStreamClient, ServiceInfo {
    typeName = UpdateStream.typeName;
    methods = UpdateStream.methods;
    options = UpdateStream.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * StreamKeyRange returns the binlog transactions related to
     * the specified Keyrange.
     *
     * @generated from protobuf rpc: StreamKeyRange(binlogdata.StreamKeyRangeRequest) returns (stream binlogdata.StreamKeyRangeResponse);
     */
    streamKeyRange(input: StreamKeyRangeRequest, options?: RpcOptions): ServerStreamingCall<StreamKeyRangeRequest, StreamKeyRangeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamKeyRangeRequest, StreamKeyRangeResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * StreamTables returns the binlog transactions related to
     * the specified Tables.
     *
     * @generated from protobuf rpc: StreamTables(binlogdata.StreamTablesRequest) returns (stream binlogdata.StreamTablesResponse);
     */
    streamTables(input: StreamTablesRequest, options?: RpcOptions): ServerStreamingCall<StreamTablesRequest, StreamTablesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamTablesRequest, StreamTablesResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
