//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the vttest topology configuration structures.
//
// The protobuf message "VTTestTopology" specifies the Vitess and
// database configuration of the "vttest" test component which can be
// used in end-to-end tests to test an application against an actual
// Vitess and MySQL server.
//
// To start a "vttest" instance, pass the "VTTestTopology" message,
// encoded in the protobuf compact text format, to
// py/vttest/run_local_database.py which in turn will send it to the
// Vitess test binary called "vtcombo".
//
// To encode a "VTTestTopology" message in the protobuf compact text
// format, create the protobuf in your test's native language first
// and then use the protobuf library to encode it as text.
// For an example in Python, see: test/vttest_sample_test.py
// In go, see: go/vt/vttest/local_cluster_test.go
//
// Sample encoded proto configurations would be as follow. Note there are
// multiple encoding options, see the proto documentation for more info
// (first and last quote not included in the encoding):
// - single keyspace named test_keyspace with one shard '0':
//   'keyspaces:<name:"test_keyspace" shards:<name:"0" > > '
// - two keyspaces, one with two shards, the other one with a redirect:
//   'keyspaces { name: "test_keyspace" shards { name: "-80" } shards { name: "80-" } } keyspaces { name: "redirect" served_from: "test_keyspace" }'

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file vttest.proto (package vttest, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { MirrorRules, MirrorRulesJson, RoutingRules, RoutingRulesJson } from "./vschema_pb";
import { file_vschema } from "./vschema_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file vttest.proto.
 */
export const file_vttest: GenFile = /*@__PURE__*/
  fileDesc("Cgx2dHRlc3QucHJvdG8SBnZ0dGVzdCIvCgVTaGFyZBIMCgRuYW1lGAEgASgJEhgKEGRiX25hbWVfb3ZlcnJpZGUYAiABKAkidgoIS2V5c3BhY2USDAoEbmFtZRgBIAEoCRIdCgZzaGFyZHMYAiADKAsyDS52dHRlc3QuU2hhcmQSFQoNcmVwbGljYV9jb3VudBgGIAEoBRIUCgxyZG9ubHlfY291bnQYByABKAVKBAgDEARKBAgEEAVKBAgFEAYingEKDlZUVGVzdFRvcG9sb2d5EiMKCWtleXNwYWNlcxgBIAMoCzIQLnZ0dGVzdC5LZXlzcGFjZRINCgVjZWxscxgCIAMoCRIsCg1yb3V0aW5nX3J1bGVzGAMgASgLMhUudnNjaGVtYS5Sb3V0aW5nUnVsZXMSKgoMbWlycm9yX3J1bGVzGAQgASgLMhQudnNjaGVtYS5NaXJyb3JSdWxlc0IlWiN2aXRlc3MuaW8vdml0ZXNzL2dvL3Z0L3Byb3RvL3Z0dGVzdGIGcHJvdG8z", [file_vschema]);

/**
 * Shard describes a single shard in a keyspace.
 *
 * @generated from message vttest.Shard
 */
export type Shard = Message<"vttest.Shard"> & {
  /**
   * name has to be unique in a keyspace. For unsharded keyspaces, it
   * should be '0'. For sharded keyspace, it should be derived from
   * the keyrange, like '-80' or '40-80'.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * db_name_override is the mysql db name for this shard. Has to be
   * globally unique. If not specified, we will by default use
   * 'vt_<keyspace>_<shard>'.
   *
   * @generated from field: string db_name_override = 2;
   */
  dbNameOverride: string;
};

/**
 * Shard describes a single shard in a keyspace.
 *
 * @generated from message vttest.Shard
 */
export type ShardJson = {
  /**
   * name has to be unique in a keyspace. For unsharded keyspaces, it
   * should be '0'. For sharded keyspace, it should be derived from
   * the keyrange, like '-80' or '40-80'.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * db_name_override is the mysql db name for this shard. Has to be
   * globally unique. If not specified, we will by default use
   * 'vt_<keyspace>_<shard>'.
   *
   * @generated from field: string db_name_override = 2;
   */
  dbNameOverride?: string;
};

/**
 * Describes the message vttest.Shard.
 * Use `create(ShardSchema)` to create a new message.
 */
export const ShardSchema: GenMessage<Shard, ShardJson> = /*@__PURE__*/
  messageDesc(file_vttest, 0);

/**
 * Keyspace describes a single keyspace.
 *
 * @generated from message vttest.Keyspace
 */
export type Keyspace = Message<"vttest.Keyspace"> & {
  /**
   * name has to be unique in a VTTestTopology.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * shards inside this keyspace. Ignored if redirect is set.
   *
   * @generated from field: repeated vttest.Shard shards = 2;
   */
  shards: Shard[];

  /**
   * number of replica tablets to instantiate. This includes the primary tablet.
   *
   * @generated from field: int32 replica_count = 6;
   */
  replicaCount: number;

  /**
   * number of rdonly tablets to instantiate.
   *
   * @generated from field: int32 rdonly_count = 7;
   */
  rdonlyCount: number;
};

/**
 * Keyspace describes a single keyspace.
 *
 * @generated from message vttest.Keyspace
 */
export type KeyspaceJson = {
  /**
   * name has to be unique in a VTTestTopology.
   *
   * @generated from field: string name = 1;
   */
  name?: string;

  /**
   * shards inside this keyspace. Ignored if redirect is set.
   *
   * @generated from field: repeated vttest.Shard shards = 2;
   */
  shards?: ShardJson[];

  /**
   * number of replica tablets to instantiate. This includes the primary tablet.
   *
   * @generated from field: int32 replica_count = 6;
   */
  replicaCount?: number;

  /**
   * number of rdonly tablets to instantiate.
   *
   * @generated from field: int32 rdonly_count = 7;
   */
  rdonlyCount?: number;
};

/**
 * Describes the message vttest.Keyspace.
 * Use `create(KeyspaceSchema)` to create a new message.
 */
export const KeyspaceSchema: GenMessage<Keyspace, KeyspaceJson> = /*@__PURE__*/
  messageDesc(file_vttest, 1);

/**
 * VTTestTopology describes the keyspaces in the topology.
 *
 * @generated from message vttest.VTTestTopology
 */
export type VTTestTopology = Message<"vttest.VTTestTopology"> & {
  /**
   * all keyspaces in the topology.
   *
   * @generated from field: repeated vttest.Keyspace keyspaces = 1;
   */
  keyspaces: Keyspace[];

  /**
   * list of cells the keyspaces reside in. Vtgate is started in only the first cell.
   *
   * @generated from field: repeated string cells = 2;
   */
  cells: string[];

  /**
   * routing rules for the topology.
   *
   * @generated from field: vschema.RoutingRules routing_rules = 3;
   */
  routingRules?: RoutingRules;

  /**
   * mirror rules for the topology.
   *
   * @generated from field: vschema.MirrorRules mirror_rules = 4;
   */
  mirrorRules?: MirrorRules;
};

/**
 * VTTestTopology describes the keyspaces in the topology.
 *
 * @generated from message vttest.VTTestTopology
 */
export type VTTestTopologyJson = {
  /**
   * all keyspaces in the topology.
   *
   * @generated from field: repeated vttest.Keyspace keyspaces = 1;
   */
  keyspaces?: KeyspaceJson[];

  /**
   * list of cells the keyspaces reside in. Vtgate is started in only the first cell.
   *
   * @generated from field: repeated string cells = 2;
   */
  cells?: string[];

  /**
   * routing rules for the topology.
   *
   * @generated from field: vschema.RoutingRules routing_rules = 3;
   */
  routingRules?: RoutingRulesJson;

  /**
   * mirror rules for the topology.
   *
   * @generated from field: vschema.MirrorRules mirror_rules = 4;
   */
  mirrorRules?: MirrorRulesJson;
};

/**
 * Describes the message vttest.VTTestTopology.
 * Use `create(VTTestTopologySchema)` to create a new message.
 */
export const VTTestTopologySchema: GenMessage<VTTestTopology, VTTestTopologyJson> = /*@__PURE__*/
  messageDesc(file_vttest, 2);

