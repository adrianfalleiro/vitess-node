//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Service definition for vtgateservice.
// This is the main entry point to Vitess.

// @generated by protoc-gen-json-service-es v1.0.0 with parameter "target=ts"
// @generated from file vtgateservice.proto (package vtgateservice, syntax proto3)
/* eslint-disable */

import type { CallOptions, Client } from "@connectrpc/connect";
import { createClient } from "@connectrpc/connect";
import { Vitess } from "./vtgateservice_pb";
import type { GrpcTransportOptions } from "@connectrpc/connect-node";
import { createGrpcTransport } from "@connectrpc/connect-node";
import type { CloseSessionRequestJson, CloseSessionResponseJson, ExecuteBatchRequestJson, ExecuteBatchResponseJson, ExecuteRequestJson, ExecuteResponseJson, PrepareRequestJson, PrepareResponseJson, StreamExecuteRequestJson, StreamExecuteResponseJson, VStreamRequestJson, VStreamResponseJson } from "./vtgate_pb";
import { CloseSessionRequestSchema, CloseSessionResponseSchema, ExecuteBatchRequestSchema, ExecuteBatchResponseSchema, ExecuteRequestSchema, ExecuteResponseSchema, PrepareRequestSchema, PrepareResponseSchema, StreamExecuteRequestSchema, StreamExecuteResponseSchema, VStreamRequestSchema, VStreamResponseSchema } from "./vtgate_pb";
import { fromJson, toJson } from "@bufbuild/protobuf";

/**
 * Vitess is the main service to access a Vitess cluster. It is the API that vtgate
 * exposes to serve all queries.
 *
 * @generated from service vtgateservice.Vitess
 */
export class VitessClient {
  #client: Client<typeof Vitess>;

  constructor(options: GrpcTransportOptions) {
    const transport = createGrpcTransport(options);
    this.#client = createClient(Vitess, transport);
  }

  async execute(params: ExecuteRequestJson, opts?: CallOptions): Promise<ExecuteResponseJson> {
    const response = await this.#client.execute(fromJson(ExecuteRequestSchema, params), opts);
    return toJson(ExecuteResponseSchema, response);
  }

  async executeBatch(params: ExecuteBatchRequestJson, opts?: CallOptions): Promise<ExecuteBatchResponseJson> {
    const response = await this.#client.executeBatch(fromJson(ExecuteBatchRequestSchema, params), opts);
    return toJson(ExecuteBatchResponseSchema, response);
  }

  async *streamExecute(params: StreamExecuteRequestJson, opts?: CallOptions): AsyncGenerator<StreamExecuteResponseJson> {
    const stream = this.#client.streamExecute(fromJson(StreamExecuteRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(StreamExecuteResponseSchema, response);
    }
  }

  async *vStream(params: VStreamRequestJson, opts?: CallOptions): AsyncGenerator<VStreamResponseJson> {
    const stream = this.#client.vStream(fromJson(VStreamRequestSchema, params), opts);
    for await (const response of stream) {
      yield toJson(VStreamResponseSchema, response);
    }
  }

  async prepare(params: PrepareRequestJson, opts?: CallOptions): Promise<PrepareResponseJson> {
    const response = await this.#client.prepare(fromJson(PrepareRequestSchema, params), opts);
    return toJson(PrepareResponseSchema, response);
  }

  async closeSession(params: CloseSessionRequestJson, opts?: CallOptions): Promise<CloseSessionResponseJson> {
    const response = await this.#client.closeSession(fromJson(CloseSessionRequestSchema, params), opts);
    return toJson(CloseSessionResponseSchema, response);
  }

}
