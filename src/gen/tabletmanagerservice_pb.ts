//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains the service definition for making management API
// calls to VtTablet.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,json_types=true"
// @generated from file tabletmanagerservice.proto (package tabletmanagerservice, syntax proto3)
/* eslint-disable */

import type { GenFile, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { ApplySchemaRequestSchema, ApplySchemaResponseSchema, BackupRequestSchema, BackupResponseSchema, ChangeTagsRequestSchema, ChangeTagsResponseSchema, ChangeTypeRequestSchema, ChangeTypeResponseSchema, CheckThrottlerRequestSchema, CheckThrottlerResponseSchema, ConcludeTransactionRequestSchema, ConcludeTransactionResponseSchema, CreateVReplicationWorkflowRequestSchema, CreateVReplicationWorkflowResponseSchema, DeleteVReplicationWorkflowRequestSchema, DeleteVReplicationWorkflowResponseSchema, DemotePrimaryRequestSchema, DemotePrimaryResponseSchema, ExecuteFetchAsAllPrivsRequestSchema, ExecuteFetchAsAllPrivsResponseSchema, ExecuteFetchAsAppRequestSchema, ExecuteFetchAsAppResponseSchema, ExecuteFetchAsDbaRequestSchema, ExecuteFetchAsDbaResponseSchema, ExecuteHookRequestSchema, ExecuteHookResponseSchema, ExecuteMultiFetchAsDbaRequestSchema, ExecuteMultiFetchAsDbaResponseSchema, ExecuteQueryRequestSchema, ExecuteQueryResponseSchema, FullStatusRequestSchema, FullStatusResponseSchema, GetGlobalStatusVarsRequestSchema, GetGlobalStatusVarsResponseSchema, GetPermissionsRequestSchema, GetPermissionsResponseSchema, GetReplicasRequestSchema, GetReplicasResponseSchema, GetSchemaRequestSchema, GetSchemaResponseSchema, GetThrottlerStatusRequestSchema, GetThrottlerStatusResponseSchema, GetUnresolvedTransactionsRequestSchema, GetUnresolvedTransactionsResponseSchema, HasVReplicationWorkflowsRequestSchema, HasVReplicationWorkflowsResponseSchema, InitPrimaryRequestSchema, InitPrimaryResponseSchema, InitReplicaRequestSchema, InitReplicaResponseSchema, LockTablesRequestSchema, LockTablesResponseSchema, MysqlHostMetricsRequestSchema, MysqlHostMetricsResponseSchema, PingRequestSchema, PingResponseSchema, PopulateReparentJournalRequestSchema, PopulateReparentJournalResponseSchema, PreflightSchemaRequestSchema, PreflightSchemaResponseSchema, PrimaryPositionRequestSchema, PrimaryPositionResponseSchema, PrimaryStatusRequestSchema, PrimaryStatusResponseSchema, PromoteReplicaRequestSchema, PromoteReplicaResponseSchema, ReadReparentJournalInfoRequestSchema, ReadReparentJournalInfoResponseSchema, ReadTransactionRequestSchema, ReadTransactionResponseSchema, ReadVReplicationWorkflowRequestSchema, ReadVReplicationWorkflowResponseSchema, ReadVReplicationWorkflowsRequestSchema, ReadVReplicationWorkflowsResponseSchema, RefreshStateRequestSchema, RefreshStateResponseSchema, ReloadSchemaRequestSchema, ReloadSchemaResponseSchema, ReplicationStatusRequestSchema, ReplicationStatusResponseSchema, ReplicaWasPromotedRequestSchema, ReplicaWasPromotedResponseSchema, ReplicaWasRestartedRequestSchema, ReplicaWasRestartedResponseSchema, ResetReplicationParametersRequestSchema, ResetReplicationParametersResponseSchema, ResetReplicationRequestSchema, ResetReplicationResponseSchema, ResetSequencesRequestSchema, ResetSequencesResponseSchema, RestoreFromBackupRequestSchema, RestoreFromBackupResponseSchema, RunHealthCheckRequestSchema, RunHealthCheckResponseSchema, SetReadOnlyRequestSchema, SetReadOnlyResponseSchema, SetReadWriteRequestSchema, SetReadWriteResponseSchema, SetReplicationSourceRequestSchema, SetReplicationSourceResponseSchema, SleepRequestSchema, SleepResponseSchema, StartReplicationRequestSchema, StartReplicationResponseSchema, StartReplicationUntilAfterRequestSchema, StartReplicationUntilAfterResponseSchema, StopReplicationAndGetStatusRequestSchema, StopReplicationAndGetStatusResponseSchema, StopReplicationMinimumRequestSchema, StopReplicationMinimumResponseSchema, StopReplicationRequestSchema, StopReplicationResponseSchema, UndoDemotePrimaryRequestSchema, UndoDemotePrimaryResponseSchema, UnlockTablesRequestSchema, UnlockTablesResponseSchema, UpdateVReplicationWorkflowRequestSchema, UpdateVReplicationWorkflowResponseSchema, UpdateVReplicationWorkflowsRequestSchema, UpdateVReplicationWorkflowsResponseSchema, ValidateVReplicationPermissionsRequestSchema, ValidateVReplicationPermissionsResponseSchema, VDiffRequestSchema, VDiffResponseSchema, VReplicationExecRequestSchema, VReplicationExecResponseSchema, VReplicationWaitForPosRequestSchema, VReplicationWaitForPosResponseSchema, WaitForPositionRequestSchema, WaitForPositionResponseSchema } from "./tabletmanagerdata_pb";
import { file_tabletmanagerdata } from "./tabletmanagerdata_pb";

/**
 * Describes the file tabletmanagerservice.proto.
 */
export const file_tabletmanagerservice: GenFile = /*@__PURE__*/
  fileDesc("", [file_tabletmanagerdata]);

/**
 * TabletManager is a service definition for tabletmanagerdata.TabletManager.
 *
 *
 * Various read-only methods
 *
 *
 * @generated from service tabletmanagerservice.TabletManager
 */
export const TabletManager: GenService<{
  /**
   * Ping returns the input payload
   *
   * @generated from rpc tabletmanagerservice.TabletManager.Ping
   */
  ping: {
    methodKind: "unary";
    input: typeof PingRequestSchema;
    output: typeof PingResponseSchema;
  },
  /**
   * Sleep sleeps for the provided duration
   *
   * @generated from rpc tabletmanagerservice.TabletManager.Sleep
   */
  sleep: {
    methodKind: "unary";
    input: typeof SleepRequestSchema;
    output: typeof SleepResponseSchema;
  },
  /**
   * ExecuteHook executes the hook remotely
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ExecuteHook
   */
  executeHook: {
    methodKind: "unary";
    input: typeof ExecuteHookRequestSchema;
    output: typeof ExecuteHookResponseSchema;
  },
  /**
   * GetSchema asks the tablet for its schema
   *
   * @generated from rpc tabletmanagerservice.TabletManager.GetSchema
   */
  getSchema: {
    methodKind: "unary";
    input: typeof GetSchemaRequestSchema;
    output: typeof GetSchemaResponseSchema;
  },
  /**
   * GetPermissions asks the tablet for its permissions
   *
   * @generated from rpc tabletmanagerservice.TabletManager.GetPermissions
   */
  getPermissions: {
    methodKind: "unary";
    input: typeof GetPermissionsRequestSchema;
    output: typeof GetPermissionsResponseSchema;
  },
  /**
   * GetGlobalStatusVars returns the server's global status variables asked for.
   * An empty/nil variable name parameter slice means you want all of them.
   *
   * @generated from rpc tabletmanagerservice.TabletManager.GetGlobalStatusVars
   */
  getGlobalStatusVars: {
    methodKind: "unary";
    input: typeof GetGlobalStatusVarsRequestSchema;
    output: typeof GetGlobalStatusVarsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.SetReadOnly
   */
  setReadOnly: {
    methodKind: "unary";
    input: typeof SetReadOnlyRequestSchema;
    output: typeof SetReadOnlyResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.SetReadWrite
   */
  setReadWrite: {
    methodKind: "unary";
    input: typeof SetReadWriteRequestSchema;
    output: typeof SetReadWriteResponseSchema;
  },
  /**
   * ChangeTags asks the remote tablet to change its tags
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ChangeTags
   */
  changeTags: {
    methodKind: "unary";
    input: typeof ChangeTagsRequestSchema;
    output: typeof ChangeTagsResponseSchema;
  },
  /**
   * ChangeType asks the remote tablet to change its type
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ChangeType
   */
  changeType: {
    methodKind: "unary";
    input: typeof ChangeTypeRequestSchema;
    output: typeof ChangeTypeResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.RefreshState
   */
  refreshState: {
    methodKind: "unary";
    input: typeof RefreshStateRequestSchema;
    output: typeof RefreshStateResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.RunHealthCheck
   */
  runHealthCheck: {
    methodKind: "unary";
    input: typeof RunHealthCheckRequestSchema;
    output: typeof RunHealthCheckResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ReloadSchema
   */
  reloadSchema: {
    methodKind: "unary";
    input: typeof ReloadSchemaRequestSchema;
    output: typeof ReloadSchemaResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.PreflightSchema
   */
  preflightSchema: {
    methodKind: "unary";
    input: typeof PreflightSchemaRequestSchema;
    output: typeof PreflightSchemaResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ApplySchema
   */
  applySchema: {
    methodKind: "unary";
    input: typeof ApplySchemaRequestSchema;
    output: typeof ApplySchemaResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ResetSequences
   */
  resetSequences: {
    methodKind: "unary";
    input: typeof ResetSequencesRequestSchema;
    output: typeof ResetSequencesResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.LockTables
   */
  lockTables: {
    methodKind: "unary";
    input: typeof LockTablesRequestSchema;
    output: typeof LockTablesResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.UnlockTables
   */
  unlockTables: {
    methodKind: "unary";
    input: typeof UnlockTablesRequestSchema;
    output: typeof UnlockTablesResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ExecuteQuery
   */
  executeQuery: {
    methodKind: "unary";
    input: typeof ExecuteQueryRequestSchema;
    output: typeof ExecuteQueryResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ExecuteFetchAsDba
   */
  executeFetchAsDba: {
    methodKind: "unary";
    input: typeof ExecuteFetchAsDbaRequestSchema;
    output: typeof ExecuteFetchAsDbaResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ExecuteMultiFetchAsDba
   */
  executeMultiFetchAsDba: {
    methodKind: "unary";
    input: typeof ExecuteMultiFetchAsDbaRequestSchema;
    output: typeof ExecuteMultiFetchAsDbaResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ExecuteFetchAsAllPrivs
   */
  executeFetchAsAllPrivs: {
    methodKind: "unary";
    input: typeof ExecuteFetchAsAllPrivsRequestSchema;
    output: typeof ExecuteFetchAsAllPrivsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ExecuteFetchAsApp
   */
  executeFetchAsApp: {
    methodKind: "unary";
    input: typeof ExecuteFetchAsAppRequestSchema;
    output: typeof ExecuteFetchAsAppResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.GetUnresolvedTransactions
   */
  getUnresolvedTransactions: {
    methodKind: "unary";
    input: typeof GetUnresolvedTransactionsRequestSchema;
    output: typeof GetUnresolvedTransactionsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ReadTransaction
   */
  readTransaction: {
    methodKind: "unary";
    input: typeof ReadTransactionRequestSchema;
    output: typeof ReadTransactionResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ConcludeTransaction
   */
  concludeTransaction: {
    methodKind: "unary";
    input: typeof ConcludeTransactionRequestSchema;
    output: typeof ConcludeTransactionResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.MysqlHostMetrics
   */
  mysqlHostMetrics: {
    methodKind: "unary";
    input: typeof MysqlHostMetricsRequestSchema;
    output: typeof MysqlHostMetricsResponseSchema;
  },
  /**
   * ReplicationStatus returns the current replication status.
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ReplicationStatus
   */
  replicationStatus: {
    methodKind: "unary";
    input: typeof ReplicationStatusRequestSchema;
    output: typeof ReplicationStatusResponseSchema;
  },
  /**
   * PrimaryStatus returns the current primary status.
   *
   * @generated from rpc tabletmanagerservice.TabletManager.PrimaryStatus
   */
  primaryStatus: {
    methodKind: "unary";
    input: typeof PrimaryStatusRequestSchema;
    output: typeof PrimaryStatusResponseSchema;
  },
  /**
   * PrimaryPosition returns the current primary position
   *
   * @generated from rpc tabletmanagerservice.TabletManager.PrimaryPosition
   */
  primaryPosition: {
    methodKind: "unary";
    input: typeof PrimaryPositionRequestSchema;
    output: typeof PrimaryPositionResponseSchema;
  },
  /**
   * WaitForPosition waits for the position to be reached
   *
   * @generated from rpc tabletmanagerservice.TabletManager.WaitForPosition
   */
  waitForPosition: {
    methodKind: "unary";
    input: typeof WaitForPositionRequestSchema;
    output: typeof WaitForPositionResponseSchema;
  },
  /**
   * StopReplication makes mysql stop its replication
   *
   * @generated from rpc tabletmanagerservice.TabletManager.StopReplication
   */
  stopReplication: {
    methodKind: "unary";
    input: typeof StopReplicationRequestSchema;
    output: typeof StopReplicationResponseSchema;
  },
  /**
   * StopReplicationMinimum stops the mysql replication after it reaches
   * the provided minimum point
   *
   * @generated from rpc tabletmanagerservice.TabletManager.StopReplicationMinimum
   */
  stopReplicationMinimum: {
    methodKind: "unary";
    input: typeof StopReplicationMinimumRequestSchema;
    output: typeof StopReplicationMinimumResponseSchema;
  },
  /**
   * StartReplication starts the mysql replication
   *
   * @generated from rpc tabletmanagerservice.TabletManager.StartReplication
   */
  startReplication: {
    methodKind: "unary";
    input: typeof StartReplicationRequestSchema;
    output: typeof StartReplicationResponseSchema;
  },
  /**
   * StartReplicationUnitAfter starts the mysql replication until and including
   * the provided position
   *
   * @generated from rpc tabletmanagerservice.TabletManager.StartReplicationUntilAfter
   */
  startReplicationUntilAfter: {
    methodKind: "unary";
    input: typeof StartReplicationUntilAfterRequestSchema;
    output: typeof StartReplicationUntilAfterResponseSchema;
  },
  /**
   * GetReplicas asks for the list of mysql replicas
   *
   * @generated from rpc tabletmanagerservice.TabletManager.GetReplicas
   */
  getReplicas: {
    methodKind: "unary";
    input: typeof GetReplicasRequestSchema;
    output: typeof GetReplicasResponseSchema;
  },
  /**
   * VReplication API
   *
   * @generated from rpc tabletmanagerservice.TabletManager.CreateVReplicationWorkflow
   */
  createVReplicationWorkflow: {
    methodKind: "unary";
    input: typeof CreateVReplicationWorkflowRequestSchema;
    output: typeof CreateVReplicationWorkflowResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.DeleteVReplicationWorkflow
   */
  deleteVReplicationWorkflow: {
    methodKind: "unary";
    input: typeof DeleteVReplicationWorkflowRequestSchema;
    output: typeof DeleteVReplicationWorkflowResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.HasVReplicationWorkflows
   */
  hasVReplicationWorkflows: {
    methodKind: "unary";
    input: typeof HasVReplicationWorkflowsRequestSchema;
    output: typeof HasVReplicationWorkflowsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ReadVReplicationWorkflow
   */
  readVReplicationWorkflow: {
    methodKind: "unary";
    input: typeof ReadVReplicationWorkflowRequestSchema;
    output: typeof ReadVReplicationWorkflowResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ReadVReplicationWorkflows
   */
  readVReplicationWorkflows: {
    methodKind: "unary";
    input: typeof ReadVReplicationWorkflowsRequestSchema;
    output: typeof ReadVReplicationWorkflowsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.UpdateVReplicationWorkflow
   */
  updateVReplicationWorkflow: {
    methodKind: "unary";
    input: typeof UpdateVReplicationWorkflowRequestSchema;
    output: typeof UpdateVReplicationWorkflowResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.UpdateVReplicationWorkflows
   */
  updateVReplicationWorkflows: {
    methodKind: "unary";
    input: typeof UpdateVReplicationWorkflowsRequestSchema;
    output: typeof UpdateVReplicationWorkflowsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.ValidateVReplicationPermissions
   */
  validateVReplicationPermissions: {
    methodKind: "unary";
    input: typeof ValidateVReplicationPermissionsRequestSchema;
    output: typeof ValidateVReplicationPermissionsResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.VReplicationExec
   */
  vReplicationExec: {
    methodKind: "unary";
    input: typeof VReplicationExecRequestSchema;
    output: typeof VReplicationExecResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.VReplicationWaitForPos
   */
  vReplicationWaitForPos: {
    methodKind: "unary";
    input: typeof VReplicationWaitForPosRequestSchema;
    output: typeof VReplicationWaitForPosResponseSchema;
  },
  /**
   * VDiff API
   *
   * @generated from rpc tabletmanagerservice.TabletManager.VDiff
   */
  vDiff: {
    methodKind: "unary";
    input: typeof VDiffRequestSchema;
    output: typeof VDiffResponseSchema;
  },
  /**
   * ResetReplication makes the target not replicating
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ResetReplication
   */
  resetReplication: {
    methodKind: "unary";
    input: typeof ResetReplicationRequestSchema;
    output: typeof ResetReplicationResponseSchema;
  },
  /**
   * InitPrimary initializes the tablet as a primary
   *
   * @generated from rpc tabletmanagerservice.TabletManager.InitPrimary
   */
  initPrimary: {
    methodKind: "unary";
    input: typeof InitPrimaryRequestSchema;
    output: typeof InitPrimaryResponseSchema;
  },
  /**
   * PopulateReparentJournal tells the tablet to add an entry to its
   * reparent journal
   *
   * @generated from rpc tabletmanagerservice.TabletManager.PopulateReparentJournal
   */
  populateReparentJournal: {
    methodKind: "unary";
    input: typeof PopulateReparentJournalRequestSchema;
    output: typeof PopulateReparentJournalResponseSchema;
  },
  /**
   * ReadReparentJournalInfo reads the information from reparent journal
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ReadReparentJournalInfo
   */
  readReparentJournalInfo: {
    methodKind: "unary";
    input: typeof ReadReparentJournalInfoRequestSchema;
    output: typeof ReadReparentJournalInfoResponseSchema;
  },
  /**
   * InitReplica tells the tablet to reparent to the primary unconditionally
   *
   * @generated from rpc tabletmanagerservice.TabletManager.InitReplica
   */
  initReplica: {
    methodKind: "unary";
    input: typeof InitReplicaRequestSchema;
    output: typeof InitReplicaResponseSchema;
  },
  /**
   * DemotePrimary tells the soon-to-be-former primary it's gonna change
   *
   * @generated from rpc tabletmanagerservice.TabletManager.DemotePrimary
   */
  demotePrimary: {
    methodKind: "unary";
    input: typeof DemotePrimaryRequestSchema;
    output: typeof DemotePrimaryResponseSchema;
  },
  /**
   * UndoDemotePrimary reverts all changes made by DemotePrimary
   *
   * @generated from rpc tabletmanagerservice.TabletManager.UndoDemotePrimary
   */
  undoDemotePrimary: {
    methodKind: "unary";
    input: typeof UndoDemotePrimaryRequestSchema;
    output: typeof UndoDemotePrimaryResponseSchema;
  },
  /**
   * ReplicaWasPromoted tells the remote tablet it is now the primary
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ReplicaWasPromoted
   */
  replicaWasPromoted: {
    methodKind: "unary";
    input: typeof ReplicaWasPromotedRequestSchema;
    output: typeof ReplicaWasPromotedResponseSchema;
  },
  /**
   * ResetReplicationParameters resets the replica replication parameters
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ResetReplicationParameters
   */
  resetReplicationParameters: {
    methodKind: "unary";
    input: typeof ResetReplicationParametersRequestSchema;
    output: typeof ResetReplicationParametersResponseSchema;
  },
  /**
   * FullStatus collects and returns the full status of MySQL including the replication information, semi-sync information, GTID information among others
   *
   * @generated from rpc tabletmanagerservice.TabletManager.FullStatus
   */
  fullStatus: {
    methodKind: "unary";
    input: typeof FullStatusRequestSchema;
    output: typeof FullStatusResponseSchema;
  },
  /**
   * SetReplicationSource tells the replica to reparent
   *
   * @generated from rpc tabletmanagerservice.TabletManager.SetReplicationSource
   */
  setReplicationSource: {
    methodKind: "unary";
    input: typeof SetReplicationSourceRequestSchema;
    output: typeof SetReplicationSourceResponseSchema;
  },
  /**
   * ReplicaWasRestarted tells the remote tablet its primary has changed
   *
   * @generated from rpc tabletmanagerservice.TabletManager.ReplicaWasRestarted
   */
  replicaWasRestarted: {
    methodKind: "unary";
    input: typeof ReplicaWasRestartedRequestSchema;
    output: typeof ReplicaWasRestartedResponseSchema;
  },
  /**
   * StopReplicationAndGetStatus stops MySQL replication, and returns the
   * replication status
   *
   * @generated from rpc tabletmanagerservice.TabletManager.StopReplicationAndGetStatus
   */
  stopReplicationAndGetStatus: {
    methodKind: "unary";
    input: typeof StopReplicationAndGetStatusRequestSchema;
    output: typeof StopReplicationAndGetStatusResponseSchema;
  },
  /**
   * PromoteReplica makes the replica the new primary
   *
   * @generated from rpc tabletmanagerservice.TabletManager.PromoteReplica
   */
  promoteReplica: {
    methodKind: "unary";
    input: typeof PromoteReplicaRequestSchema;
    output: typeof PromoteReplicaResponseSchema;
  },
  /**
   * @generated from rpc tabletmanagerservice.TabletManager.Backup
   */
  backup: {
    methodKind: "server_streaming";
    input: typeof BackupRequestSchema;
    output: typeof BackupResponseSchema;
  },
  /**
   * RestoreFromBackup deletes all local data and restores it from the latest backup.
   *
   * @generated from rpc tabletmanagerservice.TabletManager.RestoreFromBackup
   */
  restoreFromBackup: {
    methodKind: "server_streaming";
    input: typeof RestoreFromBackupRequestSchema;
    output: typeof RestoreFromBackupResponseSchema;
  },
  /**
   * CheckThrottler issues a 'check' on a tablet's throttler
   *
   * @generated from rpc tabletmanagerservice.TabletManager.CheckThrottler
   */
  checkThrottler: {
    methodKind: "unary";
    input: typeof CheckThrottlerRequestSchema;
    output: typeof CheckThrottlerResponseSchema;
  },
  /**
   * GetThrottlerStatus gets the status of a tablet throttler
   *
   * @generated from rpc tabletmanagerservice.TabletManager.GetThrottlerStatus
   */
  getThrottlerStatus: {
    methodKind: "unary";
    input: typeof GetThrottlerStatusRequestSchema;
    output: typeof GetThrottlerStatusResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_tabletmanagerservice, 0);

