// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "mysqlctl.proto" (package "mysqlctl", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This file contains the service definition for making management API
// calls to mysqlctld.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MysqlCtl } from "./mysqlctl";
import type { HostMetricsResponse } from "./mysqlctl";
import type { HostMetricsRequest } from "./mysqlctl";
import type { VersionStringResponse } from "./mysqlctl";
import type { VersionStringRequest } from "./mysqlctl";
import type { RefreshConfigResponse } from "./mysqlctl";
import type { RefreshConfigRequest } from "./mysqlctl";
import type { ReinitConfigResponse } from "./mysqlctl";
import type { ReinitConfigRequest } from "./mysqlctl";
import type { ReadBinlogFilesTimestampsResponse } from "./mysqlctl";
import type { ReadBinlogFilesTimestampsRequest } from "./mysqlctl";
import type { ApplyBinlogFileResponse } from "./mysqlctl";
import type { ApplyBinlogFileRequest } from "./mysqlctl";
import type { RunMysqlUpgradeResponse } from "./mysqlctl";
import type { RunMysqlUpgradeRequest } from "./mysqlctl";
import type { ShutdownResponse } from "./mysqlctl";
import type { ShutdownRequest } from "./mysqlctl";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartResponse } from "./mysqlctl";
import type { StartRequest } from "./mysqlctl";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * MysqlCtl is the service definition
 *
 * @generated from protobuf service mysqlctl.MysqlCtl
 */
export interface IMysqlCtlClient {
    /**
     * @generated from protobuf rpc: Start(mysqlctl.StartRequest) returns (mysqlctl.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse>;
    /**
     * @generated from protobuf rpc: Shutdown(mysqlctl.ShutdownRequest) returns (mysqlctl.ShutdownResponse);
     */
    shutdown(input: ShutdownRequest, options?: RpcOptions): UnaryCall<ShutdownRequest, ShutdownResponse>;
    /**
     * @generated from protobuf rpc: RunMysqlUpgrade(mysqlctl.RunMysqlUpgradeRequest) returns (mysqlctl.RunMysqlUpgradeResponse);
     */
    runMysqlUpgrade(input: RunMysqlUpgradeRequest, options?: RpcOptions): UnaryCall<RunMysqlUpgradeRequest, RunMysqlUpgradeResponse>;
    /**
     * @generated from protobuf rpc: ApplyBinlogFile(mysqlctl.ApplyBinlogFileRequest) returns (mysqlctl.ApplyBinlogFileResponse);
     */
    applyBinlogFile(input: ApplyBinlogFileRequest, options?: RpcOptions): UnaryCall<ApplyBinlogFileRequest, ApplyBinlogFileResponse>;
    /**
     * @generated from protobuf rpc: ReadBinlogFilesTimestamps(mysqlctl.ReadBinlogFilesTimestampsRequest) returns (mysqlctl.ReadBinlogFilesTimestampsResponse);
     */
    readBinlogFilesTimestamps(input: ReadBinlogFilesTimestampsRequest, options?: RpcOptions): UnaryCall<ReadBinlogFilesTimestampsRequest, ReadBinlogFilesTimestampsResponse>;
    /**
     * @generated from protobuf rpc: ReinitConfig(mysqlctl.ReinitConfigRequest) returns (mysqlctl.ReinitConfigResponse);
     */
    reinitConfig(input: ReinitConfigRequest, options?: RpcOptions): UnaryCall<ReinitConfigRequest, ReinitConfigResponse>;
    /**
     * @generated from protobuf rpc: RefreshConfig(mysqlctl.RefreshConfigRequest) returns (mysqlctl.RefreshConfigResponse);
     */
    refreshConfig(input: RefreshConfigRequest, options?: RpcOptions): UnaryCall<RefreshConfigRequest, RefreshConfigResponse>;
    /**
     * @generated from protobuf rpc: VersionString(mysqlctl.VersionStringRequest) returns (mysqlctl.VersionStringResponse);
     */
    versionString(input: VersionStringRequest, options?: RpcOptions): UnaryCall<VersionStringRequest, VersionStringResponse>;
    /**
     * @generated from protobuf rpc: HostMetrics(mysqlctl.HostMetricsRequest) returns (mysqlctl.HostMetricsResponse);
     */
    hostMetrics(input: HostMetricsRequest, options?: RpcOptions): UnaryCall<HostMetricsRequest, HostMetricsResponse>;
}
/**
 * MysqlCtl is the service definition
 *
 * @generated from protobuf service mysqlctl.MysqlCtl
 */
export class MysqlCtlClient implements IMysqlCtlClient, ServiceInfo {
    typeName = MysqlCtl.typeName;
    methods = MysqlCtl.methods;
    options = MysqlCtl.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Start(mysqlctl.StartRequest) returns (mysqlctl.StartResponse);
     */
    start(input: StartRequest, options?: RpcOptions): UnaryCall<StartRequest, StartResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRequest, StartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Shutdown(mysqlctl.ShutdownRequest) returns (mysqlctl.ShutdownResponse);
     */
    shutdown(input: ShutdownRequest, options?: RpcOptions): UnaryCall<ShutdownRequest, ShutdownResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShutdownRequest, ShutdownResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RunMysqlUpgrade(mysqlctl.RunMysqlUpgradeRequest) returns (mysqlctl.RunMysqlUpgradeResponse);
     */
    runMysqlUpgrade(input: RunMysqlUpgradeRequest, options?: RpcOptions): UnaryCall<RunMysqlUpgradeRequest, RunMysqlUpgradeResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunMysqlUpgradeRequest, RunMysqlUpgradeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ApplyBinlogFile(mysqlctl.ApplyBinlogFileRequest) returns (mysqlctl.ApplyBinlogFileResponse);
     */
    applyBinlogFile(input: ApplyBinlogFileRequest, options?: RpcOptions): UnaryCall<ApplyBinlogFileRequest, ApplyBinlogFileResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ApplyBinlogFileRequest, ApplyBinlogFileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReadBinlogFilesTimestamps(mysqlctl.ReadBinlogFilesTimestampsRequest) returns (mysqlctl.ReadBinlogFilesTimestampsResponse);
     */
    readBinlogFilesTimestamps(input: ReadBinlogFilesTimestampsRequest, options?: RpcOptions): UnaryCall<ReadBinlogFilesTimestampsRequest, ReadBinlogFilesTimestampsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReadBinlogFilesTimestampsRequest, ReadBinlogFilesTimestampsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReinitConfig(mysqlctl.ReinitConfigRequest) returns (mysqlctl.ReinitConfigResponse);
     */
    reinitConfig(input: ReinitConfigRequest, options?: RpcOptions): UnaryCall<ReinitConfigRequest, ReinitConfigResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReinitConfigRequest, ReinitConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RefreshConfig(mysqlctl.RefreshConfigRequest) returns (mysqlctl.RefreshConfigResponse);
     */
    refreshConfig(input: RefreshConfigRequest, options?: RpcOptions): UnaryCall<RefreshConfigRequest, RefreshConfigResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RefreshConfigRequest, RefreshConfigResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VersionString(mysqlctl.VersionStringRequest) returns (mysqlctl.VersionStringResponse);
     */
    versionString(input: VersionStringRequest, options?: RpcOptions): UnaryCall<VersionStringRequest, VersionStringResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<VersionStringRequest, VersionStringResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: HostMetrics(mysqlctl.HostMetricsRequest) returns (mysqlctl.HostMetricsResponse);
     */
    hostMetrics(input: HostMetricsRequest, options?: RpcOptions): UnaryCall<HostMetricsRequest, HostMetricsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<HostMetricsRequest, HostMetricsResponse>("unary", this._transport, method, opt, input);
    }
}
