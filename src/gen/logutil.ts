// @generated by protobuf-ts 2.9.6 with parameter long_type_bigint
// @generated from protobuf file "logutil.proto" (package "logutil", syntax proto3)
// tslint:disable
//
//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
//
// This package contains the data structures for the logging service.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Time } from "./vttime";
/**
 * Event is a single logging event
 *
 * @generated from protobuf message logutil.Event
 */
export interface Event {
    /**
     * @generated from protobuf field: vttime.Time time = 1;
     */
    time?: Time;
    /**
     * @generated from protobuf field: logutil.Level level = 2;
     */
    level: Level;
    /**
     * @generated from protobuf field: string file = 3;
     */
    file: string;
    /**
     * @generated from protobuf field: int64 line = 4;
     */
    line: bigint;
    /**
     * @generated from protobuf field: string value = 5;
     */
    value: string;
}
/**
 * Level is the level of the log messages.
 *
 * @generated from protobuf enum logutil.Level
 */
export enum Level {
    /**
     * The usual logging levels.
     * Should be logged using logging facility.
     *
     * @generated from protobuf enum value: INFO = 0;
     */
    INFO = 0,
    /**
     * @generated from protobuf enum value: WARNING = 1;
     */
    WARNING = 1,
    /**
     * @generated from protobuf enum value: ERROR = 2;
     */
    ERROR = 2,
    /**
     * For messages that may contains non-logging events.
     * Should be logged to console directly.
     *
     * @generated from protobuf enum value: CONSOLE = 3;
     */
    CONSOLE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("logutil.Event", [
            { no: 1, name: "time", kind: "message", T: () => Time },
            { no: 2, name: "level", kind: "enum", T: () => ["logutil.Level", Level] },
            { no: 3, name: "file", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "line", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.level = 0;
        message.file = "";
        message.line = 0n;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* vttime.Time time */ 1:
                    message.time = Time.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                case /* logutil.Level level */ 2:
                    message.level = reader.int32();
                    break;
                case /* string file */ 3:
                    message.file = reader.string();
                    break;
                case /* int64 line */ 4:
                    message.line = reader.int64().toBigInt();
                    break;
                case /* string value */ 5:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* vttime.Time time = 1; */
        if (message.time)
            Time.internalBinaryWrite(message.time, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* logutil.Level level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).int32(message.level);
        /* string file = 3; */
        if (message.file !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.file);
        /* int64 line = 4; */
        if (message.line !== 0n)
            writer.tag(4, WireType.Varint).int64(message.line);
        /* string value = 5; */
        if (message.value !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message logutil.Event
 */
export const Event = new Event$Type();
